package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_allOf : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> allOf"
     *
     * Test ID: "allOf::allOf::allOf"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz",
                    "bar": 2
                }
            """,
            """
                {
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf::allOf"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> mismatch second"
     *
     * Test ID: "allOf::allOf::mismatch second"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz"
                }
            """,
            """
                {
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf::mismatch second"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> mismatch first"
     *
     * Test ID: "allOf::allOf::mismatch first"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf::mismatch first"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> wrong type"
     *
     * Test ID: "allOf::allOf::wrong type"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz",
                    "bar": "quux"
                }
            """,
            """
                {
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf::wrong type"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> valid"
     *
     * Test ID: "allOf::allOf with base schema::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": 2,
                    "baz": null
                }
            """,
            """
                {
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf with base schema::valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch base schema"
     *
     * Test ID: "allOf::allOf with base schema::mismatch base schema"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "baz": null
                }
            """,
            """
                {
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with base schema::mismatch base schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch first allOf"
     *
     * Test ID: "allOf::allOf with base schema::mismatch first allOf"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2,
                    "baz": null
                }
            """,
            """
                {
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with base schema::mismatch first allOf"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch second allOf"
     *
     * Test ID: "allOf::allOf with base schema::mismatch second allOf"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": 2
                }
            """,
            """
                {
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with base schema::mismatch second allOf"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch both"
     *
     * Test ID: "allOf::allOf with base schema::mismatch both"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with base schema::mismatch both"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf simple types -> valid"
     *
     * Test ID: "allOf::allOf simple types::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                25
            """,
            """
                {
                    "allOf": [
                        {
                            "maximum": 30
                        },
                        {
                            "minimum": 20
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf simple types::valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf simple types -> mismatch one"
     *
     * Test ID: "allOf::allOf simple types::mismatch one"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                35
            """,
            """
                {
                    "allOf": [
                        {
                            "maximum": 30
                        },
                        {
                            "minimum": 20
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf simple types::mismatch one"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with boolean schemas, all true -> any value is valid"
     *
     * Test ID: "allOf::allOf with boolean schemas, all true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "allOf": [
                        true,
                        true
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf with boolean schemas, all true::any value is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with boolean schemas, some false -> any value is invalid"
     *
     * Test ID: "allOf::allOf with boolean schemas, some false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "allOf": [
                        true,
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with boolean schemas, some false::any value is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with boolean schemas, all false -> any value is invalid"
     *
     * Test ID: "allOf::allOf with boolean schemas, all false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "allOf": [
                        false,
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with boolean schemas, all false::any value is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with one empty schema -> any data is valid"
     *
     * Test ID: "allOf::allOf with one empty schema::any data is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "allOf": [
                        {
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf with one empty schema::any data is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with two empty schemas -> any data is valid"
     *
     * Test ID: "allOf::allOf with two empty schemas::any data is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "allOf": [
                        {
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf with two empty schemas::any data is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the first empty schema -> number is valid"
     *
     * Test ID: "allOf::allOf with the first empty schema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "allOf": [
                        {
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf with the first empty schema::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the first empty schema -> string is invalid"
     *
     * Test ID: "allOf::allOf with the first empty schema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "allOf": [
                        {
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with the first empty schema::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the last empty schema -> number is valid"
     *
     * Test ID: "allOf::allOf with the last empty schema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "allOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf with the last empty schema::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the last empty schema -> string is invalid"
     *
     * Test ID: "allOf::allOf with the last empty schema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "allOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf with the last empty schema::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "nested allOf, to check validation semantics -> null is valid"
     *
     * Test ID: "allOf::nested allOf, to check validation semantics::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "allOf": [
                        {
                            "allOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::nested allOf, to check validation semantics::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "nested allOf, to check validation semantics -> anything non-null is invalid"
     *
     * Test ID: "allOf::nested allOf, to check validation semantics::anything non-null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "allOf": [
                        {
                            "allOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::nested allOf, to check validation semantics::anything non-null is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: false, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: false, oneOf: false"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: false, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: false, oneOf: true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: true, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: true, oneOf: false"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: true, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                15
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: true, oneOf: true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: false, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: false, oneOf: false"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: false, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                10
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: false, oneOf: true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: true, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                6
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: true, oneOf: false"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: true, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                30
            """,
            """
                {
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: true, oneOf: true"    """)
    }
}
