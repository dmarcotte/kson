package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_boolean_schema : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> number is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> string is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> boolean true is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::boolean true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::boolean true is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> boolean false is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::boolean false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::boolean false is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> null is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> object is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> empty object is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::empty object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> array is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> empty array is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                true
            """,
            true,
            """    schemaTestId: "boolean_schema::boolean schema 'true'::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> number is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> string is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> boolean true is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::boolean true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::boolean true is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> boolean false is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::boolean false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::boolean false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> null is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::null is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> object is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> empty object is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::empty object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> array is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> empty array is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                false
            """,
            false,
            """    schemaTestId: "boolean_schema::boolean schema 'false'::empty array is invalid"    """)
    }
}
