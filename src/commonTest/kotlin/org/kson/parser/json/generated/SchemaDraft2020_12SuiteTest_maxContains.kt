package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_maxContains : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains without contains is ignored -> one item valid against lone maxContains"
     *
     * Test ID: "maxContains::maxContains without contains is ignored::one item valid against lone maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxContains": 1
                }
            """,
            true,
            """    schemaTestId: "maxContains::maxContains without contains is ignored::one item valid against lone maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains without contains is ignored -> two items still valid against lone maxContains"
     *
     * Test ID: "maxContains::maxContains without contains is ignored::two items still valid against lone maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxContains": 1
                }
            """,
            true,
            """    schemaTestId: "maxContains::maxContains without contains is ignored::two items still valid against lone maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> empty data"
     *
     * Test ID: "maxContains::maxContains with contains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            false,
            """    schemaTestId: "maxContains::maxContains with contains::empty data"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> all elements match, valid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::all elements match, valid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            true,
            """    schemaTestId: "maxContains::maxContains with contains::all elements match, valid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> all elements match, invalid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::all elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "maxContains::maxContains with contains::all elements match, invalid maxContains" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            false,
            """    schemaTestId: "maxContains::maxContains with contains::all elements match, invalid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> some elements match, valid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::some elements match, valid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            true,
            """    schemaTestId: "maxContains::maxContains with contains::some elements match, valid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> some elements match, invalid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::some elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "maxContains::maxContains with contains::some elements match, invalid maxContains" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            false,
            """    schemaTestId: "maxContains::maxContains with contains::some elements match, invalid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains, value with a decimal -> one element matches, valid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains, value with a decimal::one element matches, valid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1.0
                }
            """,
            true,
            """    schemaTestId: "maxContains::maxContains with contains, value with a decimal::one element matches, valid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains, value with a decimal -> too many elements match, invalid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains, value with a decimal::too many elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "maxContains::maxContains with contains, value with a decimal::too many elements match, invalid maxContains" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1.0
                }
            """,
            false,
            """    schemaTestId: "maxContains::maxContains with contains, value with a decimal::too many elements match, invalid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "minContains < maxContains -> actual < minContains < maxContains"
     *
     * Test ID: "maxContains::minContains < maxContains::actual < minContains < maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1,
                    "maxContains": 3
                }
            """,
            false,
            """    schemaTestId: "maxContains::minContains < maxContains::actual < minContains < maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "minContains < maxContains -> minContains < actual < maxContains"
     *
     * Test ID: "maxContains::minContains < maxContains::minContains < actual < maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1,
                    "maxContains": 3
                }
            """,
            true,
            """    schemaTestId: "maxContains::minContains < maxContains::minContains < actual < maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "minContains < maxContains -> minContains < maxContains < actual"
     *
     * Test ID: "maxContains::minContains < maxContains::minContains < maxContains < actual"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "maxContains::minContains < maxContains::minContains < maxContains < actual" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1,
                    "maxContains": 3
                }
            """,
            false,
            """    schemaTestId: "maxContains::minContains < maxContains::minContains < maxContains < actual"    """)
    }
}
