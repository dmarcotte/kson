package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_content : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of string-encoded content based on media type -> a valid JSON document"
     *
     * Test ID: "content::validation of string-encoded content based on media type::a valid JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                "{\"foo\": \"bar\"}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json"
                }
            """,
            true,
            """    schemaTestId: "content::validation of string-encoded content based on media type::a valid JSON document"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of string-encoded content based on media type -> an invalid JSON document; validates true"
     *
     * Test ID: "content::validation of string-encoded content based on media type::an invalid JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                "{:}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json"
                }
            """,
            true,
            """    schemaTestId: "content::validation of string-encoded content based on media type::an invalid JSON document; validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of string-encoded content based on media type -> ignores non-strings"
     *
     * Test ID: "content::validation of string-encoded content based on media type::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json"
                }
            """,
            true,
            """    schemaTestId: "content::validation of string-encoded content based on media type::ignores non-strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary string-encoding -> a valid base64 string"
     *
     * Test ID: "content::validation of binary string-encoding::a valid base64 string"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOiAiYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary string-encoding::a valid base64 string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary string-encoding -> an invalid base64 string (% is not a valid character); validates true"
     *
     * Test ID: "content::validation of binary string-encoding::an invalid base64 string (% is not a valid character); validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOi%iYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary string-encoding::an invalid base64 string (% is not a valid character); validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary string-encoding -> ignores non-strings"
     *
     * Test ID: "content::validation of binary string-encoding::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary string-encoding::ignores non-strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> a valid base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents::a valid base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOiAiYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents::a valid base64-encoded JSON document"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> a validly-encoded invalid JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents::a validly-encoded invalid JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                "ezp9Cg=="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents::a validly-encoded invalid JSON document; validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> an invalid base64 string that is valid JSON; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents::an invalid base64 string that is valid JSON; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                "{}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents::an invalid base64 string that is valid JSON; validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> ignores non-strings"
     *
     * Test ID: "content::validation of binary-encoded media type documents::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents::ignores non-strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> a valid base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::a valid base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOiAiYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::a valid base64-encoded JSON document"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> another valid base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::another valid base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                "eyJib28iOiAyMCwgImZvbyI6ICJiYXoifQ=="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::another valid base64-encoded JSON document"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an invalid base64-encoded JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an invalid base64-encoded JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                "eyJib28iOiAyMH0="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::an invalid base64-encoded JSON document; validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an empty object as a base64-encoded JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an empty object as a base64-encoded JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                "e30="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::an empty object as a base64-encoded JSON document; validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an empty array as a base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an empty array as a base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                "W10="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::an empty array as a base64-encoded JSON document"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> a validly-encoded invalid JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::a validly-encoded invalid JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                "ezp9Cg=="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::a validly-encoded invalid JSON document; validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an invalid base64 string that is valid JSON; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an invalid base64 string that is valid JSON; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                "{}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::an invalid base64 string that is valid JSON; validates true"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> ignores non-strings"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "content::validation of binary-encoded media type documents with schema::ignores non-strings"    """)
    }
}
