package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_prefixItems : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> correct types"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::correct types"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::a schema given for prefixItems::correct types"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> wrong types"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::wrong types"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "prefixItems::a schema given for prefixItems::wrong types" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "prefixItems::a schema given for prefixItems::wrong types"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> incomplete array of items"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::incomplete array of items"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::a schema given for prefixItems::incomplete array of items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> array with additional items"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::array with additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::a schema given for prefixItems::array with additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> empty array"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::empty array"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::a schema given for prefixItems::empty array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> JavaScript pseudo-array is valid"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::JavaScript pseudo-array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "0": "invalid",
                    "1": "valid",
                    "length": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::a schema given for prefixItems::JavaScript pseudo-array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with boolean schemas -> array with one item is valid"
     *
     * Test ID: "prefixItems::prefixItems with boolean schemas::array with one item is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::prefixItems with boolean schemas::array with one item is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with boolean schemas -> array with two items is invalid"
     *
     * Test ID: "prefixItems::prefixItems with boolean schemas::array with two items is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "prefixItems::prefixItems with boolean schemas::array with two items is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true,
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "prefixItems::prefixItems with boolean schemas::array with two items is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with boolean schemas -> empty array is valid"
     *
     * Test ID: "prefixItems::prefixItems with boolean schemas::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::prefixItems with boolean schemas::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "additional items are allowed by default -> only the first item is validated"
     *
     * Test ID: "prefixItems::additional items are allowed by default::only the first item is validated"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::additional items are allowed by default::only the first item is validated"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with null instance elements -> allows null elements"
     *
     * Test ID: "prefixItems::prefixItems with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "null"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "prefixItems::prefixItems with null instance elements::allows null elements"    """)
    }
}
