package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_dependencies : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> neither"
     *
     * Test ID: "dependencies::dependencies::neither"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies::neither"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> nondependant"
     *
     * Test ID: "dependencies::dependencies::nondependant"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies::nondependant"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> with dependency"
     *
     * Test ID: "dependencies::dependencies::with dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies::with dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> missing dependency"
     *
     * Test ID: "dependencies::dependencies::missing dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependencies::missing dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> ignores arrays"
     *
     * Test ID: "dependencies::dependencies::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "bar"
                ]
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> ignores strings"
     *
     * Test ID: "dependencies::dependencies::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> ignores other non-objects"
     *
     * Test ID: "dependencies::dependencies::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with empty array -> empty object"
     *
     * Test ID: "dependencies::dependencies with empty array::empty object"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with empty array::empty object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with empty array -> object with one property"
     *
     * Test ID: "dependencies::dependencies with empty array::object with one property"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with empty array::object with one property"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with empty array -> non-object is valid"
     *
     * Test ID: "dependencies::dependencies with empty array::non-object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "dependencies": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with empty array::non-object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> neither"
     *
     * Test ID: "dependencies::multiple dependencies::neither"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "dependencies": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::multiple dependencies::neither"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> nondependants"
     *
     * Test ID: "dependencies::multiple dependencies::nondependants"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::multiple dependencies::nondependants"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> with dependencies"
     *
     * Test ID: "dependencies::multiple dependencies::with dependencies"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "quux": 3
                }
            """,
            """
                {
                    "dependencies": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::multiple dependencies::with dependencies"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> missing dependency"
     *
     * Test ID: "dependencies::multiple dependencies::missing dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "quux": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::multiple dependencies::missing dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> missing other dependency"
     *
     * Test ID: "dependencies::multiple dependencies::missing other dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1,
                    "quux": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::multiple dependencies::missing other dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> missing both dependencies"
     *
     * Test ID: "dependencies::multiple dependencies::missing both dependencies"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": 1
                }
            """,
            """
                {
                    "dependencies": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::multiple dependencies::missing both dependencies"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> valid"
     *
     * Test ID: "dependencies::multiple dependencies subschema::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::multiple dependencies subschema::valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> no dependency"
     *
     * Test ID: "dependencies::multiple dependencies subschema::no dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux"
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::multiple dependencies subschema::no dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> wrong type"
     *
     * Test ID: "dependencies::multiple dependencies subschema::wrong type"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::multiple dependencies subschema::wrong type"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> wrong type other"
     *
     * Test ID: "dependencies::multiple dependencies subschema::wrong type other"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 2,
                    "bar": "quux"
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::multiple dependencies subschema::wrong type other"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> wrong type both"
     *
     * Test ID: "dependencies::multiple dependencies subschema::wrong type both"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": "quux"
                }
            """,
            """
                {
                    "dependencies": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::multiple dependencies subschema::wrong type both"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> object with property having schema true is valid"
     *
     * Test ID: "dependencies::dependencies with boolean subschemas::object with property having schema true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "dependencies": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with boolean subschemas::object with property having schema true is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> object with property having schema false is invalid"
     *
     * Test ID: "dependencies::dependencies with boolean subschemas::object with property having schema false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependencies with boolean subschemas::object with property having schema false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> object with both properties is invalid"
     *
     * Test ID: "dependencies::dependencies with boolean subschemas::object with both properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependencies with boolean subschemas::object with both properties is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> empty object is valid"
     *
     * Test ID: "dependencies::dependencies with boolean subschemas::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "dependencies": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with boolean subschemas::empty object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> valid object 1"
     *
     * Test ID: "dependencies::dependencies with escaped characters::valid object 1"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo\rbar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        },
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with escaped characters::valid object 1"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> valid object 2"
     *
     * Test ID: "dependencies::dependencies with escaped characters::valid object 2"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\tbar": 1,
                    "a": 2,
                    "b": 3,
                    "c": 4
                }
            """,
            """
                {
                    "dependencies": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        },
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with escaped characters::valid object 2"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> valid object 3"
     *
     * Test ID: "dependencies::dependencies with escaped characters::valid object 3"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": 1,
                    "foo\"bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        },
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependencies with escaped characters::valid object 3"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 1"
     *
     * Test ID: "dependencies::dependencies with escaped characters::invalid object 1"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        },
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependencies with escaped characters::invalid object 1"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 2"
     *
     * Test ID: "dependencies::dependencies with escaped characters::invalid object 2"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\tbar": 1,
                    "a": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        },
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependencies with escaped characters::invalid object 2"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 3"
     *
     * Test ID: "dependencies::dependencies with escaped characters::invalid object 3"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": 1
                }
            """,
            """
                {
                    "dependencies": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        },
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependencies with escaped characters::invalid object 3"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 4"
     *
     * Test ID: "dependencies::dependencies with escaped characters::invalid object 4"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\"bar": 2
                }
            """,
            """
                {
                    "dependencies": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        },
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependencies with escaped characters::invalid object 4"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> matches root"
     *
     * Test ID: "dependencies::dependent subschema incompatible with root::matches root"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependencies": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependent subschema incompatible with root::matches root"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> matches dependency"
     *
     * Test ID: "dependencies::dependent subschema incompatible with root::matches dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependencies": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependent subschema incompatible with root::matches dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> matches both"
     *
     * Test ID: "dependencies::dependent subschema incompatible with root::matches both"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependencies": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependencies::dependent subschema incompatible with root::matches both"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> no dependency"
     *
     * Test ID: "dependencies::dependent subschema incompatible with root::no dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": 1
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependencies": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependencies::dependent subschema incompatible with root::no dependency"    """)
    }
}
