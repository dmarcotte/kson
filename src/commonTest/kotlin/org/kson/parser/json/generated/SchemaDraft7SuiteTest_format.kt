package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_format : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore integers"
     *
     * Test ID: "format::email format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore floats"
     *
     * Test ID: "format::email format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore objects"
     *
     * Test ID: "format::email format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore arrays"
     *
     * Test ID: "format::email format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore booleans"
     *
     * Test ID: "format::email format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore nulls"
     *
     * Test ID: "format::email format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore integers"
     *
     * Test ID: "format::idn-email format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore floats"
     *
     * Test ID: "format::idn-email format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore objects"
     *
     * Test ID: "format::idn-email format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore arrays"
     *
     * Test ID: "format::idn-email format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore booleans"
     *
     * Test ID: "format::idn-email format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore nulls"
     *
     * Test ID: "format::idn-email format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore integers"
     *
     * Test ID: "format::regex format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore floats"
     *
     * Test ID: "format::regex format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore objects"
     *
     * Test ID: "format::regex format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore arrays"
     *
     * Test ID: "format::regex format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore booleans"
     *
     * Test ID: "format::regex format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore nulls"
     *
     * Test ID: "format::regex format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore integers"
     *
     * Test ID: "format::ipv4 format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore floats"
     *
     * Test ID: "format::ipv4 format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore objects"
     *
     * Test ID: "format::ipv4 format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore arrays"
     *
     * Test ID: "format::ipv4 format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore booleans"
     *
     * Test ID: "format::ipv4 format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore nulls"
     *
     * Test ID: "format::ipv4 format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore integers"
     *
     * Test ID: "format::ipv6 format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore floats"
     *
     * Test ID: "format::ipv6 format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore objects"
     *
     * Test ID: "format::ipv6 format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore arrays"
     *
     * Test ID: "format::ipv6 format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore booleans"
     *
     * Test ID: "format::ipv6 format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore nulls"
     *
     * Test ID: "format::ipv6 format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore integers"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore floats"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore objects"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore arrays"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore booleans"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore nulls"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore integers"
     *
     * Test ID: "format::hostname format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore floats"
     *
     * Test ID: "format::hostname format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore objects"
     *
     * Test ID: "format::hostname format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore arrays"
     *
     * Test ID: "format::hostname format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore booleans"
     *
     * Test ID: "format::hostname format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore nulls"
     *
     * Test ID: "format::hostname format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore integers"
     *
     * Test ID: "format::date format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore floats"
     *
     * Test ID: "format::date format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore objects"
     *
     * Test ID: "format::date format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore arrays"
     *
     * Test ID: "format::date format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore booleans"
     *
     * Test ID: "format::date format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore nulls"
     *
     * Test ID: "format::date format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore integers"
     *
     * Test ID: "format::date-time format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore floats"
     *
     * Test ID: "format::date-time format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore objects"
     *
     * Test ID: "format::date-time format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore arrays"
     *
     * Test ID: "format::date-time format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore booleans"
     *
     * Test ID: "format::date-time format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore nulls"
     *
     * Test ID: "format::date-time format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore integers"
     *
     * Test ID: "format::time format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore floats"
     *
     * Test ID: "format::time format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore objects"
     *
     * Test ID: "format::time format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore arrays"
     *
     * Test ID: "format::time format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore booleans"
     *
     * Test ID: "format::time format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore nulls"
     *
     * Test ID: "format::time format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore integers"
     *
     * Test ID: "format::json-pointer format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore floats"
     *
     * Test ID: "format::json-pointer format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore objects"
     *
     * Test ID: "format::json-pointer format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore arrays"
     *
     * Test ID: "format::json-pointer format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore booleans"
     *
     * Test ID: "format::json-pointer format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore nulls"
     *
     * Test ID: "format::json-pointer format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore integers"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_67() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore floats"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_68() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore objects"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_69() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore arrays"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_70() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore booleans"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_71() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore nulls"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_72() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore integers"
     *
     * Test ID: "format::iri format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_73() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore floats"
     *
     * Test ID: "format::iri format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_74() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore objects"
     *
     * Test ID: "format::iri format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_75() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore arrays"
     *
     * Test ID: "format::iri format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_76() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore booleans"
     *
     * Test ID: "format::iri format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_77() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore nulls"
     *
     * Test ID: "format::iri format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_78() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore integers"
     *
     * Test ID: "format::iri-reference format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_79() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore floats"
     *
     * Test ID: "format::iri-reference format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_80() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore objects"
     *
     * Test ID: "format::iri-reference format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_81() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore arrays"
     *
     * Test ID: "format::iri-reference format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_82() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore booleans"
     *
     * Test ID: "format::iri-reference format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_83() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore nulls"
     *
     * Test ID: "format::iri-reference format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_84() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore integers"
     *
     * Test ID: "format::uri format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_85() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore floats"
     *
     * Test ID: "format::uri format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_86() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore objects"
     *
     * Test ID: "format::uri format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_87() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_88() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_89() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_90() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore integers"
     *
     * Test ID: "format::uri-reference format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_91() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore floats"
     *
     * Test ID: "format::uri-reference format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_92() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore objects"
     *
     * Test ID: "format::uri-reference format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_93() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri-reference format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_94() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri-reference format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_95() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri-reference format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_96() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore integers"
     *
     * Test ID: "format::uri-template format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_97() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore floats"
     *
     * Test ID: "format::uri-template format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_98() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore objects"
     *
     * Test ID: "format::uri-template format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_99() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri-template format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_100() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri-template format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_101() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri-template format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_102() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore nulls"    """)
    }
}
