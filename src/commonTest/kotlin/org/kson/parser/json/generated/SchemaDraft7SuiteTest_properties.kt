package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_properties : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> both properties present and valid is valid"
     *
     * Test ID: "properties::object properties validation::both properties present and valid is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": "baz"
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::object properties validation::both properties present and valid is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> one property invalid is invalid"
     *
     * Test ID: "properties::object properties validation::one property invalid is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": {
                    }
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::object properties validation::one property invalid is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> both properties invalid is invalid"
     *
     * Test ID: "properties::object properties validation::both properties invalid is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                    ],
                    "bar": {
                    }
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::object properties validation::both properties invalid is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> doesn't invalidate other properties"
     *
     * Test ID: "properties::object properties validation::doesn't invalidate other properties"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": [
                    ]
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::object properties validation::doesn't invalidate other properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> ignores arrays"
     *
     * Test ID: "properties::object properties validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::object properties validation::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> ignores other non-objects"
     *
     * Test ID: "properties::object properties validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::object properties validation::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> property validates property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::property validates property"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        1,
                        2
                    ]
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::property validates property"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> property invalidates property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::property invalidates property"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        1,
                        2,
                        3,
                        4
                    ]
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::property invalidates property"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty invalidates property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::patternProperty invalidates property"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                    ]
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::patternProperty invalidates property"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty validates nonproperty"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::patternProperty validates nonproperty"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "fxo": [
                        1,
                        2
                    ]
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::patternProperty validates nonproperty"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty invalidates nonproperty"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::patternProperty invalidates nonproperty"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "fxo": [
                    ]
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::patternProperty invalidates nonproperty"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty ignores property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty ignores property"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": [
                    ]
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty ignores property"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty validates others"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty validates others"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": 3
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty validates others"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty invalidates others"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty invalidates others"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": "foo"
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty invalidates others"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> no property present is valid"
     *
     * Test ID: "properties::properties with boolean schema::no property present is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties with boolean schema::no property present is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> only 'true' property present is valid"
     *
     * Test ID: "properties::properties with boolean schema::only 'true' property present is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties with boolean schema::only 'true' property present is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> only 'false' property present is invalid"
     *
     * Test ID: "properties::properties with boolean schema::only 'false' property present is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties with boolean schema::only 'false' property present is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> both properties present is invalid"
     *
     * Test ID: "properties::properties with boolean schema::both properties present is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties with boolean schema::both properties present is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with escaped characters -> object with all numbers is valid"
     *
     * Test ID: "properties::properties with escaped characters::object with all numbers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo\"bar": 1,
                    "foo\\bar": 1,
                    "foo\rbar": 1,
                    "foo\tbar": 1,
                    "foo\fbar": 1
                }
            """,
            """
                {
                    "properties": {
                        "foo\nbar": {
                            "type": "number"
                        },
                        "foo\"bar": {
                            "type": "number"
                        },
                        "foo\\bar": {
                            "type": "number"
                        },
                        "foo\rbar": {
                            "type": "number"
                        },
                        "foo\tbar": {
                            "type": "number"
                        },
                        "foo\fbar": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties with escaped characters::object with all numbers is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with escaped characters -> object with strings is invalid"
     *
     * Test ID: "properties::properties with escaped characters::object with strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": "1",
                    "foo\"bar": "1",
                    "foo\\bar": "1",
                    "foo\rbar": "1",
                    "foo\tbar": "1",
                    "foo\fbar": "1"
                }
            """,
            """
                {
                    "properties": {
                        "foo\nbar": {
                            "type": "number"
                        },
                        "foo\"bar": {
                            "type": "number"
                        },
                        "foo\\bar": {
                            "type": "number"
                        },
                        "foo\rbar": {
                            "type": "number"
                        },
                        "foo\tbar": {
                            "type": "number"
                        },
                        "foo\fbar": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties with escaped characters::object with strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with null valued instance properties -> allows null values"
     *
     * Test ID: "properties::properties with null valued instance properties::allows null values"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": null
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "null"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties with null valued instance properties::allows null values"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> ignores arrays"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties whose names are Javascript object property names::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> ignores other non-objects"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties whose names are Javascript object property names::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> none of the properties mentioned"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::none of the properties mentioned"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties whose names are Javascript object property names::none of the properties mentioned"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> __proto__ not valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::__proto__ not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": "foo"
                }
            """,
            """
                {
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties whose names are Javascript object property names::__proto__ not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> toString not valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::toString not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "toString": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties whose names are Javascript object property names::toString not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> constructor not valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::constructor not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "constructor": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "properties::properties whose names are Javascript object property names::constructor not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> all present and valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::all present and valid"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": 12,
                    "toString": {
                        "length": "foo"
                    },
                    "constructor": 37
                }
            """,
            """
                {
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "properties::properties whose names are Javascript object property names::all present and valid"    """)
    }
}
