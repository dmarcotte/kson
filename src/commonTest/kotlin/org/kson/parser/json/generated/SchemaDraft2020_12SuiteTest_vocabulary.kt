package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_vocabulary : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "schema that uses custom metaschema with with no validation vocabulary -> applicator vocabulary still works"
     *
     * Test ID: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::applicator vocabulary still works"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "badProperty": "this property should not exist"
                }
            """,
            """
                {
                    "${'$'}id": "https://schema/using/no/validation",
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-no-validation.json",
                    "properties": {
                        "badProperty": false,
                        "numberProperty": {
                            "minimum": 10
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::applicator vocabulary still works"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "schema that uses custom metaschema with with no validation vocabulary -> no validation: valid number"
     *
     * Test ID: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::no validation: valid number"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "numberProperty": 20
                }
            """,
            """
                {
                    "${'$'}id": "https://schema/using/no/validation",
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-no-validation.json",
                    "properties": {
                        "badProperty": false,
                        "numberProperty": {
                            "minimum": 10
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::no validation: valid number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "schema that uses custom metaschema with with no validation vocabulary -> no validation: invalid number, but it still validates"
     *
     * Test ID: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::no validation: invalid number, but it still validates"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "vocabulary::schema that uses custom metaschema with with no validation vocabulary::no validation: invalid number, but it still validates" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "numberProperty": 1
                }
            """,
            """
                {
                    "${'$'}id": "https://schema/using/no/validation",
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-no-validation.json",
                    "properties": {
                        "badProperty": false,
                        "numberProperty": {
                            "minimum": 10
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::no validation: invalid number, but it still validates"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "ignore unrecognized optional vocabulary -> string value"
     *
     * Test ID: "vocabulary::ignore unrecognized optional vocabulary::string value"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-optional-vocabulary.json",
                    "type": "number"
                }
            """,
            false,
            """    schemaTestId: "vocabulary::ignore unrecognized optional vocabulary::string value"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "ignore unrecognized optional vocabulary -> number value"
     *
     * Test ID: "vocabulary::ignore unrecognized optional vocabulary::number value"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                20
            """,
            """
                {
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-optional-vocabulary.json",
                    "type": "number"
                }
            """,
            true,
            """    schemaTestId: "vocabulary::ignore unrecognized optional vocabulary::number value"    """)
    }
}
