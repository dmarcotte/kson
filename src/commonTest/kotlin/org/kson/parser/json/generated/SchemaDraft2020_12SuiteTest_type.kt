package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_type : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> an integer is an integer"
     *
     * Test ID: "type::integer type matches integers::an integer is an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            true,
            """    schemaTestId: "type::integer type matches integers::an integer is an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a float with zero fractional part is an integer"
     *
     * Test ID: "type::integer type matches integers::a float with zero fractional part is an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            true,
            """    schemaTestId: "type::integer type matches integers::a float with zero fractional part is an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a float is not an integer"
     *
     * Test ID: "type::integer type matches integers::a float is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """    schemaTestId: "type::integer type matches integers::a float is not an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a string is not an integer"
     *
     * Test ID: "type::integer type matches integers::a string is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """    schemaTestId: "type::integer type matches integers::a string is not an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a string is still not an integer, even if it looks like one"
     *
     * Test ID: "type::integer type matches integers::a string is still not an integer, even if it looks like one"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """    schemaTestId: "type::integer type matches integers::a string is still not an integer, even if it looks like one"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> an object is not an integer"
     *
     * Test ID: "type::integer type matches integers::an object is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """    schemaTestId: "type::integer type matches integers::an object is not an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> an array is not an integer"
     *
     * Test ID: "type::integer type matches integers::an array is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """    schemaTestId: "type::integer type matches integers::an array is not an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a boolean is not an integer"
     *
     * Test ID: "type::integer type matches integers::a boolean is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """    schemaTestId: "type::integer type matches integers::a boolean is not an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> null is not an integer"
     *
     * Test ID: "type::integer type matches integers::null is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """    schemaTestId: "type::integer type matches integers::null is not an integer"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> an integer is a number"
     *
     * Test ID: "type::number type matches numbers::an integer is a number"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            true,
            """    schemaTestId: "type::number type matches numbers::an integer is a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a float with zero fractional part is a number (and an integer)"
     *
     * Test ID: "type::number type matches numbers::a float with zero fractional part is a number (and an integer)"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            true,
            """    schemaTestId: "type::number type matches numbers::a float with zero fractional part is a number (and an integer)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a float is a number"
     *
     * Test ID: "type::number type matches numbers::a float is a number"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            true,
            """    schemaTestId: "type::number type matches numbers::a float is a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a string is not a number"
     *
     * Test ID: "type::number type matches numbers::a string is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """    schemaTestId: "type::number type matches numbers::a string is not a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a string is still not a number, even if it looks like one"
     *
     * Test ID: "type::number type matches numbers::a string is still not a number, even if it looks like one"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """    schemaTestId: "type::number type matches numbers::a string is still not a number, even if it looks like one"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> an object is not a number"
     *
     * Test ID: "type::number type matches numbers::an object is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """    schemaTestId: "type::number type matches numbers::an object is not a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> an array is not a number"
     *
     * Test ID: "type::number type matches numbers::an array is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """    schemaTestId: "type::number type matches numbers::an array is not a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a boolean is not a number"
     *
     * Test ID: "type::number type matches numbers::a boolean is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """    schemaTestId: "type::number type matches numbers::a boolean is not a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> null is not a number"
     *
     * Test ID: "type::number type matches numbers::null is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """    schemaTestId: "type::number type matches numbers::null is not a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> 1 is not a string"
     *
     * Test ID: "type::string type matches strings::1 is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """    schemaTestId: "type::string type matches strings::1 is not a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a float is not a string"
     *
     * Test ID: "type::string type matches strings::a float is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """    schemaTestId: "type::string type matches strings::a float is not a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a string is a string"
     *
     * Test ID: "type::string type matches strings::a string is a string"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            true,
            """    schemaTestId: "type::string type matches strings::a string is a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a string is still a string, even if it looks like a number"
     *
     * Test ID: "type::string type matches strings::a string is still a string, even if it looks like a number"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            true,
            """    schemaTestId: "type::string type matches strings::a string is still a string, even if it looks like a number"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> an empty string is still a string"
     *
     * Test ID: "type::string type matches strings::an empty string is still a string"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            true,
            """    schemaTestId: "type::string type matches strings::an empty string is still a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> an object is not a string"
     *
     * Test ID: "type::string type matches strings::an object is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """    schemaTestId: "type::string type matches strings::an object is not a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> an array is not a string"
     *
     * Test ID: "type::string type matches strings::an array is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """    schemaTestId: "type::string type matches strings::an array is not a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a boolean is not a string"
     *
     * Test ID: "type::string type matches strings::a boolean is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """    schemaTestId: "type::string type matches strings::a boolean is not a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> null is not a string"
     *
     * Test ID: "type::string type matches strings::null is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """    schemaTestId: "type::string type matches strings::null is not a string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> an integer is not an object"
     *
     * Test ID: "type::object type matches objects::an integer is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """    schemaTestId: "type::object type matches objects::an integer is not an object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> a float is not an object"
     *
     * Test ID: "type::object type matches objects::a float is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """    schemaTestId: "type::object type matches objects::a float is not an object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> a string is not an object"
     *
     * Test ID: "type::object type matches objects::a string is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """    schemaTestId: "type::object type matches objects::a string is not an object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> an object is an object"
     *
     * Test ID: "type::object type matches objects::an object is an object"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            true,
            """    schemaTestId: "type::object type matches objects::an object is an object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> an array is not an object"
     *
     * Test ID: "type::object type matches objects::an array is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """    schemaTestId: "type::object type matches objects::an array is not an object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> a boolean is not an object"
     *
     * Test ID: "type::object type matches objects::a boolean is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """    schemaTestId: "type::object type matches objects::a boolean is not an object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> null is not an object"
     *
     * Test ID: "type::object type matches objects::null is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """    schemaTestId: "type::object type matches objects::null is not an object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> an integer is not an array"
     *
     * Test ID: "type::array type matches arrays::an integer is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """    schemaTestId: "type::array type matches arrays::an integer is not an array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> a float is not an array"
     *
     * Test ID: "type::array type matches arrays::a float is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """    schemaTestId: "type::array type matches arrays::a float is not an array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> a string is not an array"
     *
     * Test ID: "type::array type matches arrays::a string is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """    schemaTestId: "type::array type matches arrays::a string is not an array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> an object is not an array"
     *
     * Test ID: "type::array type matches arrays::an object is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """    schemaTestId: "type::array type matches arrays::an object is not an array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> an array is an array"
     *
     * Test ID: "type::array type matches arrays::an array is an array"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            true,
            """    schemaTestId: "type::array type matches arrays::an array is an array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> a boolean is not an array"
     *
     * Test ID: "type::array type matches arrays::a boolean is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """    schemaTestId: "type::array type matches arrays::a boolean is not an array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> null is not an array"
     *
     * Test ID: "type::array type matches arrays::null is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """    schemaTestId: "type::array type matches arrays::null is not an array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an integer is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an integer is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::an integer is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> zero is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::zero is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::zero is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> a float is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::a float is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::a float is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> a string is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::a string is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::a string is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an empty string is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an empty string is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::an empty string is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an object is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an object is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::an object is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an array is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an array is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::an array is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> true is a boolean"
     *
     * Test ID: "type::boolean type matches booleans::true is a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            true,
            """    schemaTestId: "type::boolean type matches booleans::true is a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> false is a boolean"
     *
     * Test ID: "type::boolean type matches booleans::false is a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            true,
            """    schemaTestId: "type::boolean type matches booleans::false is a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> null is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::null is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """    schemaTestId: "type::boolean type matches booleans::null is not a boolean"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an integer is not null"
     *
     * Test ID: "type::null type matches only the null object::an integer is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::an integer is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> a float is not null"
     *
     * Test ID: "type::null type matches only the null object::a float is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::a float is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> zero is not null"
     *
     * Test ID: "type::null type matches only the null object::zero is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::zero is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> a string is not null"
     *
     * Test ID: "type::null type matches only the null object::a string is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::a string is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an empty string is not null"
     *
     * Test ID: "type::null type matches only the null object::an empty string is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::an empty string is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an object is not null"
     *
     * Test ID: "type::null type matches only the null object::an object is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::an object is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an array is not null"
     *
     * Test ID: "type::null type matches only the null object::an array is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::an array is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> true is not null"
     *
     * Test ID: "type::null type matches only the null object::true is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::true is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> false is not null"
     *
     * Test ID: "type::null type matches only the null object::false is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """    schemaTestId: "type::null type matches only the null object::false is not null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> null is null"
     *
     * Test ID: "type::null type matches only the null object::null is null"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            true,
            """    schemaTestId: "type::null type matches only the null object::null is null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> an integer is valid"
     *
     * Test ID: "type::multiple types can be specified in an array::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::multiple types can be specified in an array::an integer is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> a string is valid"
     *
     * Test ID: "type::multiple types can be specified in an array::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::multiple types can be specified in an array::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> a float is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::a float is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::multiple types can be specified in an array::a float is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> an object is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::an object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::multiple types can be specified in an array::an object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> an array is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::an array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::multiple types can be specified in an array::an array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> a boolean is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::a boolean is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_67() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::multiple types can be specified in an array::a boolean is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> null is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_68() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::multiple types can be specified in an array::null is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type as array with one item -> string is valid"
     *
     * Test ID: "type::type as array with one item::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_69() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "string"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::type as array with one item::string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type as array with one item -> number is invalid"
     *
     * Test ID: "type::type as array with one item::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_70() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "string"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::type as array with one item::number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> array is valid"
     *
     * Test ID: "type::type: array or object::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_71() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::type: array or object::array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> object is valid"
     *
     * Test ID: "type::type: array or object::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_72() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::type: array or object::object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> number is invalid"
     *
     * Test ID: "type::type: array or object::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_73() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::type: array or object::number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> string is invalid"
     *
     * Test ID: "type::type: array or object::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_74() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::type: array or object::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> null is invalid"
     *
     * Test ID: "type::type: array or object::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_75() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::type: array or object::null is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> array is valid"
     *
     * Test ID: "type::type: array, object or null::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_76() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::type: array, object or null::array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> object is valid"
     *
     * Test ID: "type::type: array, object or null::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_77() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::type: array, object or null::object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> null is valid"
     *
     * Test ID: "type::type: array, object or null::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_78() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            true,
            """    schemaTestId: "type::type: array, object or null::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> number is invalid"
     *
     * Test ID: "type::type: array, object or null::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_79() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::type: array, object or null::number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> string is invalid"
     *
     * Test ID: "type::type: array, object or null::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_80() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            false,
            """    schemaTestId: "type::type: array, object or null::string is invalid"    """)
    }
}
