package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_const : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const validation -> same value is valid"
     *
     * Test ID: "const::const validation::same value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 2
                }
            """,
            true,
            """    schemaTestId: "const::const validation::same value is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const validation -> another value is invalid"
     *
     * Test ID: "const::const validation::another value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 2
                }
            """,
            false,
            """    schemaTestId: "const::const validation::another value is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const validation -> another type is invalid"
     *
     * Test ID: "const::const validation::another type is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 2
                }
            """,
            false,
            """    schemaTestId: "const::const validation::another type is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> same object is valid"
     *
     * Test ID: "const::const with object::same object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar",
                    "baz": "bax"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            true,
            """    schemaTestId: "const::const with object::same object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> same object with different property order is valid"
     *
     * Test ID: "const::const with object::same object with different property order is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "bax",
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            true,
            """    schemaTestId: "const::const with object::same object with different property order is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> another object is invalid"
     *
     * Test ID: "const::const with object::another object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            false,
            """    schemaTestId: "const::const with object::another object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> another type is invalid"
     *
     * Test ID: "const::const with object::another type is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            false,
            """    schemaTestId: "const::const with object::another type is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with array -> same array is valid"
     *
     * Test ID: "const::const with array::same array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        {
                            "foo": "bar"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "const::const with array::same array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with array -> another array item is invalid"
     *
     * Test ID: "const::const with array::another array item is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        {
                            "foo": "bar"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "const::const with array::another array item is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with array -> array with additional items is invalid"
     *
     * Test ID: "const::const with array::array with additional items is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        {
                            "foo": "bar"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "const::const with array::array with additional items is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with null -> null is valid"
     *
     * Test ID: "const::const with null::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": null
                }
            """,
            true,
            """    schemaTestId: "const::const with null::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with null -> not null is invalid"
     *
     * Test ID: "const::const with null::not null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": null
                }
            """,
            false,
            """    schemaTestId: "const::const with null::not null is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with false does not match 0 -> false is valid"
     *
     * Test ID: "const::const with false does not match 0::false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": false
                }
            """,
            true,
            """    schemaTestId: "const::const with false does not match 0::false is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with false does not match 0 -> integer zero is invalid"
     *
     * Test ID: "const::const with false does not match 0::integer zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": false
                }
            """,
            false,
            """    schemaTestId: "const::const with false does not match 0::integer zero is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with false does not match 0 -> float zero is invalid"
     *
     * Test ID: "const::const with false does not match 0::float zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": false
                }
            """,
            false,
            """    schemaTestId: "const::const with false does not match 0::float zero is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with true does not match 1 -> true is valid"
     *
     * Test ID: "const::const with true does not match 1::true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": true
                }
            """,
            true,
            """    schemaTestId: "const::const with true does not match 1::true is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with true does not match 1 -> integer one is invalid"
     *
     * Test ID: "const::const with true does not match 1::integer one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": true
                }
            """,
            false,
            """    schemaTestId: "const::const with true does not match 1::integer one is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with true does not match 1 -> float one is invalid"
     *
     * Test ID: "const::const with true does not match 1::float one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": true
                }
            """,
            false,
            """    schemaTestId: "const::const with true does not match 1::float one is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [false] does not match [0] -> [false] is valid"
     *
     * Test ID: "const::const with [false] does not match [0]::[false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        false
                    ]
                }
            """,
            true,
            """    schemaTestId: "const::const with [false] does not match [0]::[false] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [false] does not match [0] -> [0] is invalid"
     *
     * Test ID: "const::const with [false] does not match [0]::[0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "const::const with [false] does not match [0]::[0] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [false] does not match [0] -> [0.0] is invalid"
     *
     * Test ID: "const::const with [false] does not match [0]::[0.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "const::const with [false] does not match [0]::[0.0] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [true] does not match [1] -> [true] is valid"
     *
     * Test ID: "const::const with [true] does not match [1]::[true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        true
                    ]
                }
            """,
            true,
            """    schemaTestId: "const::const with [true] does not match [1]::[true] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [true] does not match [1] -> [1] is invalid"
     *
     * Test ID: "const::const with [true] does not match [1]::[1] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        true
                    ]
                }
            """,
            false,
            """    schemaTestId: "const::const with [true] does not match [1]::[1] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [true] does not match [1] -> [1.0] is invalid"
     *
     * Test ID: "const::const with [true] does not match [1]::[1.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        true
                    ]
                }
            """,
            false,
            """    schemaTestId: "const::const with [true] does not match [1]::[1.0] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": false} is valid"
     *
     * Test ID: "const::const with {"a": false} does not match {"a": 0}::{"a": false} is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": false
                    }
                }
            """,
            true,
            """    schemaTestId: "const::const with {"a": false} does not match {"a": 0}::{"a": false} is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": 0} is invalid"
     *
     * Test ID: "const::const with {"a": false} does not match {"a": 0}::{"a": 0} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 0
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": false
                    }
                }
            """,
            false,
            """    schemaTestId: "const::const with {"a": false} does not match {"a": 0}::{"a": 0} is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": 0.0} is invalid"
     *
     * Test ID: "const::const with {"a": false} does not match {"a": 0}::{"a": 0.0} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 0.0
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": false
                    }
                }
            """,
            false,
            """    schemaTestId: "const::const with {"a": false} does not match {"a": 0}::{"a": 0.0} is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": true} is valid"
     *
     * Test ID: "const::const with {"a": true} does not match {"a": 1}::{"a": true} is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": true
                    }
                }
            """,
            true,
            """    schemaTestId: "const::const with {"a": true} does not match {"a": 1}::{"a": true} is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": 1} is invalid"
     *
     * Test ID: "const::const with {"a": true} does not match {"a": 1}::{"a": 1} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": true
                    }
                }
            """,
            false,
            """    schemaTestId: "const::const with {"a": true} does not match {"a": 1}::{"a": 1} is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": 1.0} is invalid"
     *
     * Test ID: "const::const with {"a": true} does not match {"a": 1}::{"a": 1.0} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1.0
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": true
                    }
                }
            """,
            false,
            """    schemaTestId: "const::const with {"a": true} does not match {"a": 1}::{"a": 1.0} is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> false is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """    schemaTestId: "const::const with 0 does not match other zero-like types::false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> integer zero is valid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::integer zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            true,
            """    schemaTestId: "const::const with 0 does not match other zero-like types::integer zero is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> float zero is valid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::float zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            true,
            """    schemaTestId: "const::const with 0 does not match other zero-like types::float zero is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> empty object is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """    schemaTestId: "const::const with 0 does not match other zero-like types::empty object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> empty array is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """    schemaTestId: "const::const with 0 does not match other zero-like types::empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> empty string is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::empty string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """    schemaTestId: "const::const with 0 does not match other zero-like types::empty string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 1 does not match true -> true is invalid"
     *
     * Test ID: "const::const with 1 does not match true::true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 1
                }
            """,
            false,
            """    schemaTestId: "const::const with 1 does not match true::true is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 1 does not match true -> integer one is valid"
     *
     * Test ID: "const::const with 1 does not match true::integer one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 1
                }
            """,
            true,
            """    schemaTestId: "const::const with 1 does not match true::integer one is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 1 does not match true -> float one is valid"
     *
     * Test ID: "const::const with 1 does not match true::float one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 1
                }
            """,
            true,
            """    schemaTestId: "const::const with 1 does not match true::float one is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> integer -2 is valid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::integer -2 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                -2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            true,
            """    schemaTestId: "const::const with -2.0 matches integer and float types::integer -2 is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> integer 2 is invalid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::integer 2 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            false,
            """    schemaTestId: "const::const with -2.0 matches integer and float types::integer 2 is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> float -2.0 is valid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::float -2.0 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                -2.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            true,
            """    schemaTestId: "const::const with -2.0 matches integer and float types::float -2.0 is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> float 2.0 is invalid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::float 2.0 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                2.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            false,
            """    schemaTestId: "const::const with -2.0 matches integer and float types::float 2.0 is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> float -2.00001 is invalid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::float -2.00001 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                -2.00001
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            false,
            """    schemaTestId: "const::const with -2.0 matches integer and float types::float -2.00001 is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> integer is valid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740992
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            true,
            """    schemaTestId: "const::float and integers are equal up to 64-bit representation limits::integer is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> integer minus one is invalid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::integer minus one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740991
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            false,
            """    schemaTestId: "const::float and integers are equal up to 64-bit representation limits::integer minus one is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> float is valid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::float is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                9.007199254740992E15
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            true,
            """    schemaTestId: "const::float and integers are equal up to 64-bit representation limits::float is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> float minus one is invalid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::float minus one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                9.007199254740991E15
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            false,
            """    schemaTestId: "const::float and integers are equal up to 64-bit representation limits::float minus one is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "nul characters in strings -> match string with nul"
     *
     * Test ID: "const::nul characters in strings::match string with nul"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                "hello\u0000there"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": "hello\u0000there"
                }
            """,
            true,
            """    schemaTestId: "const::nul characters in strings::match string with nul"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "nul characters in strings -> do not match string lacking nul"
     *
     * Test ID: "const::nul characters in strings::do not match string lacking nul"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                "hellothere"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": "hello\u0000there"
                }
            """,
            false,
            """    schemaTestId: "const::nul characters in strings::do not match string lacking nul"    """)
    }
}
