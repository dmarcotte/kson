package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_items : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> valid items"
     *
     * Test ID: "items::a schema given for items::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::a schema given for items::valid items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> wrong type of items"
     *
     * Test ID: "items::a schema given for items::wrong type of items"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "x"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "items::a schema given for items::wrong type of items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> ignores non-arrays"
     *
     * Test ID: "items::a schema given for items::ignores non-arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::a schema given for items::ignores non-arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> JavaScript pseudo-array is valid"
     *
     * Test ID: "items::a schema given for items::JavaScript pseudo-array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "0": "invalid",
                    "length": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::a schema given for items::JavaScript pseudo-array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (true) -> any array is valid"
     *
     * Test ID: "items::items with boolean schema (true)::any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": true
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schema (true)::any array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (true) -> empty array is valid"
     *
     * Test ID: "items::items with boolean schema (true)::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": true
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schema (true)::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (false) -> any non-empty array is invalid"
     *
     * Test ID: "items::items with boolean schema (false)::any non-empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "items::items with boolean schema (false)::any non-empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (false) -> empty array is valid"
     *
     * Test ID: "items::items with boolean schema (false)::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schema (false)::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> valid items"
     *
     * Test ID: "items::items and subitems::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::items and subitems::valid items" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::items and subitems::valid items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> too many items"
     *
     * Test ID: "items::items and subitems::too many items"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::too many items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> too many sub-items"
     *
     * Test ID: "items::items and subitems::too many sub-items"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::too many sub-items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> wrong item"
     *
     * Test ID: "items::items and subitems::wrong item"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": null
                    },
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::wrong item"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> wrong sub-item"
     *
     * Test ID: "items::items and subitems::wrong sub-item"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::wrong sub-item"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> fewer items is valid"
     *
     * Test ID: "items::items and subitems::fewer items is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::items and subitems::fewer items is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::items and subitems::fewer items is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "nested items -> valid nested array"
     *
     * Test ID: "items::nested items::valid nested array"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            [
                                1
                            ]
                        ],
                        [
                            [
                                2
                            ],
                            [
                                3
                            ]
                        ]
                    ],
                    [
                        [
                            [
                                4
                            ],
                            [
                                5
                            ],
                            [
                                6
                            ]
                        ]
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "items::nested items::valid nested array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "nested items -> nested array with invalid type"
     *
     * Test ID: "items::nested items::nested array with invalid type"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            [
                                "1"
                            ]
                        ],
                        [
                            [
                                2
                            ],
                            [
                                3
                            ]
                        ]
                    ],
                    [
                        [
                            [
                                4
                            ],
                            [
                                5
                            ],
                            [
                                6
                            ]
                        ]
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "items::nested items::nested array with invalid type"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "nested items -> not deep enough"
     *
     * Test ID: "items::nested items::not deep enough"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ],
                    [
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ]
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "items::nested items::not deep enough"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> empty array"
     *
     * Test ID: "items::prefixItems with no additional items allowed::empty array"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "items::prefixItems with no additional items allowed::empty array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> fewer number of items present (1)"
     *
     * Test ID: "items::prefixItems with no additional items allowed::fewer number of items present (1)"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::prefixItems with no additional items allowed::fewer number of items present (1)" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "items::prefixItems with no additional items allowed::fewer number of items present (1)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> fewer number of items present (2)"
     *
     * Test ID: "items::prefixItems with no additional items allowed::fewer number of items present (2)"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::prefixItems with no additional items allowed::fewer number of items present (2)" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "items::prefixItems with no additional items allowed::fewer number of items present (2)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> equal number of items present"
     *
     * Test ID: "items::prefixItems with no additional items allowed::equal number of items present"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::prefixItems with no additional items allowed::equal number of items present" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "items::prefixItems with no additional items allowed::equal number of items present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> additional items are not permitted"
     *
     * Test ID: "items::prefixItems with no additional items allowed::additional items are not permitted"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "items::prefixItems with no additional items allowed::additional items are not permitted"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items does not look in applicators, valid case -> prefixItems in allOf does not constrain items, invalid case"
     *
     * Test ID: "items::items does not look in applicators, valid case::prefixItems in allOf does not constrain items, invalid case"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "minimum": 3
                                }
                            ]
                        }
                    ],
                    "items": {
                        "minimum": 5
                    }
                }
            """,
            false,
            """    schemaTestId: "items::items does not look in applicators, valid case::prefixItems in allOf does not constrain items, invalid case"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items does not look in applicators, valid case -> prefixItems in allOf does not constrain items, valid case"
     *
     * Test ID: "items::items does not look in applicators, valid case::prefixItems in allOf does not constrain items, valid case"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                [
                    5,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "minimum": 3
                                }
                            ]
                        }
                    ],
                    "items": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "items::items does not look in applicators, valid case::prefixItems in allOf does not constrain items, valid case"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems validation adjusts the starting index for items -> valid items"
     *
     * Test ID: "items::prefixItems validation adjusts the starting index for items::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::prefixItems validation adjusts the starting index for items::valid items" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    "x",
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::prefixItems validation adjusts the starting index for items::valid items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems validation adjusts the starting index for items -> wrong type of second item"
     *
     * Test ID: "items::prefixItems validation adjusts the starting index for items::wrong type of second item"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "x",
                    "y"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "items::prefixItems validation adjusts the starting index for items::wrong type of second item"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with heterogeneous array -> heterogeneous invalid instance"
     *
     * Test ID: "items::items with heterogeneous array::heterogeneous invalid instance"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    37
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        }
                    ],
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "items::items with heterogeneous array::heterogeneous invalid instance"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with heterogeneous array -> valid instance"
     *
     * Test ID: "items::items with heterogeneous array::valid instance"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::items with heterogeneous array::valid instance" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "items::items with heterogeneous array::valid instance"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with null instance elements -> allows null elements"
     *
     * Test ID: "items::items with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "null"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::items with null instance elements::allows null elements"    """)
    }
}
