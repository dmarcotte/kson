package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_dependentRequired : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> neither"
     *
     * Test ID: "dependentRequired::single dependency::neither"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::single dependency::neither"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> nondependant"
     *
     * Test ID: "dependentRequired::single dependency::nondependant"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::single dependency::nondependant"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> with dependency"
     *
     * Test ID: "dependentRequired::single dependency::with dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::single dependency::with dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> missing dependency"
     *
     * Test ID: "dependentRequired::single dependency::missing dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentRequired::single dependency::missing dependency" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentRequired::single dependency::missing dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> ignores arrays"
     *
     * Test ID: "dependentRequired::single dependency::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::single dependency::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> ignores strings"
     *
     * Test ID: "dependentRequired::single dependency::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::single dependency::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> ignores other non-objects"
     *
     * Test ID: "dependentRequired::single dependency::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::single dependency::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "empty dependents -> empty object"
     *
     * Test ID: "dependentRequired::empty dependents::empty object"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::empty dependents::empty object"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "empty dependents -> object with one property"
     *
     * Test ID: "dependentRequired::empty dependents::object with one property"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::empty dependents::object with one property"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "empty dependents -> non-object is valid"
     *
     * Test ID: "dependentRequired::empty dependents::non-object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::empty dependents::non-object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> neither"
     *
     * Test ID: "dependentRequired::multiple dependents required::neither"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::multiple dependents required::neither"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> nondependants"
     *
     * Test ID: "dependentRequired::multiple dependents required::nondependants"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::multiple dependents required::nondependants"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> with dependencies"
     *
     * Test ID: "dependentRequired::multiple dependents required::with dependencies"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "quux": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::multiple dependents required::with dependencies"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> missing dependency"
     *
     * Test ID: "dependentRequired::multiple dependents required::missing dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentRequired::multiple dependents required::missing dependency" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "quux": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentRequired::multiple dependents required::missing dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> missing other dependency"
     *
     * Test ID: "dependentRequired::multiple dependents required::missing other dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentRequired::multiple dependents required::missing other dependency" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1,
                    "quux": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentRequired::multiple dependents required::missing other dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> missing both dependencies"
     *
     * Test ID: "dependentRequired::multiple dependents required::missing both dependencies"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentRequired::multiple dependents required::missing both dependencies" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentRequired::multiple dependents required::missing both dependencies"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> CRLF"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::CRLF"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo\rbar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::dependencies with escaped characters::CRLF"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> quoted quotes"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::quoted quotes"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": 1,
                    "foo\"bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentRequired::dependencies with escaped characters::quoted quotes"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> CRLF missing dependent"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::CRLF missing dependent"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentRequired::dependencies with escaped characters::CRLF missing dependent" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentRequired::dependencies with escaped characters::CRLF missing dependent"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> quoted quotes missing dependent"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::quoted quotes missing dependent"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentRequired::dependencies with escaped characters::quoted quotes missing dependent" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\"bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentRequired::dependencies with escaped characters::quoted quotes missing dependent"    """)
    }
}
