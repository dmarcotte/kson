package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_default : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid type for default -> valid when property is specified"
     *
     * Test ID: "default::invalid type for default::valid when property is specified"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 13
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer",
                            "default": [
                            ]
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "default::invalid type for default::valid when property is specified"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid type for default -> still valid when the invalid default is used"
     *
     * Test ID: "default::invalid type for default::still valid when the invalid default is used"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "type": "integer",
                            "default": [
                            ]
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "default::invalid type for default::still valid when the invalid default is used"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid string value for default -> valid when property is specified"
     *
     * Test ID: "default::invalid string value for default::valid when property is specified"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "good"
                }
            """,
            """
                {
                    "properties": {
                        "bar": {
                            "type": "string",
                            "minLength": 4,
                            "default": "bad"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "default::invalid string value for default::valid when property is specified"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid string value for default -> still valid when the invalid default is used"
     *
     * Test ID: "default::invalid string value for default::still valid when the invalid default is used"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "properties": {
                        "bar": {
                            "type": "string",
                            "minLength": 4,
                            "default": "bad"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "default::invalid string value for default::still valid when the invalid default is used"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (passing)"
     *
     * Test ID: "default::the default keyword does not do anything if the property is missing::an explicit property value is checked against maximum (passing)"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "alpha": 1
                }
            """,
            """
                {
                    "type": "object",
                    "properties": {
                        "alpha": {
                            "type": "number",
                            "maximum": 3,
                            "default": 5
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "default::the default keyword does not do anything if the property is missing::an explicit property value is checked against maximum (passing)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (failing)"
     *
     * Test ID: "default::the default keyword does not do anything if the property is missing::an explicit property value is checked against maximum (failing)"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "alpha": 5
                }
            """,
            """
                {
                    "type": "object",
                    "properties": {
                        "alpha": {
                            "type": "number",
                            "maximum": 3,
                            "default": 5
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "default::the default keyword does not do anything if the property is missing::an explicit property value is checked against maximum (failing)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "the default keyword does not do anything if the property is missing -> missing properties are not filled in with the default"
     *
     * Test ID: "default::the default keyword does not do anything if the property is missing::missing properties are not filled in with the default"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "type": "object",
                    "properties": {
                        "alpha": {
                            "type": "number",
                            "maximum": 3,
                            "default": 5
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "default::the default keyword does not do anything if the property is missing::missing properties are not filled in with the default"    """)
    }
}
