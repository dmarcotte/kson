package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_unevaluatedProperties : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties true -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties true::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": true
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties true::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties true -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties true::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": true
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties true::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties schema -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties schema::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": {
                        "type": "string",
                        "minLength": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties schema::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties schema -> with valid unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties schema::with valid unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": {
                        "type": "string",
                        "minLength": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties schema::with valid unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties schema -> with invalid unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties schema::with invalid unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "fo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": {
                        "type": "string",
                        "minLength": 3
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties schema::with invalid unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties false -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties false::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties false::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties false -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties false::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties false::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent properties -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent properties::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with adjacent properties::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent properties -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent properties::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with adjacent properties::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent patternProperties -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent patternProperties::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "patternProperties": {
                        "^foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with adjacent patternProperties::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent patternProperties -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent patternProperties::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "patternProperties": {
                        "^foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with adjacent patternProperties::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent additionalProperties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent additionalProperties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": true,
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with adjacent additionalProperties::with no additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent additionalProperties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent additionalProperties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": true,
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with adjacent additionalProperties::with additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested properties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested properties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested properties::with no additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested properties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested properties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested properties::with additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested patternProperties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested patternProperties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "patternProperties": {
                                "^bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested patternProperties::with no additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested patternProperties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested patternProperties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "patternProperties": {
                                "^bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested patternProperties::with additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested additionalProperties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested additionalProperties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "additionalProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested additionalProperties::with no additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested additionalProperties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested additionalProperties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "additionalProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested additionalProperties::with additional properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested unevaluatedProperties -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested unevaluatedProperties::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": {
                        "type": "string",
                        "maxLength": 2
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested unevaluatedProperties::with no nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested unevaluatedProperties -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested unevaluatedProperties::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": {
                        "type": "string",
                        "maxLength": 2
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with nested unevaluatedProperties::with nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when one matches and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when one matches and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with anyOf::when one matches and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when one matches and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when one matches and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "not-baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with anyOf::when one matches and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when two match and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when two match and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with anyOf::when two match and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when two match and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when two match and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz",
                    "quux": "not-quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with anyOf::when two match and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with oneOf -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with oneOf::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with oneOf::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with oneOf -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with oneOf::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "quux": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with oneOf::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with not -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with not::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "not": {
                        "not": {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with not::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is true and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is true and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is true and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is true and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is true and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is true and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is false and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is false and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is false and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is false and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is false and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "else",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is false and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is true and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is true and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is true and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is true and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is true and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is true and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is false and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is false and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is false and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is false and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is false and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "else",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is false and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is true and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is true and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is true and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is true and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is true and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is true and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is false and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is false and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is false and has no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is false and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is false and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "else",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is false and has unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with dependentSchemas -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with dependentSchemas::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with dependentSchemas::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with dependentSchemas -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with dependentSchemas::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with dependentSchemas::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with boolean schemas -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with boolean schemas::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        true
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with boolean schemas::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with boolean schemas -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with boolean schemas::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        true
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with boolean schemas::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $ref -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $ref::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false,
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with ${'$'}ref::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $ref -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $ref::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false,
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with ${'$'}ref::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties before $ref -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties before $ref::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false,
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties before ${'$'}ref::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties before $ref -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties before $ref::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false,
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties before ${'$'}ref::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $dynamicRef -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $dynamicRef::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-properties-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedProperties comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedProperties": false,
                            "type": "object",
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with ${'$'}dynamicRef::with no unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $dynamicRef -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $dynamicRef::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-properties-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedProperties comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedProperties": false,
                            "type": "object",
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with ${'$'}dynamicRef::with unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can't see inside cousins -> always fails"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can't see inside cousins::always fails"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        },
                        {
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties can't see inside cousins::always fails"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can't see inside cousins (reverse order) -> always fails"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can't see inside cousins (reverse order)::always fails"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "unevaluatedProperties": false
                        },
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties can't see inside cousins (reverse order)::always fails"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties outside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties outside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties outside::with no nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties outside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties outside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties outside::with nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties inside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties inside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties inside::with no nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties inside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties inside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties inside::with nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties outside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties outside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties outside::with no nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties outside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties outside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties outside::with nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties inside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties inside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties inside::with no nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties inside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties inside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties inside::with nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, true with properties -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, true with properties::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        },
                        {
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::cousin unevaluatedProperties, true and false, true with properties::with no nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, true with properties -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, true with properties::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        },
                        {
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::cousin unevaluatedProperties, true and false, true with properties::with nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, false with properties -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, false with properties::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::cousin unevaluatedProperties, true and false, false with properties::with no nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, false with properties -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, false with properties::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::cousin unevaluatedProperties, true and false, false with properties::with nested unevaluated properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "property is evaluated in an uncle schema to unevaluatedProperties -> no extra properties"
     *
     * Test ID: "unevaluatedProperties::property is evaluated in an uncle schema to unevaluatedProperties::no extra properties"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
        // see https://stackoverflow.com/questions/66936884/deeply-nested-unevaluatedproperties-and-their-expectations
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "test"
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "properties": {
                                        "faz": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::property is evaluated in an uncle schema to unevaluatedProperties::no extra properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "property is evaluated in an uncle schema to unevaluatedProperties -> uncle keyword evaluation is not significant"
     *
     * Test ID: "unevaluatedProperties::property is evaluated in an uncle schema to unevaluatedProperties::uncle keyword evaluation is not significant"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
        // see https://stackoverflow.com/questions/66936884/deeply-nested-unevaluatedproperties-and-their-expectations
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "test",
                        "faz": "test"
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "properties": {
                                        "faz": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::property is evaluated in an uncle schema to unevaluatedProperties::uncle keyword evaluation is not significant"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, allOf has unevaluated -> base case: both properties present"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::base case: both properties present"
     */
    @Test
    fun jsonSchemaSuiteTest_67() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            }
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::base case: both properties present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, allOf has unevaluated -> in place applicator siblings, bar is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::in place applicator siblings, bar is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_68() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            }
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::in place applicator siblings, bar is missing"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, allOf has unevaluated -> in place applicator siblings, foo is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::in place applicator siblings, foo is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_69() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            }
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::in place applicator siblings, foo is missing"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, anyOf has unevaluated -> base case: both properties present"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::base case: both properties present"
     */
    @Test
    fun jsonSchemaSuiteTest_70() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::base case: both properties present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, anyOf has unevaluated -> in place applicator siblings, bar is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::in place applicator siblings, bar is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_71() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::in place applicator siblings, bar is missing"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, anyOf has unevaluated -> in place applicator siblings, foo is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::in place applicator siblings, foo is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_72() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::in place applicator siblings, foo is missing"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Empty is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Empty is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_73() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Empty is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Single is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Single is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_74() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Single is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Unevaluated on 1st level is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 1st level is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_75() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                    },
                    "y": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 1st level is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Nested is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Nested is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_76() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Nested is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Unevaluated on 2nd level is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 2nd level is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_77() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                        },
                        "y": {
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 2nd level is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Deep nested is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Deep nested is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_78() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                            "x": {
                            }
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Deep nested is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Unevaluated on 3rd level is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 3rd level is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_79() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                            "x": {
                            },
                            "y": {
                            }
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 3rd level is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> Empty is invalid (no x or y)"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::Empty is invalid (no x or y)"
     */
    @Test
    fun jsonSchemaSuiteTest_80() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::Empty is invalid (no x or y)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b are invalid (no x or y)"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b are invalid (no x or y)"
     */
    @Test
    fun jsonSchemaSuiteTest_81() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b are invalid (no x or y)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> x and y are invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::x and y are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_82() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::x and y are invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and x are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and x are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_83() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "x": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and x are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and y are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and y are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_84() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and y are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b and x are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and x are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_85() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1,
                    "x": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and x are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b and y are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and y are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_86() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and y are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b and x and y are invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and x and y are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_87() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1,
                    "x": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and x and y are invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> Empty is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::Empty is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_88() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::Empty is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_89() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::a is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> b is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::b is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_90() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::b is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> c is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::c is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_91() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::c is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> d is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::d is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_92() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::d is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a + b is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a + b is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_93() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::a + b is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a + c is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a + c is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_94() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::a + c is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_95() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::a + d is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> b + c is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::b + c is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_96() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "b": 1,
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::b + c is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> b + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::b + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_97() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "b": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::b + d is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> c + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::c + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_98() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "c": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::c + d is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_99() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::xx is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + foox is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + foox is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_100() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "foox": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::xx + foox is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + foo is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + foo is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_101() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::xx + foo is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + a is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + a is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_102() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::xx + a is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + b is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + b is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_103() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::xx + b is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + c is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + c is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_104() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::xx + c is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_105() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::xx + d is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> all is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::all is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_106() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "all": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::all is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> all + foo is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::all + foo is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_107() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "all": 1,
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::all + foo is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> all + a is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::all + a is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_108() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "all": 1,
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dynamic evalation inside nested refs::all + a is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores booleans"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_109() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::non-object instances are valid::ignores booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores integers"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores integers"
     */
    @Test
    fun jsonSchemaSuiteTest_110() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::non-object instances are valid::ignores integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores floats"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores floats"
     */
    @Test
    fun jsonSchemaSuiteTest_111() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::non-object instances are valid::ignores floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores arrays"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_112() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::non-object instances are valid::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores strings"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_113() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::non-object instances are valid::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores null"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores null"
     */
    @Test
    fun jsonSchemaSuiteTest_114() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::non-object instances are valid::ignores null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with null valued instance properties -> allows null valued properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with null valued instance properties::allows null valued properties"
     */
    @Test
    fun jsonSchemaSuiteTest_115() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": {
                        "type": "null"
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties with null valued instance properties::allows null valued properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties not affected by propertyNames -> allows only number properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties not affected by propertyNames::allows only number properties"
     */
    @Test
    fun jsonSchemaSuiteTest_116() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 1
                    },
                    "unevaluatedProperties": {
                        "type": "number"
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties not affected by propertyNames::allows only number properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties not affected by propertyNames -> string property is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties not affected by propertyNames::string property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_117() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": "b"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 1
                    },
                    "unevaluatedProperties": {
                        "type": "number"
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties not affected by propertyNames::string property is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can see annotations from if without then and else -> valid in case if is evaluated"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can see annotations from if without then and else::valid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_118() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "patternProperties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties can see annotations from if without then and else::valid in case if is evaluated"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can see annotations from if without then and else -> invalid in case if is evaluated"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can see annotations from if without then and else::invalid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_119() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "patternProperties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::unevaluatedProperties can see annotations from if without then and else::invalid in case if is evaluated"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dependentSchemas with unevaluatedProperties -> unevaluatedProperties doesn't consider dependentSchemas"
     *
     * Test ID: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties doesn't consider dependentSchemas"
     */
    @Test
    fun jsonSchemaSuiteTest_120() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties doesn't consider dependentSchemas"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dependentSchemas with unevaluatedProperties -> unevaluatedProperties doesn't see bar when foo2 is absent"
     *
     * Test ID: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties doesn't see bar when foo2 is absent"
     */
    @Test
    fun jsonSchemaSuiteTest_121() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties doesn't see bar when foo2 is absent"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dependentSchemas with unevaluatedProperties -> unevaluatedProperties sees bar when foo2 is present"
     *
     * Test ID: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties sees bar when foo2 is present"
     */
    @Test
    fun jsonSchemaSuiteTest_122() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo2": "",
                    "bar": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties sees bar when foo2 is present"    """)
    }
}
