package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_maxProperties : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> shorter is valid"
     *
     * Test ID: "maxProperties::maxProperties validation::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "maxProperties": 2
                }
            """,
            true,
            """    schemaTestId: "maxProperties::maxProperties validation::shorter is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> exact length is valid"
     *
     * Test ID: "maxProperties::maxProperties validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "maxProperties": 2
                }
            """,
            true,
            """    schemaTestId: "maxProperties::maxProperties validation::exact length is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> too long is invalid"
     *
     * Test ID: "maxProperties::maxProperties validation::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "baz": 3
                }
            """,
            """
                {
                    "maxProperties": 2
                }
            """,
            false,
            """    schemaTestId: "maxProperties::maxProperties validation::too long is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> ignores arrays"
     *
     * Test ID: "maxProperties::maxProperties validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "maxProperties": 2
                }
            """,
            true,
            """    schemaTestId: "maxProperties::maxProperties validation::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> ignores strings"
     *
     * Test ID: "maxProperties::maxProperties validation::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "maxProperties": 2
                }
            """,
            true,
            """    schemaTestId: "maxProperties::maxProperties validation::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> ignores other non-objects"
     *
     * Test ID: "maxProperties::maxProperties validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "maxProperties": 2
                }
            """,
            true,
            """    schemaTestId: "maxProperties::maxProperties validation::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation with a decimal -> shorter is valid"
     *
     * Test ID: "maxProperties::maxProperties validation with a decimal::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "maxProperties": 2.0
                }
            """,
            true,
            """    schemaTestId: "maxProperties::maxProperties validation with a decimal::shorter is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation with a decimal -> too long is invalid"
     *
     * Test ID: "maxProperties::maxProperties validation with a decimal::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "baz": 3
                }
            """,
            """
                {
                    "maxProperties": 2.0
                }
            """,
            false,
            """    schemaTestId: "maxProperties::maxProperties validation with a decimal::too long is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties = 0 means the object is empty -> no properties is valid"
     *
     * Test ID: "maxProperties::maxProperties = 0 means the object is empty::no properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "maxProperties": 0
                }
            """,
            true,
            """    schemaTestId: "maxProperties::maxProperties = 0 means the object is empty::no properties is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties = 0 means the object is empty -> one property is invalid"
     *
     * Test ID: "maxProperties::maxProperties = 0 means the object is empty::one property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "maxProperties": 0
                }
            """,
            false,
            """    schemaTestId: "maxProperties::maxProperties = 0 means the object is empty::one property is invalid"    """)
    }
}
