package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_anchor : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier -> match"
     *
     * Test ID: "anchor::Location-independent identifier::match"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "anchor::Location-independent identifier::match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier -> mismatch"
     *
     * Test ID: "anchor::Location-independent identifier::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "anchor::Location-independent identifier::mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with absolute URI -> match"
     *
     * Test ID: "anchor::Location-independent identifier with absolute URI::match"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/bar#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/bar",
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "anchor::Location-independent identifier with absolute URI::match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with absolute URI -> mismatch"
     *
     * Test ID: "anchor::Location-independent identifier with absolute URI::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/bar#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/bar",
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "anchor::Location-independent identifier with absolute URI::mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with base URI change in subschema -> match"
     *
     * Test ID: "anchor::Location-independent identifier with base URI change in subschema::match"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/root",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/nested.json#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "nested.json",
                            "${'$'}defs": {
                                "B": {
                                    "${'$'}anchor": "foo",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "anchor::Location-independent identifier with base URI change in subschema::match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with base URI change in subschema -> mismatch"
     *
     * Test ID: "anchor::Location-independent identifier with base URI change in subschema::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/root",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/nested.json#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "nested.json",
                            "${'$'}defs": {
                                "B": {
                                    "${'$'}anchor": "foo",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "anchor::Location-independent identifier with base URI change in subschema::mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "same $anchor with different base uri -> $ref resolves to /$defs/A/allOf/1"
     *
     * Test ID: "anchor::same $anchor with different base uri::$ref resolves to /$defs/A/allOf/1"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/foobar",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "child1",
                            "allOf": [
                                {
                                    "${'$'}id": "child2",
                                    "${'$'}anchor": "my_anchor",
                                    "type": "number"
                                },
                                {
                                    "${'$'}anchor": "my_anchor",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "${'$'}ref": "child1#my_anchor"
                }
            """,
            true,
            """    schemaTestId: "anchor::same ${'$'}anchor with different base uri::${'$'}ref resolves to /${'$'}defs/A/allOf/1"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "same $anchor with different base uri -> $ref does not resolve to /$defs/A/allOf/0"
     *
     * Test ID: "anchor::same $anchor with different base uri::$ref does not resolve to /$defs/A/allOf/0"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/foobar",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "child1",
                            "allOf": [
                                {
                                    "${'$'}id": "child2",
                                    "${'$'}anchor": "my_anchor",
                                    "type": "number"
                                },
                                {
                                    "${'$'}anchor": "my_anchor",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "${'$'}ref": "child1#my_anchor"
                }
            """,
            false,
            """    schemaTestId: "anchor::same ${'$'}anchor with different base uri::${'$'}ref does not resolve to /${'$'}defs/A/allOf/0"    """)
    }
}
