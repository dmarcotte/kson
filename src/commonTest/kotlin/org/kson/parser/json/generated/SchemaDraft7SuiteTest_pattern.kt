package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_pattern : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> a matching pattern is valid"
     *
     * Test ID: "pattern::pattern validation::a matching pattern is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                "aaa"
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern validation::a matching pattern is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> a non-matching pattern is invalid"
     *
     * Test ID: "pattern::pattern validation::a non-matching pattern is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                "abc"
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            false,
            """    schemaTestId: "pattern::pattern validation::a non-matching pattern is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores booleans"
     *
     * Test ID: "pattern::pattern validation::ignores booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern validation::ignores booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores integers"
     *
     * Test ID: "pattern::pattern validation::ignores integers"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern validation::ignores integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores floats"
     *
     * Test ID: "pattern::pattern validation::ignores floats"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern validation::ignores floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores objects"
     *
     * Test ID: "pattern::pattern validation::ignores objects"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern validation::ignores objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores arrays"
     *
     * Test ID: "pattern::pattern validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern validation::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores null"
     *
     * Test ID: "pattern::pattern validation::ignores null"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern validation::ignores null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern is not anchored -> matches a substring"
     *
     * Test ID: "pattern::pattern is not anchored::matches a substring"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                "xxaayy"
            """,
            """
                {
                    "pattern": "a+"
                }
            """,
            true,
            """    schemaTestId: "pattern::pattern is not anchored::matches a substring"    """)
    }
}
