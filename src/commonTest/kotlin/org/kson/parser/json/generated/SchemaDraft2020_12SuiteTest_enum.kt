package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_enum : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "simple enum validation -> one of the enum is valid"
     *
     * Test ID: "enum::simple enum validation::one of the enum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::simple enum validation::one of the enum is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "simple enum validation -> something else is invalid"
     *
     * Test ID: "enum::simple enum validation::something else is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::simple enum validation::something else is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> one of the enum is valid"
     *
     * Test ID: "enum::heterogeneous enum validation::one of the enum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::heterogeneous enum validation::one of the enum is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> something else is invalid"
     *
     * Test ID: "enum::heterogeneous enum validation::something else is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::heterogeneous enum validation::something else is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> objects are deep compared"
     *
     * Test ID: "enum::heterogeneous enum validation::objects are deep compared"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::heterogeneous enum validation::objects are deep compared"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> valid object matches"
     *
     * Test ID: "enum::heterogeneous enum validation::valid object matches"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::heterogeneous enum validation::valid object matches"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> extra properties in object is invalid"
     *
     * Test ID: "enum::heterogeneous enum validation::extra properties in object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12,
                    "boo": 42
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::heterogeneous enum validation::extra properties in object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum-with-null validation -> null is valid"
     *
     * Test ID: "enum::heterogeneous enum-with-null validation::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        null
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::heterogeneous enum-with-null validation::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum-with-null validation -> number is valid"
     *
     * Test ID: "enum::heterogeneous enum-with-null validation::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                6
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        null
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::heterogeneous enum-with-null validation::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum-with-null validation -> something else is invalid"
     *
     * Test ID: "enum::heterogeneous enum-with-null validation::something else is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                "test"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        null
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::heterogeneous enum-with-null validation::something else is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> both properties are valid"
     *
     * Test ID: "enum::enums in properties::both properties are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enums in properties::both properties are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> wrong foo value"
     *
     * Test ID: "enum::enums in properties::wrong foo value"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foot",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enums in properties::wrong foo value"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> wrong bar value"
     *
     * Test ID: "enum::enums in properties::wrong bar value"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bart"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enums in properties::wrong bar value"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> missing optional property is valid"
     *
     * Test ID: "enum::enums in properties::missing optional property is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enums in properties::missing optional property is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> missing required property is invalid"
     *
     * Test ID: "enum::enums in properties::missing required property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enums in properties::missing required property is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> missing all properties is invalid"
     *
     * Test ID: "enum::enums in properties::missing all properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enums in properties::missing all properties is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with escaped characters -> member 1 is valid"
     *
     * Test ID: "enum::enum with escaped characters::member 1 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                "foo\nbar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "foo\nbar",
                        "foo\rbar"
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with escaped characters::member 1 is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with escaped characters -> member 2 is valid"
     *
     * Test ID: "enum::enum with escaped characters::member 2 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                "foo\rbar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "foo\nbar",
                        "foo\rbar"
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with escaped characters::member 2 is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with escaped characters -> another string is invalid"
     *
     * Test ID: "enum::enum with escaped characters::another string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                "abc"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "foo\nbar",
                        "foo\rbar"
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with escaped characters::another string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with false does not match 0 -> false is valid"
     *
     * Test ID: "enum::enum with false does not match 0::false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        false
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with false does not match 0::false is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with false does not match 0 -> integer zero is invalid"
     *
     * Test ID: "enum::enum with false does not match 0::integer zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with false does not match 0::integer zero is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with false does not match 0 -> float zero is invalid"
     *
     * Test ID: "enum::enum with false does not match 0::float zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with false does not match 0::float zero is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [false] does not match [0] -> [false] is valid"
     *
     * Test ID: "enum::enum with [false] does not match [0]::[false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            false
                        ]
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with [false] does not match [0]::[false] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [false] does not match [0] -> [0] is invalid"
     *
     * Test ID: "enum::enum with [false] does not match [0]::[0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            false
                        ]
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with [false] does not match [0]::[0] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [false] does not match [0] -> [0.0] is invalid"
     *
     * Test ID: "enum::enum with [false] does not match [0]::[0.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            false
                        ]
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with [false] does not match [0]::[0.0] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with true does not match 1 -> true is valid"
     *
     * Test ID: "enum::enum with true does not match 1::true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        true
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with true does not match 1::true is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with true does not match 1 -> integer one is invalid"
     *
     * Test ID: "enum::enum with true does not match 1::integer one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        true
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with true does not match 1::integer one is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with true does not match 1 -> float one is invalid"
     *
     * Test ID: "enum::enum with true does not match 1::float one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        true
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with true does not match 1::float one is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [true] does not match [1] -> [true] is valid"
     *
     * Test ID: "enum::enum with [true] does not match [1]::[true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            true
                        ]
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with [true] does not match [1]::[true] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [true] does not match [1] -> [1] is invalid"
     *
     * Test ID: "enum::enum with [true] does not match [1]::[1] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            true
                        ]
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with [true] does not match [1]::[1] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [true] does not match [1] -> [1.0] is invalid"
     *
     * Test ID: "enum::enum with [true] does not match [1]::[1.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            true
                        ]
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with [true] does not match [1]::[1.0] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 0 does not match false -> false is invalid"
     *
     * Test ID: "enum::enum with 0 does not match false::false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        0
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with 0 does not match false::false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 0 does not match false -> integer zero is valid"
     *
     * Test ID: "enum::enum with 0 does not match false::integer zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        0
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with 0 does not match false::integer zero is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 0 does not match false -> float zero is valid"
     *
     * Test ID: "enum::enum with 0 does not match false::float zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        0
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with 0 does not match false::float zero is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [0] does not match [false] -> [false] is invalid"
     *
     * Test ID: "enum::enum with [0] does not match [false]::[false] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            0
                        ]
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with [0] does not match [false]::[false] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [0] does not match [false] -> [0] is valid"
     *
     * Test ID: "enum::enum with [0] does not match [false]::[0] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            0
                        ]
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with [0] does not match [false]::[0] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [0] does not match [false] -> [0.0] is valid"
     *
     * Test ID: "enum::enum with [0] does not match [false]::[0.0] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            0
                        ]
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with [0] does not match [false]::[0.0] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 1 does not match true -> true is invalid"
     *
     * Test ID: "enum::enum with 1 does not match true::true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with 1 does not match true::true is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 1 does not match true -> integer one is valid"
     *
     * Test ID: "enum::enum with 1 does not match true::integer one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with 1 does not match true::integer one is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 1 does not match true -> float one is valid"
     *
     * Test ID: "enum::enum with 1 does not match true::float one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with 1 does not match true::float one is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [1] does not match [true] -> [true] is invalid"
     *
     * Test ID: "enum::enum with [1] does not match [true]::[true] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            1
                        ]
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::enum with [1] does not match [true]::[true] is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [1] does not match [true] -> [1] is valid"
     *
     * Test ID: "enum::enum with [1] does not match [true]::[1] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            1
                        ]
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with [1] does not match [true]::[1] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [1] does not match [true] -> [1.0] is valid"
     *
     * Test ID: "enum::enum with [1] does not match [true]::[1.0] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            1
                        ]
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::enum with [1] does not match [true]::[1.0] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "nul characters in strings -> match string with nul"
     *
     * Test ID: "enum::nul characters in strings::match string with nul"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                "hello\u0000there"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "hello\u0000there"
                    ]
                }
            """,
            true,
            """    schemaTestId: "enum::nul characters in strings::match string with nul"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "nul characters in strings -> do not match string lacking nul"
     *
     * Test ID: "enum::nul characters in strings::do not match string lacking nul"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                "hellothere"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "hello\u0000there"
                    ]
                }
            """,
            false,
            """    schemaTestId: "enum::nul characters in strings::do not match string lacking nul"    """)
    }
}
