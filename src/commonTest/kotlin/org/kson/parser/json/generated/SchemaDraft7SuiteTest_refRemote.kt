package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_refRemote : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref -> remote ref valid"
     *
     * Test ID: "refRemote::remote ref::remote ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::remote ref::remote ref valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/integer.json"
                }
            """,
            true,
            """    schemaTestId: "refRemote::remote ref::remote ref valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref -> remote ref invalid"
     *
     * Test ID: "refRemote::remote ref::remote ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::remote ref::remote ref invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/integer.json"
                }
            """,
            false,
            """    schemaTestId: "refRemote::remote ref::remote ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "fragment within remote ref -> remote fragment valid"
     *
     * Test ID: "refRemote::fragment within remote ref::remote fragment valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::fragment within remote ref::remote fragment valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/subSchemas.json#/definitions/integer"
                }
            """,
            true,
            """    schemaTestId: "refRemote::fragment within remote ref::remote fragment valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "fragment within remote ref -> remote fragment invalid"
     *
     * Test ID: "refRemote::fragment within remote ref::remote fragment invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::fragment within remote ref::remote fragment invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/subSchemas.json#/definitions/integer"
                }
            """,
            false,
            """    schemaTestId: "refRemote::fragment within remote ref::remote fragment invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "ref within remote ref -> ref within ref valid"
     *
     * Test ID: "refRemote::ref within remote ref::ref within ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::ref within remote ref::ref within ref valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/subSchemas.json#/definitions/refToInteger"
                }
            """,
            true,
            """    schemaTestId: "refRemote::ref within remote ref::ref within ref valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "ref within remote ref -> ref within ref invalid"
     *
     * Test ID: "refRemote::ref within remote ref::ref within ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::ref within remote ref::ref within ref invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/subSchemas.json#/definitions/refToInteger"
                }
            """,
            false,
            """    schemaTestId: "refRemote::ref within remote ref::ref within ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change -> base URI change ref valid"
     *
     * Test ID: "refRemote::base URI change::base URI change ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change::base URI change ref valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        1
                    ]
                ]
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/",
                    "items": {
                        "${'$'}id": "baseUriChange/",
                        "items": {
                            "${'$'}ref": "folderInteger.json"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "refRemote::base URI change::base URI change ref valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change -> base URI change ref invalid"
     *
     * Test ID: "refRemote::base URI change::base URI change ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change::base URI change ref invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "a"
                    ]
                ]
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/",
                    "items": {
                        "${'$'}id": "baseUriChange/",
                        "items": {
                            "${'$'}ref": "folderInteger.json"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "refRemote::base URI change::base URI change ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder -> number is valid"
     *
     * Test ID: "refRemote::base URI change - change folder::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder::number is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        1
                    ]
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/scope_change_defs1.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "#/definitions/baz"
                        }
                    },
                    "definitions": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolder/",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "folderInteger.json"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "refRemote::base URI change - change folder::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder -> string is invalid"
     *
     * Test ID: "refRemote::base URI change - change folder::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder::string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        "a"
                    ]
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/scope_change_defs1.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "#/definitions/baz"
                        }
                    },
                    "definitions": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolder/",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "folderInteger.json"
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "refRemote::base URI change - change folder::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder in subschema -> number is valid"
     *
     * Test ID: "refRemote::base URI change - change folder in subschema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder in subschema::number is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        1
                    ]
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/scope_change_defs2.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "#/definitions/baz/definitions/bar"
                        }
                    },
                    "definitions": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolderInSubschema/",
                            "definitions": {
                                "bar": {
                                    "type": "array",
                                    "items": {
                                        "${'$'}ref": "folderInteger.json"
                                    }
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "refRemote::base URI change - change folder in subschema::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder in subschema -> string is invalid"
     *
     * Test ID: "refRemote::base URI change - change folder in subschema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder in subschema::string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        "a"
                    ]
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/scope_change_defs2.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "#/definitions/baz/definitions/bar"
                        }
                    },
                    "definitions": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolderInSubschema/",
                            "definitions": {
                                "bar": {
                                    "type": "array",
                                    "items": {
                                        "${'$'}ref": "folderInteger.json"
                                    }
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "refRemote::base URI change - change folder in subschema::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "root ref in remote ref -> string is valid"
     *
     * Test ID: "refRemote::root ref in remote ref::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::root ref in remote ref::string is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": "foo"
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/object",
                    "type": "object",
                    "properties": {
                        "name": {
                            "${'$'}ref": "name.json#/definitions/orNull"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "refRemote::root ref in remote ref::string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "root ref in remote ref -> null is valid"
     *
     * Test ID: "refRemote::root ref in remote ref::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::root ref in remote ref::null is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": null
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/object",
                    "type": "object",
                    "properties": {
                        "name": {
                            "${'$'}ref": "name.json#/definitions/orNull"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "refRemote::root ref in remote ref::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "root ref in remote ref -> object is invalid"
     *
     * Test ID: "refRemote::root ref in remote ref::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::root ref in remote ref::object is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": {
                        "name": null
                    }
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/object",
                    "type": "object",
                    "properties": {
                        "name": {
                            "${'$'}ref": "name.json#/definitions/orNull"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "refRemote::root ref in remote ref::object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref with ref to definitions -> invalid"
     *
     * Test ID: "refRemote::remote ref with ref to definitions::invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::remote ref with ref to definitions::invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/schema-remote-ref-ref-defs1.json",
                    "allOf": [
                        {
                            "${'$'}ref": "ref-and-definitions.json"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "refRemote::remote ref with ref to definitions::invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref with ref to definitions -> valid"
     *
     * Test ID: "refRemote::remote ref with ref to definitions::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::remote ref with ref to definitions::valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/schema-remote-ref-ref-defs1.json",
                    "allOf": [
                        {
                            "${'$'}ref": "ref-and-definitions.json"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "refRemote::remote ref with ref to definitions::valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "Location-independent identifier in remote ref -> integer is valid"
     *
     * Test ID: "refRemote::Location-independent identifier in remote ref::integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::Location-independent identifier in remote ref::integer is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/locationIndependentIdentifierPre2019.json#/definitions/refToInteger"
                }
            """,
            true,
            """    schemaTestId: "refRemote::Location-independent identifier in remote ref::integer is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "Location-independent identifier in remote ref -> string is invalid"
     *
     * Test ID: "refRemote::Location-independent identifier in remote ref::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::Location-independent identifier in remote ref::string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/locationIndependentIdentifierPre2019.json#/definitions/refToInteger"
                }
            """,
            false,
            """    schemaTestId: "refRemote::Location-independent identifier in remote ref::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "retrieved nested refs resolve relative to their URI not $id -> number is invalid"
     *
     * Test ID: "refRemote::retrieved nested refs resolve relative to their URI not $id::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::retrieved nested refs resolve relative to their URI not $id::number is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": {
                        "foo": 1
                    }
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/some-id",
                    "properties": {
                        "name": {
                            "${'$'}ref": "nested/foo-ref-string.json"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "refRemote::retrieved nested refs resolve relative to their URI not ${'$'}id::number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "retrieved nested refs resolve relative to their URI not $id -> string is valid"
     *
     * Test ID: "refRemote::retrieved nested refs resolve relative to their URI not $id::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::retrieved nested refs resolve relative to their URI not $id::string is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": {
                        "foo": "a"
                    }
                }
            """,
            """
                {
                    "${'$'}id": "http://localhost:1234/some-id",
                    "properties": {
                        "name": {
                            "${'$'}ref": "nested/foo-ref-string.json"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "refRemote::retrieved nested refs resolve relative to their URI not ${'$'}id::string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "$ref to $ref finds location-independent $id -> number is valid"
     *
     * Test ID: "refRemote::$ref to $ref finds location-independent $id::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::$ref to $ref finds location-independent $id::number is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/draft7/detached-ref.json#/definitions/foo"
                }
            """,
            true,
            """    schemaTestId: "refRemote::${'$'}ref to ${'$'}ref finds location-independent ${'$'}id::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "$ref to $ref finds location-independent $id -> non-number is invalid"
     *
     * Test ID: "refRemote::$ref to $ref finds location-independent $id::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::$ref to $ref finds location-independent $id::non-number is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/draft7/detached-ref.json#/definitions/foo"
                }
            """,
            false,
            """    schemaTestId: "refRemote::${'$'}ref to ${'$'}ref finds location-independent ${'$'}id::non-number is invalid"    """)
    }
}
