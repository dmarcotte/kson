package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_minimum : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> above the minimum is valid"
     *
     * Test ID: "minimum::minimum validation::above the minimum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                2.6
            """,
            """
                {
                    "minimum": 1.1
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation::above the minimum is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> boundary point is valid"
     *
     * Test ID: "minimum::minimum validation::boundary point is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "minimum": 1.1
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation::boundary point is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> below the minimum is invalid"
     *
     * Test ID: "minimum::minimum validation::below the minimum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                0.6
            """,
            """
                {
                    "minimum": 1.1
                }
            """,
            false,
            """    schemaTestId: "minimum::minimum validation::below the minimum is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> ignores non-numbers"
     *
     * Test ID: "minimum::minimum validation::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {
                    "minimum": 1.1
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation::ignores non-numbers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> negative above the minimum is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::negative above the minimum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "minimum": -2
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation with signed integer::negative above the minimum is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> positive above the minimum is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::positive above the minimum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "minimum": -2
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation with signed integer::positive above the minimum is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> boundary point is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::boundary point is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                -2
            """,
            """
                {
                    "minimum": -2
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation with signed integer::boundary point is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> boundary point with float is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::boundary point with float is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                -2.0
            """,
            """
                {
                    "minimum": -2
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation with signed integer::boundary point with float is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> float below the minimum is invalid"
     *
     * Test ID: "minimum::minimum validation with signed integer::float below the minimum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                -2.0001
            """,
            """
                {
                    "minimum": -2
                }
            """,
            false,
            """    schemaTestId: "minimum::minimum validation with signed integer::float below the minimum is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> int below the minimum is invalid"
     *
     * Test ID: "minimum::minimum validation with signed integer::int below the minimum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                -3
            """,
            """
                {
                    "minimum": -2
                }
            """,
            false,
            """    schemaTestId: "minimum::minimum validation with signed integer::int below the minimum is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> ignores non-numbers"
     *
     * Test ID: "minimum::minimum validation with signed integer::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {
                    "minimum": -2
                }
            """,
            true,
            """    schemaTestId: "minimum::minimum validation with signed integer::ignores non-numbers"    """)
    }
}
