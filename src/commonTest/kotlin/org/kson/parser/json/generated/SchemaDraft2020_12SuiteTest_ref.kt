package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_ref : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> match"
     *
     * Test ID: "ref::root pointer ref::match"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """    schemaTestId: "ref::root pointer ref::match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> recursive match"
     *
     * Test ID: "ref::root pointer ref::recursive match"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "foo": false
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """    schemaTestId: "ref::root pointer ref::recursive match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> mismatch"
     *
     * Test ID: "ref::root pointer ref::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """    schemaTestId: "ref::root pointer ref::mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> recursive mismatch"
     *
     * Test ID: "ref::root pointer ref::recursive mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": false
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """    schemaTestId: "ref::root pointer ref::recursive mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to object -> match"
     *
     * Test ID: "ref::relative pointer ref to object::match"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "${'$'}ref": "#/properties/foo"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::relative pointer ref to object::match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to object -> mismatch"
     *
     * Test ID: "ref::relative pointer ref to object::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "${'$'}ref": "#/properties/foo"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::relative pointer ref to object::mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to array -> match array"
     *
     * Test ID: "ref::relative pointer ref to array::match array"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "${'$'}ref": "#/prefixItems/0"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "ref::relative pointer ref to array::match array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to array -> mismatch array"
     *
     * Test ID: "ref::relative pointer ref to array::mismatch array"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::relative pointer ref to array::mismatch array" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "${'$'}ref": "#/prefixItems/0"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "ref::relative pointer ref to array::mismatch array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> slash invalid"
     *
     * Test ID: "ref::escaped pointer ref::slash invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "slash": "aoeu"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::escaped pointer ref::slash invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> tilde invalid"
     *
     * Test ID: "ref::escaped pointer ref::tilde invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "tilde": "aoeu"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::escaped pointer ref::tilde invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> percent invalid"
     *
     * Test ID: "ref::escaped pointer ref::percent invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "percent": "aoeu"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::escaped pointer ref::percent invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> slash valid"
     *
     * Test ID: "ref::escaped pointer ref::slash valid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "slash": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::escaped pointer ref::slash valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> tilde valid"
     *
     * Test ID: "ref::escaped pointer ref::tilde valid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "tilde": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::escaped pointer ref::tilde valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> percent valid"
     *
     * Test ID: "ref::escaped pointer ref::percent valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "percent": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::escaped pointer ref::percent valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "nested refs -> nested ref valid"
     *
     * Test ID: "ref::nested refs::nested ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a": {
                            "type": "integer"
                        },
                        "b": {
                            "${'$'}ref": "#/${'$'}defs/a"
                        },
                        "c": {
                            "${'$'}ref": "#/${'$'}defs/b"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/c"
                }
            """,
            true,
            """    schemaTestId: "ref::nested refs::nested ref valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "nested refs -> nested ref invalid"
     *
     * Test ID: "ref::nested refs::nested ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a": {
                            "type": "integer"
                        },
                        "b": {
                            "${'$'}ref": "#/${'$'}defs/a"
                        },
                        "c": {
                            "${'$'}ref": "#/${'$'}defs/b"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/c"
                }
            """,
            false,
            """    schemaTestId: "ref::nested refs::nested ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref applies alongside sibling keywords -> ref valid, maxItems valid"
     *
     * Test ID: "ref::ref applies alongside sibling keywords::ref valid, maxItems valid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/reffed",
                            "maxItems": 2
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::ref applies alongside sibling keywords::ref valid, maxItems valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref applies alongside sibling keywords -> ref valid, maxItems invalid"
     *
     * Test ID: "ref::ref applies alongside sibling keywords::ref valid, maxItems invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::ref applies alongside sibling keywords::ref valid, maxItems invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        1,
                        2,
                        3
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/reffed",
                            "maxItems": 2
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::ref applies alongside sibling keywords::ref valid, maxItems invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref applies alongside sibling keywords -> ref invalid"
     *
     * Test ID: "ref::ref applies alongside sibling keywords::ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "string"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/reffed",
                            "maxItems": 2
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::ref applies alongside sibling keywords::ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "remote ref, containing refs itself -> remote ref valid"
     *
     * Test ID: "ref::remote ref, containing refs itself::remote ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::remote ref, containing refs itself::remote ref valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "minLength": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "https://json-schema.org/draft/2020-12/schema"
                }
            """,
            true,
            """    schemaTestId: "ref::remote ref, containing refs itself::remote ref valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "remote ref, containing refs itself -> remote ref invalid"
     *
     * Test ID: "ref::remote ref, containing refs itself::remote ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::remote ref, containing refs itself::remote ref invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "minLength": -1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "https://json-schema.org/draft/2020-12/schema"
                }
            """,
            false,
            """    schemaTestId: "ref::remote ref, containing refs itself::remote ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref that is not a reference -> property named $ref valid"
     *
     * Test ID: "ref::property named $ref that is not a reference::property named $ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::property named ${'$'}ref that is not a reference::property named ${'$'}ref valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref that is not a reference -> property named $ref invalid"
     *
     * Test ID: "ref::property named $ref that is not a reference::property named $ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::property named ${'$'}ref that is not a reference::property named ${'$'}ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref, containing an actual $ref -> property named $ref valid"
     *
     * Test ID: "ref::property named $ref, containing an actual $ref::property named $ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "${'$'}ref": "#/${'$'}defs/is-string"
                        }
                    },
                    "${'$'}defs": {
                        "is-string": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::property named ${'$'}ref, containing an actual ${'$'}ref::property named ${'$'}ref valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref, containing an actual $ref -> property named $ref invalid"
     *
     * Test ID: "ref::property named $ref, containing an actual $ref::property named $ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "${'$'}ref": "#/${'$'}defs/is-string"
                        }
                    },
                    "${'$'}defs": {
                        "is-string": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::property named ${'$'}ref, containing an actual ${'$'}ref::property named ${'$'}ref invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$ref to boolean schema true -> any value is valid"
     *
     * Test ID: "ref::$ref to boolean schema true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bool",
                    "${'$'}defs": {
                        "bool": true
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::${'$'}ref to boolean schema true::any value is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$ref to boolean schema false -> any value is invalid"
     *
     * Test ID: "ref::$ref to boolean schema false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bool",
                    "${'$'}defs": {
                        "bool": false
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::${'$'}ref to boolean schema false::any value is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "Recursive references between schemas -> valid tree"
     *
     * Test ID: "ref::Recursive references between schemas::valid tree"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "meta": "root",
                    "nodes": [
                        {
                            "value": 1,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 1.1
                                    },
                                    {
                                        "value": 1.2
                                    }
                                ]
                            }
                        },
                        {
                            "value": 2,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 2.1
                                    },
                                    {
                                        "value": 2.2
                                    }
                                ]
                            }
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/tree",
                    "description": "tree of nodes",
                    "type": "object",
                    "properties": {
                        "meta": {
                            "type": "string"
                        },
                        "nodes": {
                            "type": "array",
                            "items": {
                                "${'$'}ref": "node"
                            }
                        }
                    },
                    "required": [
                        "meta",
                        "nodes"
                    ],
                    "${'$'}defs": {
                        "node": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/node",
                            "description": "node",
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "number"
                                },
                                "subtree": {
                                    "${'$'}ref": "tree"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::Recursive references between schemas::valid tree"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "Recursive references between schemas -> invalid tree"
     *
     * Test ID: "ref::Recursive references between schemas::invalid tree"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "meta": "root",
                    "nodes": [
                        {
                            "value": 1,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": "string is invalid"
                                    },
                                    {
                                        "value": 1.2
                                    }
                                ]
                            }
                        },
                        {
                            "value": 2,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 2.1
                                    },
                                    {
                                        "value": 2.2
                                    }
                                ]
                            }
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/tree",
                    "description": "tree of nodes",
                    "type": "object",
                    "properties": {
                        "meta": {
                            "type": "string"
                        },
                        "nodes": {
                            "type": "array",
                            "items": {
                                "${'$'}ref": "node"
                            }
                        }
                    },
                    "required": [
                        "meta",
                        "nodes"
                    ],
                    "${'$'}defs": {
                        "node": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/node",
                            "description": "node",
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "number"
                                },
                                "subtree": {
                                    "${'$'}ref": "tree"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::Recursive references between schemas::invalid tree"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with quote -> object with numbers is valid"
     *
     * Test ID: "ref::refs with quote::object with numbers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\"bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo\"bar": {
                            "${'$'}ref": "#/${'$'}defs/foo%22bar"
                        }
                    },
                    "${'$'}defs": {
                        "foo\"bar": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::refs with quote::object with numbers is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with quote -> object with strings is invalid"
     *
     * Test ID: "ref::refs with quote::object with strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\"bar": "1"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo\"bar": {
                            "${'$'}ref": "#/${'$'}defs/foo%22bar"
                        }
                    },
                    "${'$'}defs": {
                        "foo\"bar": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::refs with quote::object with strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref creates new scope when adjacent to keywords -> referenced subschema doesn't see annotations from properties"
     *
     * Test ID: "ref::ref creates new scope when adjacent to keywords::referenced subschema doesn't see annotations from properties"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::ref creates new scope when adjacent to keywords::referenced subschema doesn't see annotations from properties" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "prop1": "match"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "A": {
                            "unevaluatedProperties": false
                        }
                    },
                    "properties": {
                        "prop1": {
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/A"
                }
            """,
            false,
            """    schemaTestId: "ref::ref creates new scope when adjacent to keywords::referenced subschema doesn't see annotations from properties"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> do not evaluate the $ref inside the enum, matching any string"
     *
     * Test ID: "ref::naive replacement of $ref with its destination is not correct::do not evaluate the $ref inside the enum, matching any string"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                "this is a string"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "enum": [
                        {
                            "${'$'}ref": "#/${'$'}defs/a_string"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "ref::naive replacement of ${'$'}ref with its destination is not correct::do not evaluate the ${'$'}ref inside the enum, matching any string"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> do not evaluate the $ref inside the enum, definition exact match"
     *
     * Test ID: "ref::naive replacement of $ref with its destination is not correct::do not evaluate the $ref inside the enum, definition exact match"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "type": "string"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "enum": [
                        {
                            "${'$'}ref": "#/${'$'}defs/a_string"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "ref::naive replacement of ${'$'}ref with its destination is not correct::do not evaluate the ${'$'}ref inside the enum, definition exact match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> match the enum exactly"
     *
     * Test ID: "ref::naive replacement of $ref with its destination is not correct::match the enum exactly"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": "#/${'$'}defs/a_string"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "enum": [
                        {
                            "${'$'}ref": "#/${'$'}defs/a_string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "ref::naive replacement of ${'$'}ref with its destination is not correct::match the enum exactly"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with relative uris and defs -> invalid on inner field"
     *
     * Test ID: "ref::refs with relative uris and defs::invalid on inner field"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::refs with relative uris and defs::invalid on inner field" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": 1
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-relative-uri-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "schema-relative-uri-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-relative-uri-defs2.json"
                }
            """,
            false,
            """    schemaTestId: "ref::refs with relative uris and defs::invalid on inner field"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with relative uris and defs -> invalid on outer field"
     *
     * Test ID: "ref::refs with relative uris and defs::invalid on outer field"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::refs with relative uris and defs::invalid on outer field" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-relative-uri-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "schema-relative-uri-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-relative-uri-defs2.json"
                }
            """,
            false,
            """    schemaTestId: "ref::refs with relative uris and defs::invalid on outer field"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with relative uris and defs -> valid on both fields"
     *
     * Test ID: "ref::refs with relative uris and defs::valid on both fields"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-relative-uri-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "schema-relative-uri-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-relative-uri-defs2.json"
                }
            """,
            true,
            """    schemaTestId: "ref::refs with relative uris and defs::valid on both fields"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative refs with absolute uris and defs -> invalid on inner field"
     *
     * Test ID: "ref::relative refs with absolute uris and defs::invalid on inner field"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::relative refs with absolute uris and defs::invalid on inner field" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": 1
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-refs-absolute-uris-defs2.json"
                }
            """,
            false,
            """    schemaTestId: "ref::relative refs with absolute uris and defs::invalid on inner field"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative refs with absolute uris and defs -> invalid on outer field"
     *
     * Test ID: "ref::relative refs with absolute uris and defs::invalid on outer field"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::relative refs with absolute uris and defs::invalid on outer field" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-refs-absolute-uris-defs2.json"
                }
            """,
            false,
            """    schemaTestId: "ref::relative refs with absolute uris and defs::invalid on outer field"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative refs with absolute uris and defs -> valid on both fields"
     *
     * Test ID: "ref::relative refs with absolute uris and defs::valid on both fields"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-refs-absolute-uris-defs2.json"
                }
            """,
            true,
            """    schemaTestId: "ref::relative refs with absolute uris and defs::valid on both fields"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id must be resolved against nearest parent, not just immediate parent -> number is valid"
     *
     * Test ID: "ref::$id must be resolved against nearest parent, not just immediate parent::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/a.json",
                    "${'$'}defs": {
                        "x": {
                            "${'$'}id": "http://example.com/b/c.json",
                            "not": {
                                "${'$'}defs": {
                                    "y": {
                                        "${'$'}id": "d.json",
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "http://example.com/b/d.json"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "ref::${'$'}id must be resolved against nearest parent, not just immediate parent::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id must be resolved against nearest parent, not just immediate parent -> non-number is invalid"
     *
     * Test ID: "ref::$id must be resolved against nearest parent, not just immediate parent::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/a.json",
                    "${'$'}defs": {
                        "x": {
                            "${'$'}id": "http://example.com/b/c.json",
                            "not": {
                                "${'$'}defs": {
                                    "y": {
                                        "${'$'}id": "d.json",
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "http://example.com/b/d.json"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "ref::${'$'}id must be resolved against nearest parent, not just immediate parent::non-number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $ref -> data is valid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $ref::data is valid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id1/base.json",
                    "${'$'}ref": "int.json",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1/int.json",
                            "${'$'}id": "int.json",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1-int.json",
                            "${'$'}id": "/draft2020-12/ref-and-id1-int.json",
                            "maximum": 2
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::order of evaluation: ${'$'}id and ${'$'}ref::data is valid against first definition"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $ref -> data is invalid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $ref::data is invalid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                50
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id1/base.json",
                    "${'$'}ref": "int.json",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1/int.json",
                            "${'$'}id": "int.json",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1-int.json",
                            "${'$'}id": "/draft2020-12/ref-and-id1-int.json",
                            "maximum": 2
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::order of evaluation: ${'$'}id and ${'$'}ref::data is invalid against first definition"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $anchor and $ref -> data is valid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $anchor and $ref::data is valid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::order of evaluation: $id and $anchor and $ref::data is valid against first definition" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/base.json",
                    "${'$'}ref": "#bigint",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: /ref-and-id2/base.json#/${'$'}defs/bigint; another valid uri for this location: /ref-and-id2/base.json#bigint",
                            "${'$'}anchor": "bigint",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id2#/${'$'}defs/smallint; another valid uri for this location: https://example.com/ref-and-id2/#bigint",
                            "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/",
                            "${'$'}anchor": "bigint",
                            "maximum": 2
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::order of evaluation: ${'$'}id and ${'$'}anchor and ${'$'}ref::data is valid against first definition"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $anchor and $ref -> data is invalid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $anchor and $ref::data is invalid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::order of evaluation: $id and $anchor and $ref::data is invalid against first definition" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                50
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/base.json",
                    "${'$'}ref": "#bigint",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: /ref-and-id2/base.json#/${'$'}defs/bigint; another valid uri for this location: /ref-and-id2/base.json#bigint",
                            "${'$'}anchor": "bigint",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id2#/${'$'}defs/smallint; another valid uri for this location: https://example.com/ref-and-id2/#bigint",
                            "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/",
                            "${'$'}anchor": "bigint",
                            "maximum": 2
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::order of evaluation: ${'$'}id and ${'$'}anchor and ${'$'}ref::data is invalid against first definition"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with $ref via the URN -> valid under the URN IDed schema"
     *
     * Test ID: "ref::simple URN base URI with $ref via the URN::valid under the URN IDed schema"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 37
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
                    "minimum": 30,
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::simple URN base URI with ${'$'}ref via the URN::valid under the URN IDed schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with $ref via the URN -> invalid under the URN IDed schema"
     *
     * Test ID: "ref::simple URN base URI with $ref via the URN::invalid under the URN IDed schema"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
                    "minimum": 30,
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::simple URN base URI with ${'$'}ref via the URN::invalid under the URN IDed schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with JSON pointer -> a string is valid"
     *
     * Test ID: "ref::simple URN base URI with JSON pointer::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::simple URN base URI with JSON pointer::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with JSON pointer -> a non-string is invalid"
     *
     * Test ID: "ref::simple URN base URI with JSON pointer::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::simple URN base URI with JSON pointer::a non-string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with NSS -> a string is valid"
     *
     * Test ID: "ref::URN base URI with NSS::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:1/406/47452/2",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::URN base URI with NSS::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with NSS -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with NSS::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:1/406/47452/2",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::URN base URI with NSS::a non-string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with r-component -> a string is valid"
     *
     * Test ID: "ref::URN base URI with r-component::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.1",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::URN base URI with r-component::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with r-component -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with r-component::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.1",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::URN base URI with r-component::a non-string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with q-component -> a string is valid"
     *
     * Test ID: "ref::URN base URI with q-component::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::URN base URI with q-component::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with q-component -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with q-component::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::URN base URI with q-component::a non-string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and JSON pointer ref -> a string is valid"
     *
     * Test ID: "ref::URN base URI with URN and JSON pointer ref::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::URN base URI with URN and JSON pointer ref::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and JSON pointer ref -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with URN and JSON pointer ref::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::URN base URI with URN and JSON pointer ref::a non-string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and anchor ref -> a string is valid"
     *
     * Test ID: "ref::URN base URI with URN and anchor ref::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::URN base URI with URN and anchor ref::a string is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}anchor": "something",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::URN base URI with URN and anchor ref::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and anchor ref -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with URN and anchor ref::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::URN base URI with URN and anchor ref::a non-string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}anchor": "something",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::URN base URI with URN and anchor ref::a non-string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN ref with nested pointer ref -> a string is valid"
     *
     * Test ID: "ref::URN ref with nested pointer ref::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                "bar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                            "${'$'}defs": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::URN ref with nested pointer ref::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN ref with nested pointer ref -> a non-string is invalid"
     *
     * Test ID: "ref::URN ref with nested pointer ref::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "ref::URN ref with nested pointer ref::a non-string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                            "${'$'}defs": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::URN ref with nested pointer ref::a non-string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to if -> a non-integer is invalid due to the $ref"
     *
     * Test ID: "ref::ref to if::a non-integer is invalid due to the $ref"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/if",
                    "if": {
                        "${'$'}id": "http://example.com/ref/if",
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::ref to if::a non-integer is invalid due to the ${'$'}ref"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to if -> an integer is valid"
     *
     * Test ID: "ref::ref to if::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/if",
                    "if": {
                        "${'$'}id": "http://example.com/ref/if",
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::ref to if::an integer is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to then -> a non-integer is invalid due to the $ref"
     *
     * Test ID: "ref::ref to then::a non-integer is invalid due to the $ref"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/then",
                    "then": {
                        "${'$'}id": "http://example.com/ref/then",
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::ref to then::a non-integer is invalid due to the ${'$'}ref"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to then -> an integer is valid"
     *
     * Test ID: "ref::ref to then::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_67() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/then",
                    "then": {
                        "${'$'}id": "http://example.com/ref/then",
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::ref to then::an integer is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to else -> a non-integer is invalid due to the $ref"
     *
     * Test ID: "ref::ref to else::a non-integer is invalid due to the $ref"
     */
    @Test
    fun jsonSchemaSuiteTest_68() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/else",
                    "else": {
                        "${'$'}id": "http://example.com/ref/else",
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "ref::ref to else::a non-integer is invalid due to the ${'$'}ref"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to else -> an integer is valid"
     *
     * Test ID: "ref::ref to else::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_69() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/else",
                    "else": {
                        "${'$'}id": "http://example.com/ref/else",
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "ref::ref to else::an integer is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref with absolute-path-reference -> a string is valid"
     *
     * Test ID: "ref::ref with absolute-path-reference::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_70() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/ref/absref.json",
                    "${'$'}defs": {
                        "a": {
                            "${'$'}id": "http://example.com/ref/absref/foobar.json",
                            "type": "number"
                        },
                        "b": {
                            "${'$'}id": "http://example.com/absref/foobar.json",
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "/absref/foobar.json"
                }
            """,
            true,
            """    schemaTestId: "ref::ref with absolute-path-reference::a string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref with absolute-path-reference -> an integer is invalid"
     *
     * Test ID: "ref::ref with absolute-path-reference::an integer is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_71() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/ref/absref.json",
                    "${'$'}defs": {
                        "a": {
                            "${'$'}id": "http://example.com/ref/absref/foobar.json",
                            "type": "number"
                        },
                        "b": {
                            "${'$'}id": "http://example.com/absref/foobar.json",
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "/absref/foobar.json"
                }
            """,
            false,
            """    schemaTestId: "ref::ref with absolute-path-reference::an integer is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - *nix -> number is valid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - *nix::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_72() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            true,
            """    schemaTestId: "ref::${'$'}id with file URI still resolves pointers - *nix::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - *nix -> non-number is invalid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - *nix::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_73() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            false,
            """    schemaTestId: "ref::${'$'}id with file URI still resolves pointers - *nix::non-number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - windows -> number is valid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - windows::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_74() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///c:/folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            true,
            """    schemaTestId: "ref::${'$'}id with file URI still resolves pointers - windows::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - windows -> non-number is invalid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - windows::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_75() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///c:/folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            false,
            """    schemaTestId: "ref::${'$'}id with file URI still resolves pointers - windows::non-number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "empty tokens in $ref json-pointer -> number is valid"
     *
     * Test ID: "ref::empty tokens in $ref json-pointer::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_76() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "": {
                            "${'$'}defs": {
                                "": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs//${'$'}defs/"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "ref::empty tokens in ${'$'}ref json-pointer::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "empty tokens in $ref json-pointer -> non-number is invalid"
     *
     * Test ID: "ref::empty tokens in $ref json-pointer::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_77() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "": {
                            "${'$'}defs": {
                                "": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs//${'$'}defs/"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "ref::empty tokens in ${'$'}ref json-pointer::non-number is invalid"    """)
    }
}
