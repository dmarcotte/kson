package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_uniqueItems : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of integers is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of integers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::unique array of integers is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of integers is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of integers is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique array of integers is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of more than two integers is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of more than two integers is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique array of more than two integers is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> numbers are unique if mathematically unequal"
     *
     * Test ID: "uniqueItems::uniqueItems validation::numbers are unique if mathematically unequal"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0,
                    1.0,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::numbers are unique if mathematically unequal"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> false is not equal to zero"
     *
     * Test ID: "uniqueItems::uniqueItems validation::false is not equal to zero"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::false is not equal to zero"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> true is not equal to one"
     *
     * Test ID: "uniqueItems::uniqueItems validation::true is not equal to one"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::true is not equal to one"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of strings is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::unique array of strings is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of strings is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique array of strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "baz"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::unique array of objects is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of objects is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of objects is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique array of objects is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> property order of array of objects is ignored"
     *
     * Test ID: "uniqueItems::uniqueItems validation::property order of array of objects is ignored"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar",
                        "bar": "foo"
                    },
                    {
                        "bar": "foo",
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::property order of array of objects is ignored"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of nested objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of nested objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": false
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::unique array of nested objects is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of nested objects is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of nested objects is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique array of nested objects is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of arrays is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of arrays is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "bar"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::unique array of arrays is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of arrays is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of arrays is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique array of arrays is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of more than two arrays is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of more than two arrays is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "bar"
                    ],
                    [
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique array of more than two arrays is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> 1 and true are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::1 and true are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::1 and true are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> 0 and false are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::0 and false are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::0 and false are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> [1] and [true] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::[1] and [true] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        1
                    ],
                    [
                        true
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::[1] and [true] are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> [0] and [false] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::[0] and [false] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        0
                    ],
                    [
                        false
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::[0] and [false] are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> nested [1] and [true] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::nested [1] and [true] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            1
                        ],
                        "foo"
                    ],
                    [
                        [
                            true
                        ],
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::nested [1] and [true] are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> nested [0] and [false] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::nested [0] and [false] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            0
                        ],
                        "foo"
                    ],
                    [
                        [
                            false
                        ],
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::nested [0] and [false] are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique heterogeneous types are valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique heterogeneous types are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    1,
                    "{}"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::unique heterogeneous types are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique heterogeneous types are invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique heterogeneous types are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    {
                    },
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::non-unique heterogeneous types are invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> different objects are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::different objects are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": 1,
                        "b": 2
                    },
                    {
                        "a": 2,
                        "b": 1
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::different objects are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> objects are non-unique despite key order"
     *
     * Test ID: "uniqueItems::uniqueItems validation::objects are non-unique despite key order"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": 1,
                        "b": 2
                    },
                    {
                        "b": 2,
                        "a": 1
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems validation::objects are non-unique despite key order"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> {"a": false} and {"a": 0} are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::{"a": false} and {"a": 0} are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": false
                    },
                    {
                        "a": 0
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::{"a": false} and {"a": 0} are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> {"a": true} and {"a": 1} are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::{"a": true} and {"a": 1} are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": true
                    },
                    {
                        "a": 1
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems validation::{"a": true} and {"a": 1} are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::[false, true] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::[true, false] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [false, false] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[false, false] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::[false, false] from items array is not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [true, true] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[true, true] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::[true, true] from items array is not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> unique array extended from [false, true] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::unique array extended from [false, true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::unique array extended from [false, true] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> unique array extended from [true, false] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::unique array extended from [true, false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::unique array extended from [true, false] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> non-unique array extended from [false, true] is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::non-unique array extended from [false, true] is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::non-unique array extended from [false, true] is not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> non-unique array extended from [true, false] is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::non-unique array extended from [true, false] is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items::non-unique array extended from [true, false] is not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "uniqueItems::uniqueItems with an array of items and additionalItems=false::[false, true] from items array is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[false, true] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "uniqueItems::uniqueItems with an array of items and additionalItems=false::[true, false] from items array is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[true, false] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [false, false] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[false, false] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[false, false] from items array is not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [true, true] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[true, true] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[true, true] from items array is not valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> extra items are invalid even if unique"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::extra items are invalid even if unique"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems with an array of items and additionalItems=false::extra items are invalid even if unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of integers is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of integers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::unique array of integers is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of integers is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of integers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::non-unique array of integers is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> numbers are unique if mathematically unequal"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::numbers are unique if mathematically unequal"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0,
                    1.0,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::numbers are unique if mathematically unequal"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> false is not equal to zero"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::false is not equal to zero"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::false is not equal to zero"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> true is not equal to one"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::true is not equal to one"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::true is not equal to one"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "baz"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::unique array of objects is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::non-unique array of objects is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of nested objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of nested objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": false
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::unique array of nested objects is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of nested objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of nested objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::non-unique array of nested objects is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of arrays is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of arrays is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "bar"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::unique array of arrays is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of arrays is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of arrays is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::non-unique array of arrays is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> 1 and true are unique"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::1 and true are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::1 and true are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> 0 and false are unique"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::0 and false are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::0 and false are unique"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique heterogeneous types are valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique heterogeneous types are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::unique heterogeneous types are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique heterogeneous types are valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique heterogeneous types are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    {
                    },
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false validation::non-unique heterogeneous types are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::[false, true] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::[true, false] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [false, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[false, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::[false, false] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [true, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[true, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::[true, true] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> unique array extended from [false, true] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::unique array extended from [false, true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::unique array extended from [false, true] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> unique array extended from [true, false] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::unique array extended from [true, false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::unique array extended from [true, false] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> non-unique array extended from [false, true] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::non-unique array extended from [false, true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::non-unique array extended from [false, true] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> non-unique array extended from [true, false] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::non-unique array extended from [true, false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items::non-unique array extended from [true, false] is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, true] from items array is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, true] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, false] from items array is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, false] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [false, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_67() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, false] from items array is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, false] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [true, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_68() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, true] from items array is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, true] from items array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> extra items are invalid even if unique"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::extra items are invalid even if unique"
     */
    @Test
    fun jsonSchemaSuiteTest_69() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::extra items are invalid even if unique"    """)
    }
}
