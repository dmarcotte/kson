package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_unevaluatedItems : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems true -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems true::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": true
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems true::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems true -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems true::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": true
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems true::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems false -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems false::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems false::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems false -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems false::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems false::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems as schema -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems as schema::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems as schema::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems as schema -> with valid unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems as schema::with valid unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems as schema::with valid unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems as schema -> with invalid unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems as schema::with invalid unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems as schema::with invalid unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with uniform items -> unevaluatedItems doesn't apply"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with uniform items::unevaluatedItems doesn't apply"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with uniform items::unevaluatedItems doesn't apply"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with tuple -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with tuple::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with tuple::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with tuple -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with tuple::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with tuple::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with items and prefixItems -> unevaluatedItems doesn't apply"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with items and prefixItems::unevaluatedItems doesn't apply"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "items": true,
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with items and prefixItems::unevaluatedItems doesn't apply"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with items -> valid under items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with items::valid under items"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                [
                    5,
                    6,
                    7,
                    8
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "number"
                    },
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with items::valid under items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with items -> invalid under items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with items::invalid under items"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "number"
                    },
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with items::invalid under items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested tuple -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested tuple::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "allOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested tuple::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested tuple -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested tuple::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "allOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested tuple::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested items -> with only (valid) additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested items::with only (valid) additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "boolean"
                    },
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        true
                    ]
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested items::with only (valid) additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested items -> with no additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested items::with no additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "yes",
                    "no"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "boolean"
                    },
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        true
                    ]
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested items::with no additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested items -> with invalid additional item"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested items::with invalid additional item"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "yes",
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "boolean"
                    },
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        true
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested items::with invalid additional item"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested prefixItems and items -> with no additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested prefixItems and items::with no additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "items": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested prefixItems and items::with no additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested prefixItems and items -> with additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested prefixItems and items::with additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "items": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested prefixItems and items::with additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested unevaluatedItems -> with no additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested unevaluatedItems::with no additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "unevaluatedItems": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested unevaluatedItems::with no additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested unevaluatedItems -> with additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested unevaluatedItems::with additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "unevaluatedItems": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with nested unevaluatedItems::with additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when one schema matches and has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when one schema matches and has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with anyOf::when one schema matches and has no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when one schema matches and has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when one schema matches and has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with anyOf::when one schema matches and has unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when two schemas match and has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when two schemas match and has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with anyOf::when two schemas match and has no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when two schemas match and has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when two schemas match and has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with anyOf::when two schemas match and has unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with oneOf -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with oneOf::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "oneOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with oneOf::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with oneOf -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with oneOf::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "oneOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with oneOf::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with not -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with not::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "not": {
                        "not": {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with not::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if matches and it has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if matches and it has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "then"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with if/then/else::when if matches and it has no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if matches and it has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if matches and it has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "then",
                    "else"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with if/then/else::when if matches and it has unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if doesn't match and it has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if doesn't match and it has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    42,
                    "else"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with if/then/else::when if doesn't match and it has no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if doesn't match and it has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if doesn't match and it has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    42,
                    "else",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with if/then/else::when if doesn't match and it has unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with boolean schemas -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with boolean schemas::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        true
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with boolean schemas::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with boolean schemas -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with boolean schemas::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        true
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with boolean schemas::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $ref -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $ref::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false,
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with ${'$'}ref::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $ref -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $ref::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false,
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with ${'$'}ref::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems before $ref -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems before $ref::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false,
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems before ${'$'}ref::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems before $ref -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems before $ref::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false,
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems before ${'$'}ref::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $dynamicRef -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $dynamicRef::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-items-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedItems comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedItems": false,
                            "type": "array",
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with ${'$'}dynamicRef::with no unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $dynamicRef -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $dynamicRef::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-items-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedItems comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedItems": false,
                            "type": "array",
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with ${'$'}dynamicRef::with unevaluated items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems can't see inside cousins -> always fails"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems can't see inside cousins::always fails"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                true
                            ]
                        },
                        {
                            "unevaluatedItems": false
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems can't see inside cousins::always fails"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "item is evaluated in an uncle schema to unevaluatedItems -> no extra items"
     *
     * Test ID: "unevaluatedItems::item is evaluated in an uncle schema to unevaluatedItems::no extra items"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        "test"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "unevaluatedItems": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "prefixItems": [
                                        true,
                                        {
                                            "type": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::item is evaluated in an uncle schema to unevaluatedItems::no extra items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "item is evaluated in an uncle schema to unevaluatedItems -> uncle keyword evaluation is not significant"
     *
     * Test ID: "unevaluatedItems::item is evaluated in an uncle schema to unevaluatedItems::uncle keyword evaluation is not significant"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        "test",
                        "test"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "unevaluatedItems": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "prefixItems": [
                                        true,
                                        {
                                            "type": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::item is evaluated in an uncle schema to unevaluatedItems::uncle keyword evaluation is not significant"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on adjacent contains -> second item is evaluated by contains"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on adjacent contains::second item is evaluated by contains"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems depends on adjacent contains::second item is evaluated by contains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on adjacent contains -> contains fails, second item is not evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on adjacent contains::contains fails, second item is not evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems depends on adjacent contains::contains fails, second item is not evaluated"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on adjacent contains -> contains passes, second item is not evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on adjacent contains::contains passes, second item is not evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems depends on adjacent contains::contains passes, second item is not evaluated"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on multiple nested contains -> 5 not evaluated, passes unevaluatedItems"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on multiple nested contains::5 not evaluated, passes unevaluatedItems"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    3,
                    4,
                    5,
                    6
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "contains": {
                                "multipleOf": 2
                            }
                        },
                        {
                            "contains": {
                                "multipleOf": 3
                            }
                        }
                    ],
                    "unevaluatedItems": {
                        "multipleOf": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems depends on multiple nested contains::5 not evaluated, passes unevaluatedItems"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on multiple nested contains -> 7 not evaluated, fails unevaluatedItems"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on multiple nested contains::7 not evaluated, fails unevaluatedItems"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    3,
                    4,
                    7,
                    8
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "contains": {
                                "multipleOf": 2
                            }
                        },
                        {
                            "contains": {
                                "multipleOf": 3
                            }
                        }
                    ],
                    "unevaluatedItems": {
                        "multipleOf": 5
                    }
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems depends on multiple nested contains::7 not evaluated, fails unevaluatedItems"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> empty array is valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only a's are valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only a's are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "a",
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only a's are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> a's and b's are valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::a's and b's are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "a",
                    "b",
                    "a",
                    "b",
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::a's and b's are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> a's, b's and c's are valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::a's, b's and c's are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "a",
                    "c",
                    "c",
                    "b",
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::a's, b's and c's are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only b's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only b's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "b",
                    "b"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only b's are invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only c's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only c's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "c"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only c's are invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only b's and c's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only b's and c's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "b",
                    "c",
                    "b",
                    "c"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only b's and c's are invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only a's and c's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only a's and c's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "a",
                    "c",
                    "a",
                    "c"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only a's and c's are invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores booleans"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::non-array instances are valid::ignores booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores integers"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores integers"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::non-array instances are valid::ignores integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores floats"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores floats"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::non-array instances are valid::ignores floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores objects"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores objects"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::non-array instances are valid::ignores objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores strings"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::non-array instances are valid::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores null"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores null"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::non-array instances are valid::ignores null"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with null instance elements -> allows null elements"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "null"
                    }
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems with null instance elements::allows null elements"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems can see annotations from if without then and else -> valid in case if is evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems can see annotations from if without then and else::valid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "prefixItems": [
                            {
                                "const": "a"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems can see annotations from if without then and else::valid in case if is evaluated"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems can see annotations from if without then and else -> invalid in case if is evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems can see annotations from if without then and else::invalid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "b"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "prefixItems": [
                            {
                                "const": "a"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """    schemaTestId: "unevaluatedItems::unevaluatedItems can see annotations from if without then and else::invalid in case if is evaluated"    """)
    }
}
