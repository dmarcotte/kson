package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_maxLength : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> shorter is valid"
     *
     * Test ID: "maxLength::maxLength validation::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """    schemaTestId: "maxLength::maxLength validation::shorter is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> exact length is valid"
     *
     * Test ID: "maxLength::maxLength validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                "fo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """    schemaTestId: "maxLength::maxLength validation::exact length is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> too long is invalid"
     *
     * Test ID: "maxLength::maxLength validation::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            false,
            """    schemaTestId: "maxLength::maxLength validation::too long is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> ignores non-strings"
     *
     * Test ID: "maxLength::maxLength validation::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """    schemaTestId: "maxLength::maxLength validation::ignores non-strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> two graphemes is long enough"
     *
     * Test ID: "maxLength::maxLength validation::two graphemes is long enough"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                "ðŸ’©ðŸ’©"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """    schemaTestId: "maxLength::maxLength validation::two graphemes is long enough"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation with a decimal -> shorter is valid"
     *
     * Test ID: "maxLength::maxLength validation with a decimal::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2.0
                }
            """,
            true,
            """    schemaTestId: "maxLength::maxLength validation with a decimal::shorter is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation with a decimal -> too long is invalid"
     *
     * Test ID: "maxLength::maxLength validation with a decimal::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2.0
                }
            """,
            false,
            """    schemaTestId: "maxLength::maxLength validation with a decimal::too long is invalid"    """)
    }
}
