package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_not : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not -> allowed"
     *
     * Test ID: "not::not::allowed"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "not": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "not::not::allowed"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not -> disallowed"
     *
     * Test ID: "not::not::disallowed"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "not": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "not::not::disallowed"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not multiple types -> valid"
     *
     * Test ID: "not::not multiple types::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "not": {
                        "type": [
                            "integer",
                            "boolean"
                        ]
                    }
                }
            """,
            true,
            """    schemaTestId: "not::not multiple types::valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not multiple types -> mismatch"
     *
     * Test ID: "not::not multiple types::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "not": {
                        "type": [
                            "integer",
                            "boolean"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "not::not multiple types::mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not multiple types -> other mismatch"
     *
     * Test ID: "not::not multiple types::other mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "not": {
                        "type": [
                            "integer",
                            "boolean"
                        ]
                    }
                }
            """,
            false,
            """    schemaTestId: "not::not multiple types::other mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not more complex schema -> match"
     *
     * Test ID: "not::not more complex schema::match"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "not": {
                        "type": "object",
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "not::not more complex schema::match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not more complex schema -> other match"
     *
     * Test ID: "not::not more complex schema::other match"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "not": {
                        "type": "object",
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "not::not more complex schema::other match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not more complex schema -> mismatch"
     *
     * Test ID: "not::not more complex schema::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "not": {
                        "type": "object",
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "not::not more complex schema::mismatch"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbidden property -> property present"
     *
     * Test ID: "not::forbidden property::property present"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "not": {
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbidden property::property present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbidden property -> property absent"
     *
     * Test ID: "not::forbidden property::property absent"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1,
                    "baz": 2
                }
            """,
            """
                {
                    "properties": {
                        "foo": {
                            "not": {
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "not::forbidden property::property absent"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> number is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> string is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> boolean true is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::boolean true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::boolean true is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> boolean false is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::boolean false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::boolean false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> null is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::null is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> object is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> empty object is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::empty object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> array is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> empty array is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "not": {
                    }
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with empty schema::empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> number is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> string is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::string is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> boolean true is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::boolean true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::boolean true is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> boolean false is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::boolean false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::boolean false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> null is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::null is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> object is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> empty object is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::empty object is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> array is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> empty array is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "not": true
                }
            """,
            false,
            """    schemaTestId: "not::forbid everything with boolean schema true::empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> number is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> string is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> boolean true is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::boolean true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::boolean true is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> boolean false is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::boolean false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::boolean false is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> null is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> object is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> empty object is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::empty object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> array is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> empty array is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "not": false
                }
            """,
            true,
            """    schemaTestId: "not::allow everything with boolean schema false::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "double negation -> any value is valid"
     *
     * Test ID: "not::double negation::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "not": {
                        "not": {
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "not::double negation::any value is valid"    """)
    }
}
