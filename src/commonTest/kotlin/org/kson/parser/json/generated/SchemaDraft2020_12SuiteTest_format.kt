package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_format : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore integers"
     *
     * Test ID: "format::email format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore floats"
     *
     * Test ID: "format::email format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore objects"
     *
     * Test ID: "format::email format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore arrays"
     *
     * Test ID: "format::email format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore booleans"
     *
     * Test ID: "format::email format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore nulls"
     *
     * Test ID: "format::email format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> invalid email string is only an annotation by default"
     *
     * Test ID: "format::email format::invalid email string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                "2962"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """    schemaTestId: "format::email format::invalid email string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore integers"
     *
     * Test ID: "format::idn-email format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore floats"
     *
     * Test ID: "format::idn-email format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore objects"
     *
     * Test ID: "format::idn-email format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore arrays"
     *
     * Test ID: "format::idn-email format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore booleans"
     *
     * Test ID: "format::idn-email format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore nulls"
     *
     * Test ID: "format::idn-email format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> invalid idn-email string is only an annotation by default"
     *
     * Test ID: "format::idn-email format::invalid idn-email string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                "2962"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """    schemaTestId: "format::idn-email format::invalid idn-email string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore integers"
     *
     * Test ID: "format::regex format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore floats"
     *
     * Test ID: "format::regex format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore objects"
     *
     * Test ID: "format::regex format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore arrays"
     *
     * Test ID: "format::regex format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore booleans"
     *
     * Test ID: "format::regex format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore nulls"
     *
     * Test ID: "format::regex format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> invalid regex string is only an annotation by default"
     *
     * Test ID: "format::regex format::invalid regex string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                "^(abc]"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """    schemaTestId: "format::regex format::invalid regex string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore integers"
     *
     * Test ID: "format::ipv4 format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore floats"
     *
     * Test ID: "format::ipv4 format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore objects"
     *
     * Test ID: "format::ipv4 format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore arrays"
     *
     * Test ID: "format::ipv4 format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore booleans"
     *
     * Test ID: "format::ipv4 format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore nulls"
     *
     * Test ID: "format::ipv4 format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> invalid ipv4 string is only an annotation by default"
     *
     * Test ID: "format::ipv4 format::invalid ipv4 string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                "127.0.0.0.1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """    schemaTestId: "format::ipv4 format::invalid ipv4 string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore integers"
     *
     * Test ID: "format::ipv6 format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore floats"
     *
     * Test ID: "format::ipv6 format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore objects"
     *
     * Test ID: "format::ipv6 format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore arrays"
     *
     * Test ID: "format::ipv6 format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore booleans"
     *
     * Test ID: "format::ipv6 format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore nulls"
     *
     * Test ID: "format::ipv6 format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> invalid ipv6 string is only an annotation by default"
     *
     * Test ID: "format::ipv6 format::invalid ipv6 string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                "12345::"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """    schemaTestId: "format::ipv6 format::invalid ipv6 string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore integers"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore floats"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore objects"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore arrays"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore booleans"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore nulls"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> invalid idn-hostname string is only an annotation by default"
     *
     * Test ID: "format::idn-hostname format::invalid idn-hostname string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                "〮실례.테스트"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """    schemaTestId: "format::idn-hostname format::invalid idn-hostname string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore integers"
     *
     * Test ID: "format::hostname format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore floats"
     *
     * Test ID: "format::hostname format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore objects"
     *
     * Test ID: "format::hostname format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore arrays"
     *
     * Test ID: "format::hostname format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore booleans"
     *
     * Test ID: "format::hostname format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore nulls"
     *
     * Test ID: "format::hostname format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> invalid hostname string is only an annotation by default"
     *
     * Test ID: "format::hostname format::invalid hostname string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                "-a-host-name-that-starts-with--"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """    schemaTestId: "format::hostname format::invalid hostname string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore integers"
     *
     * Test ID: "format::date format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore floats"
     *
     * Test ID: "format::date format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore objects"
     *
     * Test ID: "format::date format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore arrays"
     *
     * Test ID: "format::date format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore booleans"
     *
     * Test ID: "format::date format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore nulls"
     *
     * Test ID: "format::date format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> invalid date string is only an annotation by default"
     *
     * Test ID: "format::date format::invalid date string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                "06/19/1963"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """    schemaTestId: "format::date format::invalid date string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore integers"
     *
     * Test ID: "format::date-time format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore floats"
     *
     * Test ID: "format::date-time format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore objects"
     *
     * Test ID: "format::date-time format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore arrays"
     *
     * Test ID: "format::date-time format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore booleans"
     *
     * Test ID: "format::date-time format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore nulls"
     *
     * Test ID: "format::date-time format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> invalid date-time string is only an annotation by default"
     *
     * Test ID: "format::date-time format::invalid date-time string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
        
        assertKsonEnforcesSchema(
            """
                "1990-02-31T15:59:60.123-08:00"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """    schemaTestId: "format::date-time format::invalid date-time string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore integers"
     *
     * Test ID: "format::time format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore floats"
     *
     * Test ID: "format::time format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore objects"
     *
     * Test ID: "format::time format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore arrays"
     *
     * Test ID: "format::time format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_67() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore booleans"
     *
     * Test ID: "format::time format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_68() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore nulls"
     *
     * Test ID: "format::time format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_69() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> invalid time string is only an annotation by default"
     *
     * Test ID: "format::time format::invalid time string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_70() {
        
        assertKsonEnforcesSchema(
            """
                "08:30:06 PST"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """    schemaTestId: "format::time format::invalid time string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore integers"
     *
     * Test ID: "format::json-pointer format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_71() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore floats"
     *
     * Test ID: "format::json-pointer format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_72() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore objects"
     *
     * Test ID: "format::json-pointer format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_73() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore arrays"
     *
     * Test ID: "format::json-pointer format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_74() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore booleans"
     *
     * Test ID: "format::json-pointer format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_75() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore nulls"
     *
     * Test ID: "format::json-pointer format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_76() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> invalid json-pointer string is only an annotation by default"
     *
     * Test ID: "format::json-pointer format::invalid json-pointer string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_77() {
        
        assertKsonEnforcesSchema(
            """
                "/foo/bar~"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::json-pointer format::invalid json-pointer string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore integers"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_78() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore floats"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_79() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore objects"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_80() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore arrays"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_81() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore booleans"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_82() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore nulls"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_83() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> invalid relative-json-pointer string is only an annotation by default"
     *
     * Test ID: "format::relative-json-pointer format::invalid relative-json-pointer string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_84() {
        
        assertKsonEnforcesSchema(
            """
                "/foo/bar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """    schemaTestId: "format::relative-json-pointer format::invalid relative-json-pointer string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore integers"
     *
     * Test ID: "format::iri format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_85() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore floats"
     *
     * Test ID: "format::iri format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_86() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore objects"
     *
     * Test ID: "format::iri format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_87() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore arrays"
     *
     * Test ID: "format::iri format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_88() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore booleans"
     *
     * Test ID: "format::iri format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_89() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore nulls"
     *
     * Test ID: "format::iri format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_90() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> invalid iri string is only an annotation by default"
     *
     * Test ID: "format::iri format::invalid iri string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_91() {
        
        assertKsonEnforcesSchema(
            """
                "http://2001:0db8:85a3:0000:0000:8a2e:0370:7334"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """    schemaTestId: "format::iri format::invalid iri string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore integers"
     *
     * Test ID: "format::iri-reference format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_92() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore floats"
     *
     * Test ID: "format::iri-reference format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_93() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore objects"
     *
     * Test ID: "format::iri-reference format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_94() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore arrays"
     *
     * Test ID: "format::iri-reference format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_95() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore booleans"
     *
     * Test ID: "format::iri-reference format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_96() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore nulls"
     *
     * Test ID: "format::iri-reference format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_97() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> invalid iri-reference string is only an annotation by default"
     *
     * Test ID: "format::iri-reference format::invalid iri-reference string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_98() {
        
        assertKsonEnforcesSchema(
            """
                "\\\\WINDOWS\\filëßåré"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::iri-reference format::invalid iri-reference string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore integers"
     *
     * Test ID: "format::uri format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_99() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore floats"
     *
     * Test ID: "format::uri format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_100() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore objects"
     *
     * Test ID: "format::uri format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_101() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_102() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_103() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_104() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> invalid uri string is only an annotation by default"
     *
     * Test ID: "format::uri format::invalid uri string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_105() {
        
        assertKsonEnforcesSchema(
            """
                "//foo.bar/?baz=qux#quux"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """    schemaTestId: "format::uri format::invalid uri string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore integers"
     *
     * Test ID: "format::uri-reference format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_106() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore floats"
     *
     * Test ID: "format::uri-reference format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_107() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore objects"
     *
     * Test ID: "format::uri-reference format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_108() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri-reference format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_109() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri-reference format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_110() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri-reference format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_111() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> invalid uri-reference string is only an annotation by default"
     *
     * Test ID: "format::uri-reference format::invalid uri-reference string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_112() {
        
        assertKsonEnforcesSchema(
            """
                "\\\\WINDOWS\\fileshare"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """    schemaTestId: "format::uri-reference format::invalid uri-reference string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore integers"
     *
     * Test ID: "format::uri-template format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_113() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore floats"
     *
     * Test ID: "format::uri-template format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_114() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore objects"
     *
     * Test ID: "format::uri-template format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_115() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri-template format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_116() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri-template format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_117() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri-template format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_118() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> invalid uri-template string is only an annotation by default"
     *
     * Test ID: "format::uri-template format::invalid uri-template string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_119() {
        
        assertKsonEnforcesSchema(
            """
                "http://example.com/dictionary/{term:1}/{term"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """    schemaTestId: "format::uri-template format::invalid uri-template string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore integers"
     *
     * Test ID: "format::uuid format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_120() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """    schemaTestId: "format::uuid format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore floats"
     *
     * Test ID: "format::uuid format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_121() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """    schemaTestId: "format::uuid format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore objects"
     *
     * Test ID: "format::uuid format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_122() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """    schemaTestId: "format::uuid format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore arrays"
     *
     * Test ID: "format::uuid format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_123() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """    schemaTestId: "format::uuid format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore booleans"
     *
     * Test ID: "format::uuid format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_124() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """    schemaTestId: "format::uuid format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore nulls"
     *
     * Test ID: "format::uuid format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_125() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """    schemaTestId: "format::uuid format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> invalid uuid string is only an annotation by default"
     *
     * Test ID: "format::uuid format::invalid uuid string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_126() {
        
        assertKsonEnforcesSchema(
            """
                "2eb8aa08-aa98-11ea-b4aa-73b441d1638"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """    schemaTestId: "format::uuid format::invalid uuid string is only an annotation by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore integers"
     *
     * Test ID: "format::duration format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_127() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """    schemaTestId: "format::duration format::all string formats ignore integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore floats"
     *
     * Test ID: "format::duration format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_128() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """    schemaTestId: "format::duration format::all string formats ignore floats"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore objects"
     *
     * Test ID: "format::duration format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_129() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """    schemaTestId: "format::duration format::all string formats ignore objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore arrays"
     *
     * Test ID: "format::duration format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_130() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """    schemaTestId: "format::duration format::all string formats ignore arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore booleans"
     *
     * Test ID: "format::duration format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_131() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """    schemaTestId: "format::duration format::all string formats ignore booleans"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore nulls"
     *
     * Test ID: "format::duration format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_132() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """    schemaTestId: "format::duration format::all string formats ignore nulls"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> invalid duration string is only an annotation by default"
     *
     * Test ID: "format::duration format::invalid duration string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_133() {
        
        assertKsonEnforcesSchema(
            """
                "PT1D"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """    schemaTestId: "format::duration format::invalid duration string is only an annotation by default"    """)
    }
}
