package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_anyOf : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> first anyOf valid"
     *
     * Test ID: "anyOf::anyOf::first anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf::first anyOf valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> second anyOf valid"
     *
     * Test ID: "anyOf::anyOf::second anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                2.5
            """,
            """
                {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf::second anyOf valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> both anyOf valid"
     *
     * Test ID: "anyOf::anyOf::both anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf::both anyOf valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> neither anyOf valid"
     *
     * Test ID: "anyOf::anyOf::neither anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                1.5
            """,
            """
                {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "anyOf::anyOf::neither anyOf valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with base schema -> mismatch base schema"
     *
     * Test ID: "anyOf::anyOf with base schema::mismatch base schema"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "type": "string",
                    "anyOf": [
                        {
                            "maxLength": 2
                        },
                        {
                            "minLength": 4
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "anyOf::anyOf with base schema::mismatch base schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with base schema -> one anyOf valid"
     *
     * Test ID: "anyOf::anyOf with base schema::one anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "type": "string",
                    "anyOf": [
                        {
                            "maxLength": 2
                        },
                        {
                            "minLength": 4
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf with base schema::one anyOf valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with base schema -> both anyOf invalid"
     *
     * Test ID: "anyOf::anyOf with base schema::both anyOf invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "type": "string",
                    "anyOf": [
                        {
                            "maxLength": 2
                        },
                        {
                            "minLength": 4
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "anyOf::anyOf with base schema::both anyOf invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with boolean schemas, all true -> any value is valid"
     *
     * Test ID: "anyOf::anyOf with boolean schemas, all true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "anyOf": [
                        true,
                        true
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf with boolean schemas, all true::any value is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with boolean schemas, some true -> any value is valid"
     *
     * Test ID: "anyOf::anyOf with boolean schemas, some true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "anyOf": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf with boolean schemas, some true::any value is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with boolean schemas, all false -> any value is invalid"
     *
     * Test ID: "anyOf::anyOf with boolean schemas, all false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "anyOf": [
                        false,
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "anyOf::anyOf with boolean schemas, all false::any value is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> first anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::first anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf complex types::first anyOf valid (complex)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> second anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::second anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz"
                }
            """,
            """
                {
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf complex types::second anyOf valid (complex)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> both anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::both anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz",
                    "bar": 2
                }
            """,
            """
                {
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf complex types::both anyOf valid (complex)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> neither anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::neither anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 2,
                    "bar": "quux"
                }
            """,
            """
                {
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "anyOf::anyOf complex types::neither anyOf valid (complex)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with one empty schema -> string is valid"
     *
     * Test ID: "anyOf::anyOf with one empty schema::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf with one empty schema::string is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with one empty schema -> number is valid"
     *
     * Test ID: "anyOf::anyOf with one empty schema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::anyOf with one empty schema::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "nested anyOf, to check validation semantics -> null is valid"
     *
     * Test ID: "anyOf::nested anyOf, to check validation semantics::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "anyOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "anyOf::nested anyOf, to check validation semantics::null is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "nested anyOf, to check validation semantics -> anything non-null is invalid"
     *
     * Test ID: "anyOf::nested anyOf, to check validation semantics::anything non-null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "anyOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "anyOf::nested anyOf, to check validation semantics::anything non-null is invalid"    """)
    }
}
