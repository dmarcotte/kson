package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> no additional properties is valid"
     *
     * Test ID: "additionalProperties::additionalProperties being false does not allow other properties::no additional properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "patternProperties": {
                        "^v": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """additionalProperties being false does not allow other properties -> no additional properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> an additional property is invalid"
     *
     * Test ID: "additionalProperties::additionalProperties being false does not allow other properties::an additional property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "quux": "boom"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "patternProperties": {
                        "^v": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """additionalProperties being false does not allow other properties -> an additional property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> ignores arrays"
     *
     * Test ID: "additionalProperties::additionalProperties being false does not allow other properties::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "patternProperties": {
                        "^v": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """additionalProperties being false does not allow other properties -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> ignores strings"
     *
     * Test ID: "additionalProperties::additionalProperties being false does not allow other properties::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                "foobarbaz"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "patternProperties": {
                        "^v": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """additionalProperties being false does not allow other properties -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> ignores other non-objects"
     *
     * Test ID: "additionalProperties::additionalProperties being false does not allow other properties::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "patternProperties": {
                        "^v": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """additionalProperties being false does not allow other properties -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> patternProperties are not additional properties"
     *
     * Test ID: "additionalProperties::additionalProperties being false does not allow other properties::patternProperties are not additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "vroom": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "patternProperties": {
                        "^v": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """additionalProperties being false does not allow other properties -> patternProperties are not additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "non-ASCII pattern with additionalProperties -> matching the pattern is valid"
     *
     * Test ID: "additionalProperties::non-ASCII pattern with additionalProperties::matching the pattern is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "ármányos": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "^á": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """non-ASCII pattern with additionalProperties -> matching the pattern is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "non-ASCII pattern with additionalProperties -> not matching the pattern is invalid"
     *
     * Test ID: "additionalProperties::non-ASCII pattern with additionalProperties::not matching the pattern is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "élmény": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "^á": {
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """non-ASCII pattern with additionalProperties -> not matching the pattern is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties with schema -> no additional properties is valid"
     *
     * Test ID: "additionalProperties::additionalProperties with schema::no additional properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            """,
            true,
            """additionalProperties with schema -> no additional properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties with schema -> an additional valid property is valid"
     *
     * Test ID: "additionalProperties::additionalProperties with schema::an additional valid property is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "quux": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            """,
            true,
            """additionalProperties with schema -> an additional valid property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties with schema -> an additional invalid property is invalid"
     *
     * Test ID: "additionalProperties::additionalProperties with schema::an additional invalid property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "quux": 12
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            """,
            false,
            """additionalProperties with schema -> an additional invalid property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties can exist by itself -> an additional valid property is valid"
     *
     * Test ID: "additionalProperties::additionalProperties can exist by itself::an additional valid property is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            """,
            true,
            """additionalProperties can exist by itself -> an additional valid property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties can exist by itself -> an additional invalid property is invalid"
     *
     * Test ID: "additionalProperties::additionalProperties can exist by itself::an additional invalid property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            """,
            false,
            """additionalProperties can exist by itself -> an additional invalid property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties are allowed by default -> additional properties are allowed"
     *
     * Test ID: "additionalProperties::additionalProperties are allowed by default::additional properties are allowed"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "quux": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    }
                }
            """,
            true,
            """additionalProperties are allowed by default -> additional properties are allowed""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties does not look in applicators -> properties defined in allOf are not examined"
     *
     * Test ID: "additionalProperties::additionalProperties does not look in applicators::properties defined in allOf are not examined"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                }
                            }
                        }
                    ],
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            """,
            false,
            """additionalProperties does not look in applicators -> properties defined in allOf are not examined""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties with null valued instance properties -> allows null values"
     *
     * Test ID: "additionalProperties::additionalProperties with null valued instance properties::allows null values"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "additionalProperties": {
                        "type": "null"
                    }
                }
            """,
            true,
            """additionalProperties with null valued instance properties -> allows null values""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties with propertyNames -> Valid against both keywords"
     *
     * Test ID: "additionalProperties::additionalProperties with propertyNames::Valid against both keywords"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "apple": 4
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 5
                    },
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            """,
            true,
            """additionalProperties with propertyNames -> Valid against both keywords""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "additionalProperties with propertyNames -> Valid against propertyNames, but not additionalProperties"
     *
     * Test ID: "additionalProperties::additionalProperties with propertyNames::Valid against propertyNames, but not additionalProperties"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "fig": 2,
                    "pear": "available"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 5
                    },
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            """,
            false,
            """additionalProperties with propertyNames -> Valid against propertyNames, but not additionalProperties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "dependentSchemas with additionalProperties -> additionalProperties doesn't consider dependentSchemas"
     *
     * Test ID: "additionalProperties::dependentSchemas with additionalProperties::additionalProperties doesn't consider dependentSchemas"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """dependentSchemas with additionalProperties -> additionalProperties doesn't consider dependentSchemas""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "dependentSchemas with additionalProperties -> additionalProperties can't see bar"
     *
     * Test ID: "additionalProperties::dependentSchemas with additionalProperties::additionalProperties can't see bar"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """dependentSchemas with additionalProperties -> additionalProperties can't see bar""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/additionalProperties.json`:
     *     "dependentSchemas with additionalProperties -> additionalProperties can't see bar even when foo2 is present"
     *
     * Test ID: "additionalProperties::dependentSchemas with additionalProperties::additionalProperties can't see bar even when foo2 is present"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo2": "",
                    "bar": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """dependentSchemas with additionalProperties -> additionalProperties can't see bar even when foo2 is present""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf -> allOf"
     *
     * Test ID: "allOf::allOf::allOf"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz",
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """allOf -> allOf""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf -> mismatch second"
     *
     * Test ID: "allOf::allOf::mismatch second"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """allOf -> mismatch second""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf -> mismatch first"
     *
     * Test ID: "allOf::allOf::mismatch first"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """allOf -> mismatch first""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf -> wrong type"
     *
     * Test ID: "allOf::allOf::wrong type"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz",
                    "bar": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """allOf -> wrong type""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with base schema -> valid"
     *
     * Test ID: "allOf::allOf with base schema::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": 2,
                    "baz": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            true,
            """allOf with base schema -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with base schema -> mismatch base schema"
     *
     * Test ID: "allOf::allOf with base schema::mismatch base schema"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "baz": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """allOf with base schema -> mismatch base schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with base schema -> mismatch first allOf"
     *
     * Test ID: "allOf::allOf with base schema::mismatch first allOf"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2,
                    "baz": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """allOf with base schema -> mismatch first allOf""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with base schema -> mismatch second allOf"
     *
     * Test ID: "allOf::allOf with base schema::mismatch second allOf"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """allOf with base schema -> mismatch second allOf""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with base schema -> mismatch both"
     *
     * Test ID: "allOf::allOf with base schema::mismatch both"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "bar": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "bar"
                    ],
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "type": "null"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """allOf with base schema -> mismatch both""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf simple types -> valid"
     *
     * Test ID: "allOf::allOf simple types::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                25
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "maximum": 30
                        },
                        {
                            "minimum": 20
                        }
                    ]
                }
            """,
            true,
            """allOf simple types -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf simple types -> mismatch one"
     *
     * Test ID: "allOf::allOf simple types::mismatch one"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                35
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "maximum": 30
                        },
                        {
                            "minimum": 20
                        }
                    ]
                }
            """,
            false,
            """allOf simple types -> mismatch one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with boolean schemas, all true -> any value is valid"
     *
     * Test ID: "allOf::allOf with boolean schemas, all true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        true,
                        true
                    ]
                }
            """,
            true,
            """allOf with boolean schemas, all true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with boolean schemas, some false -> any value is invalid"
     *
     * Test ID: "allOf::allOf with boolean schemas, some false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        true,
                        false
                    ]
                }
            """,
            false,
            """allOf with boolean schemas, some false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with boolean schemas, all false -> any value is invalid"
     *
     * Test ID: "allOf::allOf with boolean schemas, all false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        false,
                        false
                    ]
                }
            """,
            false,
            """allOf with boolean schemas, all false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with one empty schema -> any data is valid"
     *
     * Test ID: "allOf::allOf with one empty schema::any data is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                        }
                    ]
                }
            """,
            true,
            """allOf with one empty schema -> any data is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with two empty schemas -> any data is valid"
     *
     * Test ID: "allOf::allOf with two empty schemas::any data is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """allOf with two empty schemas -> any data is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with the first empty schema -> number is valid"
     *
     * Test ID: "allOf::allOf with the first empty schema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            """,
            true,
            """allOf with the first empty schema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with the first empty schema -> string is invalid"
     *
     * Test ID: "allOf::allOf with the first empty schema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                        },
                        {
                            "type": "number"
                        }
                    ]
                }
            """,
            false,
            """allOf with the first empty schema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with the last empty schema -> number is valid"
     *
     * Test ID: "allOf::allOf with the last empty schema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """allOf with the last empty schema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf with the last empty schema -> string is invalid"
     *
     * Test ID: "allOf::allOf with the last empty schema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            false,
            """allOf with the last empty schema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "nested allOf, to check validation semantics -> null is valid"
     *
     * Test ID: "allOf::nested allOf, to check validation semantics::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "allOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            true,
            """nested allOf, to check validation semantics -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "nested allOf, to check validation semantics -> anything non-null is invalid"
     *
     * Test ID: "allOf::nested allOf, to check validation semantics::anything non-null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_43() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "allOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            false,
            """nested allOf, to check validation semantics -> anything non-null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: false, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_44() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: false, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_45() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: true, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_46() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: false, anyOf: true, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_47() {
        
        assertKsonEnforcesSchema(
            """
                15
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: false, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_48() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: false, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_49() {
        
        assertKsonEnforcesSchema(
            """
                10
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: false"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: true, oneOf: false"
     */
    @Test
    fun jsonSchemaSuiteTest_50() {
        
        assertKsonEnforcesSchema(
            """
                6
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: true"
     *
     * Test ID: "allOf::allOf combined with anyOf, oneOf::allOf: true, anyOf: true, oneOf: true"
     */
    @Test
    fun jsonSchemaSuiteTest_51() {
        
        assertKsonEnforcesSchema(
            """
                30
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "multipleOf": 2
                        }
                    ],
                    "anyOf": [
                        {
                            "multipleOf": 3
                        }
                    ],
                    "oneOf": [
                        {
                            "multipleOf": 5
                        }
                    ]
                }
            """,
            true,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: true""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier -> match"
     *
     * Test ID: "anchor::Location-independent identifier::match"
     */
    @Test
    fun jsonSchemaSuiteTest_52() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """Location-independent identifier -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier -> mismatch"
     *
     * Test ID: "anchor::Location-independent identifier::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_53() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """Location-independent identifier -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with absolute URI -> match"
     *
     * Test ID: "anchor::Location-independent identifier with absolute URI::match"
     */
    @Test
    fun jsonSchemaSuiteTest_54() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/bar#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/bar",
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """Location-independent identifier with absolute URI -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with absolute URI -> mismatch"
     *
     * Test ID: "anchor::Location-independent identifier with absolute URI::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_55() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/bar#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/bar",
                            "${'$'}anchor": "foo",
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """Location-independent identifier with absolute URI -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with base URI change in subschema -> match"
     *
     * Test ID: "anchor::Location-independent identifier with base URI change in subschema::match"
     */
    @Test
    fun jsonSchemaSuiteTest_56() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/root",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/nested.json#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "nested.json",
                            "${'$'}defs": {
                                "B": {
                                    "${'$'}anchor": "foo",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """Location-independent identifier with base URI change in subschema -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "Location-independent identifier with base URI change in subschema -> mismatch"
     *
     * Test ID: "anchor::Location-independent identifier with base URI change in subschema::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_57() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/root",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/nested.json#foo",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "nested.json",
                            "${'$'}defs": {
                                "B": {
                                    "${'$'}anchor": "foo",
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """Location-independent identifier with base URI change in subschema -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "same $anchor with different base uri -> $ref resolves to /$defs/A/allOf/1"
     *
     * Test ID: "anchor::same $anchor with different base uri::$ref resolves to /$defs/A/allOf/1"
     */
    @Test
    fun jsonSchemaSuiteTest_58() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/foobar",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "child1",
                            "allOf": [
                                {
                                    "${'$'}id": "child2",
                                    "${'$'}anchor": "my_anchor",
                                    "type": "number"
                                },
                                {
                                    "${'$'}anchor": "my_anchor",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "${'$'}ref": "child1#my_anchor"
                }
            """,
            true,
            """same ${'$'}anchor with different base uri -> ${'$'}ref resolves to /${'$'}defs/A/allOf/1""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anchor.json`:
     *     "same $anchor with different base uri -> $ref does not resolve to /$defs/A/allOf/0"
     *
     * Test ID: "anchor::same $anchor with different base uri::$ref does not resolve to /$defs/A/allOf/0"
     */
    @Test
    fun jsonSchemaSuiteTest_59() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/foobar",
                    "${'$'}defs": {
                        "A": {
                            "${'$'}id": "child1",
                            "allOf": [
                                {
                                    "${'$'}id": "child2",
                                    "${'$'}anchor": "my_anchor",
                                    "type": "number"
                                },
                                {
                                    "${'$'}anchor": "my_anchor",
                                    "type": "string"
                                }
                            ]
                        }
                    },
                    "${'$'}ref": "child1#my_anchor"
                }
            """,
            false,
            """same ${'$'}anchor with different base uri -> ${'$'}ref does not resolve to /${'$'}defs/A/allOf/0""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf -> first anyOf valid"
     *
     * Test ID: "anyOf::anyOf::first anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_60() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """anyOf -> first anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf -> second anyOf valid"
     *
     * Test ID: "anyOf::anyOf::second anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_61() {
        
        assertKsonEnforcesSchema(
            """
                2.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """anyOf -> second anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf -> both anyOf valid"
     *
     * Test ID: "anyOf::anyOf::both anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_62() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """anyOf -> both anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf -> neither anyOf valid"
     *
     * Test ID: "anyOf::anyOf::neither anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_63() {
        
        assertKsonEnforcesSchema(
            """
                1.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            false,
            """anyOf -> neither anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with base schema -> mismatch base schema"
     *
     * Test ID: "anyOf::anyOf with base schema::mismatch base schema"
     */
    @Test
    fun jsonSchemaSuiteTest_64() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string",
                    "anyOf": [
                        {
                            "maxLength": 2
                        },
                        {
                            "minLength": 4
                        }
                    ]
                }
            """,
            false,
            """anyOf with base schema -> mismatch base schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with base schema -> one anyOf valid"
     *
     * Test ID: "anyOf::anyOf with base schema::one anyOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_65() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string",
                    "anyOf": [
                        {
                            "maxLength": 2
                        },
                        {
                            "minLength": 4
                        }
                    ]
                }
            """,
            true,
            """anyOf with base schema -> one anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with base schema -> both anyOf invalid"
     *
     * Test ID: "anyOf::anyOf with base schema::both anyOf invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_66() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string",
                    "anyOf": [
                        {
                            "maxLength": 2
                        },
                        {
                            "minLength": 4
                        }
                    ]
                }
            """,
            false,
            """anyOf with base schema -> both anyOf invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with boolean schemas, all true -> any value is valid"
     *
     * Test ID: "anyOf::anyOf with boolean schemas, all true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_67() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        true,
                        true
                    ]
                }
            """,
            true,
            """anyOf with boolean schemas, all true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with boolean schemas, some true -> any value is valid"
     *
     * Test ID: "anyOf::anyOf with boolean schemas, some true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_68() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """anyOf with boolean schemas, some true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with boolean schemas, all false -> any value is invalid"
     *
     * Test ID: "anyOf::anyOf with boolean schemas, all false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_69() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        false,
                        false
                    ]
                }
            """,
            false,
            """anyOf with boolean schemas, all false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf complex types -> first anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::first anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_70() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """anyOf complex types -> first anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf complex types -> second anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::second anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_71() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """anyOf complex types -> second anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf complex types -> both anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::both anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_72() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz",
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """anyOf complex types -> both anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf complex types -> neither anyOf valid (complex)"
     *
     * Test ID: "anyOf::anyOf complex types::neither anyOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_73() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 2,
                    "bar": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """anyOf complex types -> neither anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with one empty schema -> string is valid"
     *
     * Test ID: "anyOf::anyOf with one empty schema::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_74() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """anyOf with one empty schema -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "anyOf with one empty schema -> number is valid"
     *
     * Test ID: "anyOf::anyOf with one empty schema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_75() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """anyOf with one empty schema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "nested anyOf, to check validation semantics -> null is valid"
     *
     * Test ID: "anyOf::nested anyOf, to check validation semantics::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_76() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            true,
            """nested anyOf, to check validation semantics -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/anyOf.json`:
     *     "nested anyOf, to check validation semantics -> anything non-null is invalid"
     *
     * Test ID: "anyOf::nested anyOf, to check validation semantics::anything non-null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_77() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "anyOf": [
                        {
                            "anyOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            false,
            """nested anyOf, to check validation semantics -> anything non-null is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> number is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_78() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> string is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_79() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> boolean true is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::boolean true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_80() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> boolean true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> boolean false is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::boolean false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_81() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> boolean false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> null is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_82() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> object is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_83() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> empty object is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_84() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> array is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_85() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'true' -> empty array is valid"
     *
     * Test ID: "boolean_schema::boolean schema 'true'::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_86() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> number is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_87() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> string is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_88() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> boolean true is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::boolean true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_89() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> boolean true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> boolean false is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::boolean false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_90() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> boolean false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> null is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_91() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> object is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_92() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> empty object is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_93() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> array is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_94() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/boolean_schema.json`:
     *     "boolean schema 'false' -> empty array is invalid"
     *
     * Test ID: "boolean_schema::boolean schema 'false'::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_95() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> empty array is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const validation -> same value is valid"
     *
     * Test ID: "const::const validation::same value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_96() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 2
                }
            """,
            true,
            """const validation -> same value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const validation -> another value is invalid"
     *
     * Test ID: "const::const validation::another value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_97() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 2
                }
            """,
            false,
            """const validation -> another value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const validation -> another type is invalid"
     *
     * Test ID: "const::const validation::another type is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_98() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 2
                }
            """,
            false,
            """const validation -> another type is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> same object is valid"
     *
     * Test ID: "const::const with object::same object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_99() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar",
                    "baz": "bax"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            true,
            """const with object -> same object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> same object with different property order is valid"
     *
     * Test ID: "const::const with object::same object with different property order is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_100() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "bax",
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            true,
            """const with object -> same object with different property order is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> another object is invalid"
     *
     * Test ID: "const::const with object::another object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_101() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            false,
            """const with object -> another object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with object -> another type is invalid"
     *
     * Test ID: "const::const with object::another type is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_102() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "foo": "bar",
                        "baz": "bax"
                    }
                }
            """,
            false,
            """const with object -> another type is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with array -> same array is valid"
     *
     * Test ID: "const::const with array::same array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_103() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        {
                            "foo": "bar"
                        }
                    ]
                }
            """,
            true,
            """const with array -> same array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with array -> another array item is invalid"
     *
     * Test ID: "const::const with array::another array item is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_104() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        {
                            "foo": "bar"
                        }
                    ]
                }
            """,
            false,
            """const with array -> another array item is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with array -> array with additional items is invalid"
     *
     * Test ID: "const::const with array::array with additional items is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_105() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        {
                            "foo": "bar"
                        }
                    ]
                }
            """,
            false,
            """const with array -> array with additional items is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with null -> null is valid"
     *
     * Test ID: "const::const with null::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_106() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": null
                }
            """,
            true,
            """const with null -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with null -> not null is invalid"
     *
     * Test ID: "const::const with null::not null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_107() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": null
                }
            """,
            false,
            """const with null -> not null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with false does not match 0 -> false is valid"
     *
     * Test ID: "const::const with false does not match 0::false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_108() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": false
                }
            """,
            true,
            """const with false does not match 0 -> false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with false does not match 0 -> integer zero is invalid"
     *
     * Test ID: "const::const with false does not match 0::integer zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_109() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": false
                }
            """,
            false,
            """const with false does not match 0 -> integer zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with false does not match 0 -> float zero is invalid"
     *
     * Test ID: "const::const with false does not match 0::float zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_110() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": false
                }
            """,
            false,
            """const with false does not match 0 -> float zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with true does not match 1 -> true is valid"
     *
     * Test ID: "const::const with true does not match 1::true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_111() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": true
                }
            """,
            true,
            """const with true does not match 1 -> true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with true does not match 1 -> integer one is invalid"
     *
     * Test ID: "const::const with true does not match 1::integer one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_112() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": true
                }
            """,
            false,
            """const with true does not match 1 -> integer one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with true does not match 1 -> float one is invalid"
     *
     * Test ID: "const::const with true does not match 1::float one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_113() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": true
                }
            """,
            false,
            """const with true does not match 1 -> float one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [false] does not match [0] -> [false] is valid"
     *
     * Test ID: "const::const with [false] does not match [0]::[false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_114() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        false
                    ]
                }
            """,
            true,
            """const with [false] does not match [0] -> [false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [false] does not match [0] -> [0] is invalid"
     *
     * Test ID: "const::const with [false] does not match [0]::[0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_115() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        false
                    ]
                }
            """,
            false,
            """const with [false] does not match [0] -> [0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [false] does not match [0] -> [0.0] is invalid"
     *
     * Test ID: "const::const with [false] does not match [0]::[0.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_116() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        false
                    ]
                }
            """,
            false,
            """const with [false] does not match [0] -> [0.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [true] does not match [1] -> [true] is valid"
     *
     * Test ID: "const::const with [true] does not match [1]::[true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_117() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        true
                    ]
                }
            """,
            true,
            """const with [true] does not match [1] -> [true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [true] does not match [1] -> [1] is invalid"
     *
     * Test ID: "const::const with [true] does not match [1]::[1] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_118() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        true
                    ]
                }
            """,
            false,
            """const with [true] does not match [1] -> [1] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with [true] does not match [1] -> [1.0] is invalid"
     *
     * Test ID: "const::const with [true] does not match [1]::[1.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_119() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": [
                        true
                    ]
                }
            """,
            false,
            """const with [true] does not match [1] -> [1.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": false} is valid"
     *
     * Test ID: "const::const with {"a": false} does not match {"a": 0}::{"a": false} is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_120() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": false
                    }
                }
            """,
            true,
            """const with {"a": false} does not match {"a": 0} -> {"a": false} is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": 0} is invalid"
     *
     * Test ID: "const::const with {"a": false} does not match {"a": 0}::{"a": 0} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_121() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 0
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": false
                    }
                }
            """,
            false,
            """const with {"a": false} does not match {"a": 0} -> {"a": 0} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": 0.0} is invalid"
     *
     * Test ID: "const::const with {"a": false} does not match {"a": 0}::{"a": 0.0} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_122() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 0.0
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": false
                    }
                }
            """,
            false,
            """const with {"a": false} does not match {"a": 0} -> {"a": 0.0} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": true} is valid"
     *
     * Test ID: "const::const with {"a": true} does not match {"a": 1}::{"a": true} is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_123() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": true
                    }
                }
            """,
            true,
            """const with {"a": true} does not match {"a": 1} -> {"a": true} is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": 1} is invalid"
     *
     * Test ID: "const::const with {"a": true} does not match {"a": 1}::{"a": 1} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_124() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": true
                    }
                }
            """,
            false,
            """const with {"a": true} does not match {"a": 1} -> {"a": 1} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": 1.0} is invalid"
     *
     * Test ID: "const::const with {"a": true} does not match {"a": 1}::{"a": 1.0} is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_125() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1.0
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": {
                        "a": true
                    }
                }
            """,
            false,
            """const with {"a": true} does not match {"a": 1} -> {"a": 1.0} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> false is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_126() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """const with 0 does not match other zero-like types -> false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> integer zero is valid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::integer zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_127() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            true,
            """const with 0 does not match other zero-like types -> integer zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> float zero is valid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::float zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_128() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            true,
            """const with 0 does not match other zero-like types -> float zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> empty object is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_129() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """const with 0 does not match other zero-like types -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> empty array is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_130() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """const with 0 does not match other zero-like types -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 0 does not match other zero-like types -> empty string is invalid"
     *
     * Test ID: "const::const with 0 does not match other zero-like types::empty string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_131() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 0
                }
            """,
            false,
            """const with 0 does not match other zero-like types -> empty string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 1 does not match true -> true is invalid"
     *
     * Test ID: "const::const with 1 does not match true::true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_132() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 1
                }
            """,
            false,
            """const with 1 does not match true -> true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 1 does not match true -> integer one is valid"
     *
     * Test ID: "const::const with 1 does not match true::integer one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_133() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 1
                }
            """,
            true,
            """const with 1 does not match true -> integer one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with 1 does not match true -> float one is valid"
     *
     * Test ID: "const::const with 1 does not match true::float one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_134() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 1
                }
            """,
            true,
            """const with 1 does not match true -> float one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> integer -2 is valid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::integer -2 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_135() {
        
        assertKsonEnforcesSchema(
            """
                -2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            true,
            """const with -2.0 matches integer and float types -> integer -2 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> integer 2 is invalid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::integer 2 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_136() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            false,
            """const with -2.0 matches integer and float types -> integer 2 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> float -2.0 is valid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::float -2.0 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_137() {
        
        assertKsonEnforcesSchema(
            """
                -2.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            true,
            """const with -2.0 matches integer and float types -> float -2.0 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> float 2.0 is invalid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::float 2.0 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_138() {
        
        assertKsonEnforcesSchema(
            """
                2.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            false,
            """const with -2.0 matches integer and float types -> float 2.0 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "const with -2.0 matches integer and float types -> float -2.00001 is invalid"
     *
     * Test ID: "const::const with -2.0 matches integer and float types::float -2.00001 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_139() {
        
        assertKsonEnforcesSchema(
            """
                -2.00001
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": -2.0
                }
            """,
            false,
            """const with -2.0 matches integer and float types -> float -2.00001 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> integer is valid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_140() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740992
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            true,
            """float and integers are equal up to 64-bit representation limits -> integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> integer minus one is invalid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::integer minus one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_141() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740991
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            false,
            """float and integers are equal up to 64-bit representation limits -> integer minus one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> float is valid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::float is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_142() {
        
        assertKsonEnforcesSchema(
            """
                9.007199254740992E15
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            true,
            """float and integers are equal up to 64-bit representation limits -> float is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> float minus one is invalid"
     *
     * Test ID: "const::float and integers are equal up to 64-bit representation limits::float minus one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_143() {
        
        assertKsonEnforcesSchema(
            """
                9.007199254740991E15
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": 9007199254740992
                }
            """,
            false,
            """float and integers are equal up to 64-bit representation limits -> float minus one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "nul characters in strings -> match string with nul"
     *
     * Test ID: "const::nul characters in strings::match string with nul"
     */
    @Test
    fun jsonSchemaSuiteTest_144() {
        
        assertKsonEnforcesSchema(
            """
                "hello\u0000there"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": "hello\u0000there"
                }
            """,
            true,
            """nul characters in strings -> match string with nul""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/const.json`:
     *     "nul characters in strings -> do not match string lacking nul"
     *
     * Test ID: "const::nul characters in strings::do not match string lacking nul"
     */
    @Test
    fun jsonSchemaSuiteTest_145() {
        
        assertKsonEnforcesSchema(
            """
                "hellothere"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "const": "hello\u0000there"
                }
            """,
            false,
            """nul characters in strings -> do not match string lacking nul""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword validation -> array with item matching schema (5) is valid"
     *
     * Test ID: "contains::contains keyword validation::array with item matching schema (5) is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_146() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """contains keyword validation -> array with item matching schema (5) is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword validation -> array with item matching schema (6) is valid"
     *
     * Test ID: "contains::contains keyword validation::array with item matching schema (6) is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_147() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    6
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """contains keyword validation -> array with item matching schema (6) is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword validation -> array with two items matching schema (5, 6) is valid"
     *
     * Test ID: "contains::contains keyword validation::array with two items matching schema (5, 6) is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_148() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5,
                    6
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """contains keyword validation -> array with two items matching schema (5, 6) is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword validation -> array without items matching schema is invalid"
     *
     * Test ID: "contains::contains keyword validation::array without items matching schema is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_149() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            false,
            """contains keyword validation -> array without items matching schema is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword validation -> empty array is invalid"
     *
     * Test ID: "contains::contains keyword validation::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_150() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            false,
            """contains keyword validation -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword validation -> not array is valid"
     *
     * Test ID: "contains::contains keyword validation::not array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_151() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """contains keyword validation -> not array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with const keyword -> array with item 5 is valid"
     *
     * Test ID: "contains::contains keyword with const keyword::array with item 5 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_152() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 5
                    }
                }
            """,
            true,
            """contains keyword with const keyword -> array with item 5 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with const keyword -> array with two items 5 is valid"
     *
     * Test ID: "contains::contains keyword with const keyword::array with two items 5 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_153() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 5
                    }
                }
            """,
            true,
            """contains keyword with const keyword -> array with two items 5 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with const keyword -> array without item 5 is invalid"
     *
     * Test ID: "contains::contains keyword with const keyword::array without item 5 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_154() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 5
                    }
                }
            """,
            false,
            """contains keyword with const keyword -> array without item 5 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with boolean schema true -> any non-empty array is valid"
     *
     * Test ID: "contains::contains keyword with boolean schema true::any non-empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_155() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": true
                }
            """,
            true,
            """contains keyword with boolean schema true -> any non-empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with boolean schema true -> empty array is invalid"
     *
     * Test ID: "contains::contains keyword with boolean schema true::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_156() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": true
                }
            """,
            false,
            """contains keyword with boolean schema true -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with boolean schema false -> any non-empty array is invalid"
     *
     * Test ID: "contains::contains keyword with boolean schema false::any non-empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_157() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": false
                }
            """,
            false,
            """contains keyword with boolean schema false -> any non-empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with boolean schema false -> empty array is invalid"
     *
     * Test ID: "contains::contains keyword with boolean schema false::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_158() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": false
                }
            """,
            false,
            """contains keyword with boolean schema false -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains keyword with boolean schema false -> non-arrays are valid"
     *
     * Test ID: "contains::contains keyword with boolean schema false::non-arrays are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_159() {
        
        assertKsonEnforcesSchema(
            """
                "contains does not apply to strings"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": false
                }
            """,
            true,
            """contains keyword with boolean schema false -> non-arrays are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "items + contains -> matches items, does not match contains"
     *
     * Test ID: "contains::items + contains::matches items, does not match contains"
     */
    @Test
    fun jsonSchemaSuiteTest_160() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    4,
                    8
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            false,
            """items + contains -> matches items, does not match contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "items + contains -> does not match items, matches contains"
     *
     * Test ID: "contains::items + contains::does not match items, matches contains"
     */
    @Test
    fun jsonSchemaSuiteTest_161() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    6,
                    9
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            false,
            """items + contains -> does not match items, matches contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "items + contains -> matches both items and contains"
     *
     * Test ID: "contains::items + contains::matches both items and contains"
     */
    @Test
    fun jsonSchemaSuiteTest_162() {
        
        assertKsonEnforcesSchema(
            """
                [
                    6,
                    12
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            true,
            """items + contains -> matches both items and contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "items + contains -> matches neither items nor contains"
     *
     * Test ID: "contains::items + contains::matches neither items nor contains"
     */
    @Test
    fun jsonSchemaSuiteTest_163() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            false,
            """items + contains -> matches neither items nor contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains with false if subschema -> any non-empty array is valid"
     *
     * Test ID: "contains::contains with false if subschema::any non-empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_164() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "if": false,
                        "else": true
                    }
                }
            """,
            true,
            """contains with false if subschema -> any non-empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains with false if subschema -> empty array is invalid"
     *
     * Test ID: "contains::contains with false if subschema::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_165() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "if": false,
                        "else": true
                    }
                }
            """,
            false,
            """contains with false if subschema -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/contains.json`:
     *     "contains with null instance elements -> allows null items"
     *
     * Test ID: "contains::contains with null instance elements::allows null items"
     */
    @Test
    fun jsonSchemaSuiteTest_166() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "type": "null"
                    }
                }
            """,
            true,
            """contains with null instance elements -> allows null items""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of string-encoded content based on media type -> a valid JSON document"
     *
     * Test ID: "content::validation of string-encoded content based on media type::a valid JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_167() {
        
        assertKsonEnforcesSchema(
            """
                "{\"foo\": \"bar\"}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json"
                }
            """,
            true,
            """validation of string-encoded content based on media type -> a valid JSON document""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of string-encoded content based on media type -> an invalid JSON document; validates true"
     *
     * Test ID: "content::validation of string-encoded content based on media type::an invalid JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_168() {
        
        assertKsonEnforcesSchema(
            """
                "{:}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json"
                }
            """,
            true,
            """validation of string-encoded content based on media type -> an invalid JSON document; validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of string-encoded content based on media type -> ignores non-strings"
     *
     * Test ID: "content::validation of string-encoded content based on media type::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_169() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json"
                }
            """,
            true,
            """validation of string-encoded content based on media type -> ignores non-strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary string-encoding -> a valid base64 string"
     *
     * Test ID: "content::validation of binary string-encoding::a valid base64 string"
     */
    @Test
    fun jsonSchemaSuiteTest_170() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOiAiYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """validation of binary string-encoding -> a valid base64 string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary string-encoding -> an invalid base64 string (% is not a valid character); validates true"
     *
     * Test ID: "content::validation of binary string-encoding::an invalid base64 string (% is not a valid character); validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_171() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOi%iYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """validation of binary string-encoding -> an invalid base64 string (% is not a valid character); validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary string-encoding -> ignores non-strings"
     *
     * Test ID: "content::validation of binary string-encoding::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_172() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """validation of binary string-encoding -> ignores non-strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> a valid base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents::a valid base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_173() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOiAiYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """validation of binary-encoded media type documents -> a valid base64-encoded JSON document""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> a validly-encoded invalid JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents::a validly-encoded invalid JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_174() {
        
        assertKsonEnforcesSchema(
            """
                "ezp9Cg=="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """validation of binary-encoded media type documents -> a validly-encoded invalid JSON document; validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> an invalid base64 string that is valid JSON; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents::an invalid base64 string that is valid JSON; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_175() {
        
        assertKsonEnforcesSchema(
            """
                "{}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """validation of binary-encoded media type documents -> an invalid base64 string that is valid JSON; validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents -> ignores non-strings"
     *
     * Test ID: "content::validation of binary-encoded media type documents::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_176() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64"
                }
            """,
            true,
            """validation of binary-encoded media type documents -> ignores non-strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> a valid base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::a valid base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_177() {
        
        assertKsonEnforcesSchema(
            """
                "eyJmb28iOiAiYmFyIn0K"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> a valid base64-encoded JSON document""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> another valid base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::another valid base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_178() {
        
        assertKsonEnforcesSchema(
            """
                "eyJib28iOiAyMCwgImZvbyI6ICJiYXoifQ=="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> another valid base64-encoded JSON document""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an invalid base64-encoded JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an invalid base64-encoded JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_179() {
        
        assertKsonEnforcesSchema(
            """
                "eyJib28iOiAyMH0="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> an invalid base64-encoded JSON document; validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an empty object as a base64-encoded JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an empty object as a base64-encoded JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_180() {
        
        assertKsonEnforcesSchema(
            """
                "e30="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> an empty object as a base64-encoded JSON document; validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an empty array as a base64-encoded JSON document"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an empty array as a base64-encoded JSON document"
     */
    @Test
    fun jsonSchemaSuiteTest_181() {
        
        assertKsonEnforcesSchema(
            """
                "W10="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> an empty array as a base64-encoded JSON document""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> a validly-encoded invalid JSON document; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::a validly-encoded invalid JSON document; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_182() {
        
        assertKsonEnforcesSchema(
            """
                "ezp9Cg=="
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> a validly-encoded invalid JSON document; validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> an invalid base64 string that is valid JSON; validates true"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::an invalid base64 string that is valid JSON; validates true"
     */
    @Test
    fun jsonSchemaSuiteTest_183() {
        
        assertKsonEnforcesSchema(
            """
                "{}"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> an invalid base64 string that is valid JSON; validates true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/content.json`:
     *     "validation of binary-encoded media type documents with schema -> ignores non-strings"
     *
     * Test ID: "content::validation of binary-encoded media type documents with schema::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_184() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contentMediaType": "application/json",
                    "contentEncoding": "base64",
                    "contentSchema": {
                        "type": "object",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """validation of binary-encoded media type documents with schema -> ignores non-strings""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/default.json`:
     *     "invalid type for default -> valid when property is specified"
     *
     * Test ID: "default::invalid type for default::valid when property is specified"
     */
    @Test
    fun jsonSchemaSuiteTest_185() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 13
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer",
                            "default": [
                            ]
                        }
                    }
                }
            """,
            true,
            """invalid type for default -> valid when property is specified""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/default.json`:
     *     "invalid type for default -> still valid when the invalid default is used"
     *
     * Test ID: "default::invalid type for default::still valid when the invalid default is used"
     */
    @Test
    fun jsonSchemaSuiteTest_186() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer",
                            "default": [
                            ]
                        }
                    }
                }
            """,
            true,
            """invalid type for default -> still valid when the invalid default is used""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/default.json`:
     *     "invalid string value for default -> valid when property is specified"
     *
     * Test ID: "default::invalid string value for default::valid when property is specified"
     */
    @Test
    fun jsonSchemaSuiteTest_187() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "good"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "bar": {
                            "type": "string",
                            "minLength": 4,
                            "default": "bad"
                        }
                    }
                }
            """,
            true,
            """invalid string value for default -> valid when property is specified""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/default.json`:
     *     "invalid string value for default -> still valid when the invalid default is used"
     *
     * Test ID: "default::invalid string value for default::still valid when the invalid default is used"
     */
    @Test
    fun jsonSchemaSuiteTest_188() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "bar": {
                            "type": "string",
                            "minLength": 4,
                            "default": "bad"
                        }
                    }
                }
            """,
            true,
            """invalid string value for default -> still valid when the invalid default is used""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/default.json`:
     *     "the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (passing)"
     *
     * Test ID: "default::the default keyword does not do anything if the property is missing::an explicit property value is checked against maximum (passing)"
     */
    @Test
    fun jsonSchemaSuiteTest_189() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "alpha": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "alpha": {
                            "type": "number",
                            "maximum": 3,
                            "default": 5
                        }
                    }
                }
            """,
            true,
            """the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (passing)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/default.json`:
     *     "the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (failing)"
     *
     * Test ID: "default::the default keyword does not do anything if the property is missing::an explicit property value is checked against maximum (failing)"
     */
    @Test
    fun jsonSchemaSuiteTest_190() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "alpha": 5
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "alpha": {
                            "type": "number",
                            "maximum": 3,
                            "default": 5
                        }
                    }
                }
            """,
            false,
            """the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (failing)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/default.json`:
     *     "the default keyword does not do anything if the property is missing -> missing properties are not filled in with the default"
     *
     * Test ID: "default::the default keyword does not do anything if the property is missing::missing properties are not filled in with the default"
     */
    @Test
    fun jsonSchemaSuiteTest_191() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "alpha": {
                            "type": "number",
                            "maximum": 3,
                            "default": 5
                        }
                    }
                }
            """,
            true,
            """the default keyword does not do anything if the property is missing -> missing properties are not filled in with the default""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/defs.json`:
     *     "validate definition against metaschema -> valid definition schema"
     *
     * Test ID: "defs::validate definition against metaschema::valid definition schema"
     */
    @Test
    fun jsonSchemaSuiteTest_192() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}defs": {
                        "foo": {
                            "type": "integer"
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "https://json-schema.org/draft/2020-12/schema"
                }
            """,
            true,
            """validate definition against metaschema -> valid definition schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/defs.json`:
     *     "validate definition against metaschema -> invalid definition schema"
     *
     * Test ID: "defs::validate definition against metaschema::invalid definition schema"
     */
    @Test
    fun jsonSchemaSuiteTest_193() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}defs": {
                        "foo": {
                            "type": 1
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "https://json-schema.org/draft/2020-12/schema"
                }
            """,
            false,
            """validate definition against metaschema -> invalid definition schema""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> neither"
     *
     * Test ID: "dependentRequired::single dependency::neither"
     */
    @Test
    fun jsonSchemaSuiteTest_194() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """single dependency -> neither""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> nondependant"
     *
     * Test ID: "dependentRequired::single dependency::nondependant"
     */
    @Test
    fun jsonSchemaSuiteTest_195() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """single dependency -> nondependant""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> with dependency"
     *
     * Test ID: "dependentRequired::single dependency::with dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_196() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """single dependency -> with dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> missing dependency"
     *
     * Test ID: "dependentRequired::single dependency::missing dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_197() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            false,
            """single dependency -> missing dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> ignores arrays"
     *
     * Test ID: "dependentRequired::single dependency::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_198() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """single dependency -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> ignores strings"
     *
     * Test ID: "dependentRequired::single dependency::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_199() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """single dependency -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "single dependency -> ignores other non-objects"
     *
     * Test ID: "dependentRequired::single dependency::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_200() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                            "foo"
                        ]
                    }
                }
            """,
            true,
            """single dependency -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "empty dependents -> empty object"
     *
     * Test ID: "dependentRequired::empty dependents::empty object"
     */
    @Test
    fun jsonSchemaSuiteTest_201() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """empty dependents -> empty object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "empty dependents -> object with one property"
     *
     * Test ID: "dependentRequired::empty dependents::object with one property"
     */
    @Test
    fun jsonSchemaSuiteTest_202() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """empty dependents -> object with one property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "empty dependents -> non-object is valid"
     *
     * Test ID: "dependentRequired::empty dependents::non-object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_203() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "bar": [
                        ]
                    }
                }
            """,
            true,
            """empty dependents -> non-object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> neither"
     *
     * Test ID: "dependentRequired::multiple dependents required::neither"
     */
    @Test
    fun jsonSchemaSuiteTest_204() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """multiple dependents required -> neither""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> nondependants"
     *
     * Test ID: "dependentRequired::multiple dependents required::nondependants"
     */
    @Test
    fun jsonSchemaSuiteTest_205() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """multiple dependents required -> nondependants""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> with dependencies"
     *
     * Test ID: "dependentRequired::multiple dependents required::with dependencies"
     */
    @Test
    fun jsonSchemaSuiteTest_206() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "quux": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            true,
            """multiple dependents required -> with dependencies""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> missing dependency"
     *
     * Test ID: "dependentRequired::multiple dependents required::missing dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_207() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "quux": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """multiple dependents required -> missing dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> missing other dependency"
     *
     * Test ID: "dependentRequired::multiple dependents required::missing other dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_208() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1,
                    "quux": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """multiple dependents required -> missing other dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "multiple dependents required -> missing both dependencies"
     *
     * Test ID: "dependentRequired::multiple dependents required::missing both dependencies"
     */
    @Test
    fun jsonSchemaSuiteTest_209() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "quux": [
                            "foo",
                            "bar"
                        ]
                    }
                }
            """,
            false,
            """multiple dependents required -> missing both dependencies""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> CRLF"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::CRLF"
     */
    @Test
    fun jsonSchemaSuiteTest_210() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo\rbar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            true,
            """dependencies with escaped characters -> CRLF""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> quoted quotes"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::quoted quotes"
     */
    @Test
    fun jsonSchemaSuiteTest_211() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": 1,
                    "foo\"bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            true,
            """dependencies with escaped characters -> quoted quotes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> CRLF missing dependent"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::CRLF missing dependent"
     */
    @Test
    fun jsonSchemaSuiteTest_212() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """dependencies with escaped characters -> CRLF missing dependent""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentRequired.json`:
     *     "dependencies with escaped characters -> quoted quotes missing dependent"
     *
     * Test ID: "dependentRequired::dependencies with escaped characters::quoted quotes missing dependent"
     */
    @Test
    fun jsonSchemaSuiteTest_213() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\"bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentRequired": {
                        "foo\nbar": [
                            "foo\rbar"
                        ],
                        "foo\"bar": [
                            "foo'bar"
                        ]
                    }
                }
            """,
            false,
            """dependencies with escaped characters -> quoted quotes missing dependent""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> valid"
     *
     * Test ID: "dependentSchemas::single dependency::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_214() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """single dependency -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> no dependency"
     *
     * Test ID: "dependentSchemas::single dependency::no dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_215() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """single dependency -> no dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> wrong type"
     *
     * Test ID: "dependentSchemas::single dependency::wrong type"
     */
    @Test
    fun jsonSchemaSuiteTest_216() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """single dependency -> wrong type""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> wrong type other"
     *
     * Test ID: "dependentSchemas::single dependency::wrong type other"
     */
    @Test
    fun jsonSchemaSuiteTest_217() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 2,
                    "bar": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """single dependency -> wrong type other""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> wrong type both"
     *
     * Test ID: "dependentSchemas::single dependency::wrong type both"
     */
    @Test
    fun jsonSchemaSuiteTest_218() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """single dependency -> wrong type both""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> ignores arrays"
     *
     * Test ID: "dependentSchemas::single dependency::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_219() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """single dependency -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> ignores strings"
     *
     * Test ID: "dependentSchemas::single dependency::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_220() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """single dependency -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> ignores other non-objects"
     *
     * Test ID: "dependentSchemas::single dependency::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_221() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """single dependency -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> object with property having schema true is valid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::object with property having schema true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_222() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """boolean subschemas -> object with property having schema true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> object with property having schema false is invalid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::object with property having schema false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_223() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """boolean subschemas -> object with property having schema false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> object with both properties is invalid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::object with both properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_224() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """boolean subschemas -> object with both properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> empty object is valid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_225() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """boolean subschemas -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted tab"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted tab"
     */
    @Test
    fun jsonSchemaSuiteTest_226() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\tbar": 1,
                    "a": 2,
                    "b": 3,
                    "c": 4
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            true,
            """dependencies with escaped characters -> quoted tab""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted quote"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted quote"
     */
    @Test
    fun jsonSchemaSuiteTest_227() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": {
                        "foo\"bar": 1
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            false,
            """dependencies with escaped characters -> quoted quote""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted tab invalid under dependent schema"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted tab invalid under dependent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_228() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\tbar": 1,
                    "a": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            false,
            """dependencies with escaped characters -> quoted tab invalid under dependent schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted quote invalid under dependent schema"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted quote invalid under dependent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_229() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            false,
            """dependencies with escaped characters -> quoted quote invalid under dependent schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> matches root"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::matches root"
     */
    @Test
    fun jsonSchemaSuiteTest_230() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """dependent subschema incompatible with root -> matches root""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> matches dependency"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::matches dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_231() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """dependent subschema incompatible with root -> matches dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> matches both"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::matches both"
     */
    @Test
    fun jsonSchemaSuiteTest_232() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """dependent subschema incompatible with root -> matches both""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> no dependency"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::no dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_233() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """dependent subschema incompatible with root -> no dependency""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_234() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor -> An array of strings is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_235() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """A ${'$'}dynamicRef to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor -> An array containing non-strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_236() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-anchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}anchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef to an ${'$'}anchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor -> An array of strings is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_237() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-anchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}anchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """A ${'$'}dynamicRef to an ${'$'}anchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor -> An array containing non-strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_238() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/ref-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}ref": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """A ${'$'}ref to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor -> An array of strings is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_239() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/ref-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}ref": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """A ${'$'}ref to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor -> An array containing non-strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_240() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/typical-dynamic-resolution/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef resolves to the first ${'$'}dynamicAnchor still in scope that is encountered when the schema is evaluated -> An array of strings is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_241() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/typical-dynamic-resolution/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """A ${'$'}dynamicRef resolves to the first ${'$'}dynamicAnchor still in scope that is encountered when the schema is evaluated -> An array containing non-strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef without anchor in fragment behaves identical to $ref -> An array of strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef without anchor in fragment behaves identical to $ref::An array of strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_242() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-without-anchor/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#/${'$'}defs/items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items",
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """A ${'$'}dynamicRef without anchor in fragment behaves identical to ${'$'}ref -> An array of strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef without anchor in fragment behaves identical to $ref -> An array of numbers is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef without anchor in fragment behaves identical to $ref::An array of numbers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_243() {
        
        assertKsonEnforcesSchema(
            """
                [
                    24,
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-without-anchor/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#/${'$'}defs/items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items",
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef without anchor in fragment behaves identical to ${'$'}ref -> An array of numbers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_244() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-with-intermediate-scopes/root",
                    "${'$'}ref": "intermediate-scope",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "intermediate-scope": {
                            "${'$'}id": "intermediate-scope",
                            "${'$'}ref": "list"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef with intermediate scopes that don't include a matching ${'$'}dynamicAnchor does not affect dynamic scope resolution -> An array of strings is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_245() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-with-intermediate-scopes/root",
                    "${'$'}ref": "intermediate-scope",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "intermediate-scope": {
                            "${'$'}id": "intermediate-scope",
                            "${'$'}ref": "list"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """A ${'$'}dynamicRef with intermediate scopes that don't include a matching ${'$'}dynamicAnchor does not affect dynamic scope resolution -> An array containing non-strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "An $anchor with the same name as a $dynamicAnchor is not used for dynamic scope resolution -> Any array is valid"
     *
     * Test ID: "dynamicRef::An $anchor with the same name as a $dynamicAnchor is not used for dynamic scope resolution::Any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_246() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-ignores-anchors/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}anchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """An ${'$'}anchor with the same name as a ${'$'}dynamicAnchor is not used for dynamic scope resolution -> Any array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef without a matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor -> Any array is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef without a matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor::Any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_247() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-without-bookend/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to give the reference somewhere to resolve to when it behaves like ${'$'}ref",
                                    "${'$'}anchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef without a matching ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to ${'$'}anchor -> Any array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef with a non-matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor -> Any array is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef with a non-matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor::Any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_248() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/unmatched-dynamic-anchor/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to give the reference somewhere to resolve to when it behaves like ${'$'}ref",
                                    "${'$'}anchor": "items",
                                    "${'$'}dynamicAnchor": "foo"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef with a non-matching ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to ${'$'}anchor -> Any array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope -> The recursive part is valid against the root"
     *
     * Test ID: "dynamicRef::A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope::The recursive part is valid against the root"
     */
    @Test
    fun jsonSchemaSuiteTest_249() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "pass",
                    "bar": {
                        "baz": {
                            "foo": "pass"
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/relative-dynamic-reference/root",
                    "${'$'}dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "const": "pass"
                        }
                    },
                    "${'$'}ref": "extended",
                    "${'$'}defs": {
                        "extended": {
                            "${'$'}id": "extended",
                            "${'$'}dynamicAnchor": "meta",
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "${'$'}ref": "bar"
                                }
                            }
                        },
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "object",
                            "properties": {
                                "baz": {
                                    "${'$'}dynamicRef": "extended#meta"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef that initially resolves to a schema with a matching ${'$'}dynamicAnchor resolves to the first ${'$'}dynamicAnchor in the dynamic scope -> The recursive part is valid against the root""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope -> The recursive part is not valid against the root"
     *
     * Test ID: "dynamicRef::A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope::The recursive part is not valid against the root"
     */
    @Test
    fun jsonSchemaSuiteTest_250() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "pass",
                    "bar": {
                        "baz": {
                            "foo": "fail"
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/relative-dynamic-reference/root",
                    "${'$'}dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "const": "pass"
                        }
                    },
                    "${'$'}ref": "extended",
                    "${'$'}defs": {
                        "extended": {
                            "${'$'}id": "extended",
                            "${'$'}dynamicAnchor": "meta",
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "${'$'}ref": "bar"
                                }
                            }
                        },
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "object",
                            "properties": {
                                "baz": {
                                    "${'$'}dynamicRef": "extended#meta"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """A ${'$'}dynamicRef that initially resolves to a schema with a matching ${'$'}dynamicAnchor resolves to the first ${'$'}dynamicAnchor in the dynamic scope -> The recursive part is not valid against the root""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef that initially resolves to a schema without a matching $dynamicAnchor behaves like a normal $ref to $anchor -> The recursive part doesn't need to validate against the root"
     *
     * Test ID: "dynamicRef::A $dynamicRef that initially resolves to a schema without a matching $dynamicAnchor behaves like a normal $ref to $anchor::The recursive part doesn't need to validate against the root"
     */
    @Test
    fun jsonSchemaSuiteTest_251() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "pass",
                    "bar": {
                        "baz": {
                            "foo": "fail"
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/relative-dynamic-reference-without-bookend/root",
                    "${'$'}dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "const": "pass"
                        }
                    },
                    "${'$'}ref": "extended",
                    "${'$'}defs": {
                        "extended": {
                            "${'$'}id": "extended",
                            "${'$'}anchor": "meta",
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "${'$'}ref": "bar"
                                }
                            }
                        },
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "object",
                            "properties": {
                                "baz": {
                                    "${'$'}dynamicRef": "extended#meta"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """A ${'$'}dynamicRef that initially resolves to a schema without a matching ${'$'}dynamicAnchor behaves like a normal ${'$'}ref to ${'$'}anchor -> The recursive part doesn't need to validate against the root""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> number list with number values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::number list with number values"
     */
    @Test
    fun jsonSchemaSuiteTest_252() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "numbers",
                    "list": [
                        1.1
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            true,
            """multiple dynamic paths to the ${'$'}dynamicRef keyword -> number list with number values""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> number list with string values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::number list with string values"
     */
    @Test
    fun jsonSchemaSuiteTest_253() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "numbers",
                    "list": [
                        "foo"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            false,
            """multiple dynamic paths to the ${'$'}dynamicRef keyword -> number list with string values""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> string list with number values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::string list with number values"
     */
    @Test
    fun jsonSchemaSuiteTest_254() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "strings",
                    "list": [
                        1.1
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            false,
            """multiple dynamic paths to the ${'$'}dynamicRef keyword -> string list with number values""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> string list with string values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::string list with string values"
     */
    @Test
    fun jsonSchemaSuiteTest_255() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "strings",
                    "list": [
                        "foo"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            true,
            """multiple dynamic paths to the ${'$'}dynamicRef keyword -> string list with string values""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "after leaving a dynamic scope, it is not used by a $dynamicRef -> string matches /$defs/thingy, but the $dynamicRef does not stop here"
     *
     * Test ID: "dynamicRef::after leaving a dynamic scope, it is not used by a $dynamicRef::string matches /$defs/thingy, but the $dynamicRef does not stop here"
     */
    @Test
    fun jsonSchemaSuiteTest_256() {
        
        assertKsonEnforcesSchema(
            """
                "a string"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
                    "if": {
                        "${'$'}id": "first_scope",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is first_scope#thingy",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "number"
                            }
                        }
                    },
                    "then": {
                        "${'$'}id": "second_scope",
                        "${'$'}ref": "start",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is second_scope#thingy, the final destination of the ${'$'}dynamicRef",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "null"
                            }
                        }
                    },
                    "${'$'}defs": {
                        "start": {
                            "${'$'}comment": "this is the landing spot from ${'$'}ref",
                            "${'$'}id": "start",
                            "${'$'}dynamicRef": "inner_scope#thingy"
                        },
                        "thingy": {
                            "${'$'}comment": "this is the first stop for the ${'$'}dynamicRef",
                            "${'$'}id": "inner_scope",
                            "${'$'}dynamicAnchor": "thingy",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """after leaving a dynamic scope, it is not used by a ${'$'}dynamicRef -> string matches /${'$'}defs/thingy, but the ${'$'}dynamicRef does not stop here""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "after leaving a dynamic scope, it is not used by a $dynamicRef -> first_scope is not in dynamic scope for the $dynamicRef"
     *
     * Test ID: "dynamicRef::after leaving a dynamic scope, it is not used by a $dynamicRef::first_scope is not in dynamic scope for the $dynamicRef"
     */
    @Test
    fun jsonSchemaSuiteTest_257() {
        
        assertKsonEnforcesSchema(
            """
                42
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
                    "if": {
                        "${'$'}id": "first_scope",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is first_scope#thingy",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "number"
                            }
                        }
                    },
                    "then": {
                        "${'$'}id": "second_scope",
                        "${'$'}ref": "start",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is second_scope#thingy, the final destination of the ${'$'}dynamicRef",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "null"
                            }
                        }
                    },
                    "${'$'}defs": {
                        "start": {
                            "${'$'}comment": "this is the landing spot from ${'$'}ref",
                            "${'$'}id": "start",
                            "${'$'}dynamicRef": "inner_scope#thingy"
                        },
                        "thingy": {
                            "${'$'}comment": "this is the first stop for the ${'$'}dynamicRef",
                            "${'$'}id": "inner_scope",
                            "${'$'}dynamicAnchor": "thingy",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """after leaving a dynamic scope, it is not used by a ${'$'}dynamicRef -> first_scope is not in dynamic scope for the ${'$'}dynamicRef""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "after leaving a dynamic scope, it is not used by a $dynamicRef -> /then/$defs/thingy is the final stop for the $dynamicRef"
     *
     * Test ID: "dynamicRef::after leaving a dynamic scope, it is not used by a $dynamicRef::/then/$defs/thingy is the final stop for the $dynamicRef"
     */
    @Test
    fun jsonSchemaSuiteTest_258() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
                    "if": {
                        "${'$'}id": "first_scope",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is first_scope#thingy",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "number"
                            }
                        }
                    },
                    "then": {
                        "${'$'}id": "second_scope",
                        "${'$'}ref": "start",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is second_scope#thingy, the final destination of the ${'$'}dynamicRef",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "null"
                            }
                        }
                    },
                    "${'$'}defs": {
                        "start": {
                            "${'$'}comment": "this is the landing spot from ${'$'}ref",
                            "${'$'}id": "start",
                            "${'$'}dynamicRef": "inner_scope#thingy"
                        },
                        "thingy": {
                            "${'$'}comment": "this is the first stop for the ${'$'}dynamicRef",
                            "${'$'}id": "inner_scope",
                            "${'$'}dynamicAnchor": "thingy",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """after leaving a dynamic scope, it is not used by a ${'$'}dynamicRef -> /then/${'$'}defs/thingy is the final stop for the ${'$'}dynamicRef""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "strict-tree schema, guards against misspelled properties -> instance with misspelled field"
     *
     * Test ID: "dynamicRef::strict-tree schema, guards against misspelled properties::instance with misspelled field"
     */
    @Test
    fun jsonSchemaSuiteTest_259() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "children": [
                        {
                            "daat": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-tree.json",
                    "${'$'}dynamicAnchor": "node",
                    "${'$'}ref": "tree.json",
                    "unevaluatedProperties": false
                }
            """,
            false,
            """strict-tree schema, guards against misspelled properties -> instance with misspelled field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "strict-tree schema, guards against misspelled properties -> instance with correct field"
     *
     * Test ID: "dynamicRef::strict-tree schema, guards against misspelled properties::instance with correct field"
     */
    @Test
    fun jsonSchemaSuiteTest_260() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "children": [
                        {
                            "data": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-tree.json",
                    "${'$'}dynamicAnchor": "node",
                    "${'$'}ref": "tree.json",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """strict-tree schema, guards against misspelled properties -> instance with correct field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "tests for implementation dynamic anchor and reference link -> incorrect parent schema"
     *
     * Test ID: "dynamicRef::tests for implementation dynamic anchor and reference link::incorrect parent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_261() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible.json",
                    "${'$'}ref": "extendible-dynamic-ref.json",
                    "${'$'}defs": {
                        "elements": {
                            "${'$'}dynamicAnchor": "elements",
                            "properties": {
                                "a": true
                            },
                            "required": [
                                "a"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """tests for implementation dynamic anchor and reference link -> incorrect parent schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "tests for implementation dynamic anchor and reference link -> incorrect extended schema"
     *
     * Test ID: "dynamicRef::tests for implementation dynamic anchor and reference link::incorrect extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_262() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "b": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible.json",
                    "${'$'}ref": "extendible-dynamic-ref.json",
                    "${'$'}defs": {
                        "elements": {
                            "${'$'}dynamicAnchor": "elements",
                            "properties": {
                                "a": true
                            },
                            "required": [
                                "a"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """tests for implementation dynamic anchor and reference link -> incorrect extended schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "tests for implementation dynamic anchor and reference link -> correct extended schema"
     *
     * Test ID: "dynamicRef::tests for implementation dynamic anchor and reference link::correct extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_263() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "a": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible.json",
                    "${'$'}ref": "extendible-dynamic-ref.json",
                    "${'$'}defs": {
                        "elements": {
                            "${'$'}dynamicAnchor": "elements",
                            "properties": {
                                "a": true
                            },
                            "required": [
                                "a"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """tests for implementation dynamic anchor and reference link -> correct extended schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $defs first -> incorrect parent schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $defs first::incorrect parent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_264() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-defs-first.json",
                    "allOf": [
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        },
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}defs first -> incorrect parent schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $defs first -> incorrect extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $defs first::incorrect extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_265() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "b": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-defs-first.json",
                    "allOf": [
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        },
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}defs first -> incorrect extended schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $defs first -> correct extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $defs first::correct extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_266() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "a": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-defs-first.json",
                    "allOf": [
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        },
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    ]
                }
            """,
            true,
            """${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}defs first -> correct extended schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $ref first -> incorrect parent schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $ref first::incorrect parent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_267() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-ref-first.json",
                    "allOf": [
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        },
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        }
                    ]
                }
            """,
            false,
            """${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}ref first -> incorrect parent schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $ref first -> incorrect extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $ref first::incorrect extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_268() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "b": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-ref-first.json",
                    "allOf": [
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        },
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        }
                    ]
                }
            """,
            false,
            """${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}ref first -> incorrect extended schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $ref first -> correct extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $ref first::correct extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_269() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "a": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-ref-first.json",
                    "allOf": [
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        },
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        }
                    ]
                }
            """,
            true,
            """${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}ref first -> correct extended schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref to $dynamicRef finds detached $dynamicAnchor -> number is valid"
     *
     * Test ID: "dynamicRef::$ref to $dynamicRef finds detached $dynamicAnchor::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_270() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/draft2020-12/detached-dynamicref.json#/${'$'}defs/foo"
                }
            """,
            true,
            """${'$'}ref to ${'$'}dynamicRef finds detached ${'$'}dynamicAnchor -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref to $dynamicRef finds detached $dynamicAnchor -> non-number is invalid"
     *
     * Test ID: "dynamicRef::$ref to $dynamicRef finds detached $dynamicAnchor::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_271() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/draft2020-12/detached-dynamicref.json#/${'$'}defs/foo"
                }
            """,
            false,
            """${'$'}ref to ${'$'}dynamicRef finds detached ${'$'}dynamicAnchor -> non-number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef points to a boolean schema -> follow $dynamicRef to a true schema"
     *
     * Test ID: "dynamicRef::$dynamicRef points to a boolean schema::follow $dynamicRef to a true schema"
     */
    @Test
    fun jsonSchemaSuiteTest_272() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "true": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "true": true,
                        "false": false
                    },
                    "properties": {
                        "true": {
                            "${'$'}dynamicRef": "#/${'$'}defs/true"
                        },
                        "false": {
                            "${'$'}dynamicRef": "#/${'$'}defs/false"
                        }
                    }
                }
            """,
            true,
            """${'$'}dynamicRef points to a boolean schema -> follow ${'$'}dynamicRef to a true schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef points to a boolean schema -> follow $dynamicRef to a false schema"
     *
     * Test ID: "dynamicRef::$dynamicRef points to a boolean schema::follow $dynamicRef to a false schema"
     */
    @Test
    fun jsonSchemaSuiteTest_273() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "false": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "true": true,
                        "false": false
                    },
                    "properties": {
                        "true": {
                            "${'$'}dynamicRef": "#/${'$'}defs/true"
                        },
                        "false": {
                            "${'$'}dynamicRef": "#/${'$'}defs/false"
                        }
                    }
                }
            """,
            false,
            """${'$'}dynamicRef points to a boolean schema -> follow ${'$'}dynamicRef to a false schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef skips over intermediate resources - direct reference -> integer property passes"
     *
     * Test ID: "dynamicRef::$dynamicRef skips over intermediate resources - direct reference::integer property passes"
     */
    @Test
    fun jsonSchemaSuiteTest_274() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar-item": {
                        "content": 42
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-skips-intermediate-resource/main",
                    "type": "object",
                    "properties": {
                        "bar-item": {
                            "${'$'}ref": "item"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "item"
                            },
                            "${'$'}defs": {
                                "item": {
                                    "${'$'}id": "item",
                                    "type": "object",
                                    "properties": {
                                        "content": {
                                            "${'$'}dynamicRef": "#content"
                                        }
                                    },
                                    "${'$'}defs": {
                                        "defaultContent": {
                                            "${'$'}dynamicAnchor": "content",
                                            "type": "integer"
                                        }
                                    }
                                },
                                "content": {
                                    "${'$'}dynamicAnchor": "content",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """${'$'}dynamicRef skips over intermediate resources - direct reference -> integer property passes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef skips over intermediate resources - direct reference -> string property fails"
     *
     * Test ID: "dynamicRef::$dynamicRef skips over intermediate resources - direct reference::string property fails"
     */
    @Test
    fun jsonSchemaSuiteTest_275() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar-item": {
                        "content": "value"
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-skips-intermediate-resource/main",
                    "type": "object",
                    "properties": {
                        "bar-item": {
                            "${'$'}ref": "item"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "item"
                            },
                            "${'$'}defs": {
                                "item": {
                                    "${'$'}id": "item",
                                    "type": "object",
                                    "properties": {
                                        "content": {
                                            "${'$'}dynamicRef": "#content"
                                        }
                                    },
                                    "${'$'}defs": {
                                        "defaultContent": {
                                            "${'$'}dynamicAnchor": "content",
                                            "type": "integer"
                                        }
                                    }
                                },
                                "content": {
                                    "${'$'}dynamicAnchor": "content",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """${'$'}dynamicRef skips over intermediate resources - direct reference -> string property fails""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "simple enum validation -> one of the enum is valid"
     *
     * Test ID: "enum::simple enum validation::one of the enum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_276() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                }
            """,
            true,
            """simple enum validation -> one of the enum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "simple enum validation -> something else is invalid"
     *
     * Test ID: "enum::simple enum validation::something else is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_277() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1,
                        2,
                        3
                    ]
                }
            """,
            false,
            """simple enum validation -> something else is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> one of the enum is valid"
     *
     * Test ID: "enum::heterogeneous enum validation::one of the enum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_278() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            true,
            """heterogeneous enum validation -> one of the enum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> something else is invalid"
     *
     * Test ID: "enum::heterogeneous enum validation::something else is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_279() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            false,
            """heterogeneous enum validation -> something else is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> objects are deep compared"
     *
     * Test ID: "enum::heterogeneous enum validation::objects are deep compared"
     */
    @Test
    fun jsonSchemaSuiteTest_280() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            false,
            """heterogeneous enum validation -> objects are deep compared""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> valid object matches"
     *
     * Test ID: "enum::heterogeneous enum validation::valid object matches"
     */
    @Test
    fun jsonSchemaSuiteTest_281() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            true,
            """heterogeneous enum validation -> valid object matches""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum validation -> extra properties in object is invalid"
     *
     * Test ID: "enum::heterogeneous enum validation::extra properties in object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_282() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12,
                    "boo": 42
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        "foo",
                        [
                        ],
                        true,
                        {
                            "foo": 12
                        }
                    ]
                }
            """,
            false,
            """heterogeneous enum validation -> extra properties in object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum-with-null validation -> null is valid"
     *
     * Test ID: "enum::heterogeneous enum-with-null validation::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_283() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        null
                    ]
                }
            """,
            true,
            """heterogeneous enum-with-null validation -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum-with-null validation -> number is valid"
     *
     * Test ID: "enum::heterogeneous enum-with-null validation::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_284() {
        
        assertKsonEnforcesSchema(
            """
                6
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        null
                    ]
                }
            """,
            true,
            """heterogeneous enum-with-null validation -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "heterogeneous enum-with-null validation -> something else is invalid"
     *
     * Test ID: "enum::heterogeneous enum-with-null validation::something else is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_285() {
        
        assertKsonEnforcesSchema(
            """
                "test"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        6,
                        null
                    ]
                }
            """,
            false,
            """heterogeneous enum-with-null validation -> something else is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> both properties are valid"
     *
     * Test ID: "enum::enums in properties::both properties are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_286() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            true,
            """enums in properties -> both properties are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> wrong foo value"
     *
     * Test ID: "enum::enums in properties::wrong foo value"
     */
    @Test
    fun jsonSchemaSuiteTest_287() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foot",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """enums in properties -> wrong foo value""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> wrong bar value"
     *
     * Test ID: "enum::enums in properties::wrong bar value"
     */
    @Test
    fun jsonSchemaSuiteTest_288() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bart"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """enums in properties -> wrong bar value""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> missing optional property is valid"
     *
     * Test ID: "enum::enums in properties::missing optional property is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_289() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            true,
            """enums in properties -> missing optional property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> missing required property is invalid"
     *
     * Test ID: "enum::enums in properties::missing required property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_290() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """enums in properties -> missing required property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enums in properties -> missing all properties is invalid"
     *
     * Test ID: "enum::enums in properties::missing all properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_291() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "enum": [
                                "foo"
                            ]
                        },
                        "bar": {
                            "enum": [
                                "bar"
                            ]
                        }
                    },
                    "required": [
                        "bar"
                    ]
                }
            """,
            false,
            """enums in properties -> missing all properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with escaped characters -> member 1 is valid"
     *
     * Test ID: "enum::enum with escaped characters::member 1 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_292() {
        
        assertKsonEnforcesSchema(
            """
                "foo\nbar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "foo\nbar",
                        "foo\rbar"
                    ]
                }
            """,
            true,
            """enum with escaped characters -> member 1 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with escaped characters -> member 2 is valid"
     *
     * Test ID: "enum::enum with escaped characters::member 2 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_293() {
        
        assertKsonEnforcesSchema(
            """
                "foo\rbar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "foo\nbar",
                        "foo\rbar"
                    ]
                }
            """,
            true,
            """enum with escaped characters -> member 2 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with escaped characters -> another string is invalid"
     *
     * Test ID: "enum::enum with escaped characters::another string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_294() {
        
        assertKsonEnforcesSchema(
            """
                "abc"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "foo\nbar",
                        "foo\rbar"
                    ]
                }
            """,
            false,
            """enum with escaped characters -> another string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with false does not match 0 -> false is valid"
     *
     * Test ID: "enum::enum with false does not match 0::false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_295() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        false
                    ]
                }
            """,
            true,
            """enum with false does not match 0 -> false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with false does not match 0 -> integer zero is invalid"
     *
     * Test ID: "enum::enum with false does not match 0::integer zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_296() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        false
                    ]
                }
            """,
            false,
            """enum with false does not match 0 -> integer zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with false does not match 0 -> float zero is invalid"
     *
     * Test ID: "enum::enum with false does not match 0::float zero is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_297() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        false
                    ]
                }
            """,
            false,
            """enum with false does not match 0 -> float zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [false] does not match [0] -> [false] is valid"
     *
     * Test ID: "enum::enum with [false] does not match [0]::[false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_298() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            false
                        ]
                    ]
                }
            """,
            true,
            """enum with [false] does not match [0] -> [false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [false] does not match [0] -> [0] is invalid"
     *
     * Test ID: "enum::enum with [false] does not match [0]::[0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_299() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            false
                        ]
                    ]
                }
            """,
            false,
            """enum with [false] does not match [0] -> [0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [false] does not match [0] -> [0.0] is invalid"
     *
     * Test ID: "enum::enum with [false] does not match [0]::[0.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_300() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            false
                        ]
                    ]
                }
            """,
            false,
            """enum with [false] does not match [0] -> [0.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with true does not match 1 -> true is valid"
     *
     * Test ID: "enum::enum with true does not match 1::true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_301() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        true
                    ]
                }
            """,
            true,
            """enum with true does not match 1 -> true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with true does not match 1 -> integer one is invalid"
     *
     * Test ID: "enum::enum with true does not match 1::integer one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_302() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        true
                    ]
                }
            """,
            false,
            """enum with true does not match 1 -> integer one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with true does not match 1 -> float one is invalid"
     *
     * Test ID: "enum::enum with true does not match 1::float one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_303() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        true
                    ]
                }
            """,
            false,
            """enum with true does not match 1 -> float one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [true] does not match [1] -> [true] is valid"
     *
     * Test ID: "enum::enum with [true] does not match [1]::[true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_304() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            true
                        ]
                    ]
                }
            """,
            true,
            """enum with [true] does not match [1] -> [true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [true] does not match [1] -> [1] is invalid"
     *
     * Test ID: "enum::enum with [true] does not match [1]::[1] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_305() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            true
                        ]
                    ]
                }
            """,
            false,
            """enum with [true] does not match [1] -> [1] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [true] does not match [1] -> [1.0] is invalid"
     *
     * Test ID: "enum::enum with [true] does not match [1]::[1.0] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_306() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            true
                        ]
                    ]
                }
            """,
            false,
            """enum with [true] does not match [1] -> [1.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 0 does not match false -> false is invalid"
     *
     * Test ID: "enum::enum with 0 does not match false::false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_307() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        0
                    ]
                }
            """,
            false,
            """enum with 0 does not match false -> false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 0 does not match false -> integer zero is valid"
     *
     * Test ID: "enum::enum with 0 does not match false::integer zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_308() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        0
                    ]
                }
            """,
            true,
            """enum with 0 does not match false -> integer zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 0 does not match false -> float zero is valid"
     *
     * Test ID: "enum::enum with 0 does not match false::float zero is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_309() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        0
                    ]
                }
            """,
            true,
            """enum with 0 does not match false -> float zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [0] does not match [false] -> [false] is invalid"
     *
     * Test ID: "enum::enum with [0] does not match [false]::[false] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_310() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            0
                        ]
                    ]
                }
            """,
            false,
            """enum with [0] does not match [false] -> [false] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [0] does not match [false] -> [0] is valid"
     *
     * Test ID: "enum::enum with [0] does not match [false]::[0] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_311() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            0
                        ]
                    ]
                }
            """,
            true,
            """enum with [0] does not match [false] -> [0] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [0] does not match [false] -> [0.0] is valid"
     *
     * Test ID: "enum::enum with [0] does not match [false]::[0.0] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_312() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            0
                        ]
                    ]
                }
            """,
            true,
            """enum with [0] does not match [false] -> [0.0] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 1 does not match true -> true is invalid"
     *
     * Test ID: "enum::enum with 1 does not match true::true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_313() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1
                    ]
                }
            """,
            false,
            """enum with 1 does not match true -> true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 1 does not match true -> integer one is valid"
     *
     * Test ID: "enum::enum with 1 does not match true::integer one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_314() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1
                    ]
                }
            """,
            true,
            """enum with 1 does not match true -> integer one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with 1 does not match true -> float one is valid"
     *
     * Test ID: "enum::enum with 1 does not match true::float one is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_315() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        1
                    ]
                }
            """,
            true,
            """enum with 1 does not match true -> float one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [1] does not match [true] -> [true] is invalid"
     *
     * Test ID: "enum::enum with [1] does not match [true]::[true] is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_316() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            1
                        ]
                    ]
                }
            """,
            false,
            """enum with [1] does not match [true] -> [true] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [1] does not match [true] -> [1] is valid"
     *
     * Test ID: "enum::enum with [1] does not match [true]::[1] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_317() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            1
                        ]
                    ]
                }
            """,
            true,
            """enum with [1] does not match [true] -> [1] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "enum with [1] does not match [true] -> [1.0] is valid"
     *
     * Test ID: "enum::enum with [1] does not match [true]::[1.0] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_318() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        [
                            1
                        ]
                    ]
                }
            """,
            true,
            """enum with [1] does not match [true] -> [1.0] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "nul characters in strings -> match string with nul"
     *
     * Test ID: "enum::nul characters in strings::match string with nul"
     */
    @Test
    fun jsonSchemaSuiteTest_319() {
        
        assertKsonEnforcesSchema(
            """
                "hello\u0000there"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "hello\u0000there"
                    ]
                }
            """,
            true,
            """nul characters in strings -> match string with nul""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/enum.json`:
     *     "nul characters in strings -> do not match string lacking nul"
     *
     * Test ID: "enum::nul characters in strings::do not match string lacking nul"
     */
    @Test
    fun jsonSchemaSuiteTest_320() {
        
        assertKsonEnforcesSchema(
            """
                "hellothere"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "enum": [
                        "hello\u0000there"
                    ]
                }
            """,
            false,
            """nul characters in strings -> do not match string lacking nul""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> below the exclusiveMaximum is valid"
     *
     * Test ID: "exclusiveMaximum::exclusiveMaximum validation::below the exclusiveMaximum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_321() {
        
        assertKsonEnforcesSchema(
            """
                2.2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMaximum": 3.0
                }
            """,
            true,
            """exclusiveMaximum validation -> below the exclusiveMaximum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> boundary point is invalid"
     *
     * Test ID: "exclusiveMaximum::exclusiveMaximum validation::boundary point is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_322() {
        
        assertKsonEnforcesSchema(
            """
                3.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMaximum": 3.0
                }
            """,
            false,
            """exclusiveMaximum validation -> boundary point is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> above the exclusiveMaximum is invalid"
     *
     * Test ID: "exclusiveMaximum::exclusiveMaximum validation::above the exclusiveMaximum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_323() {
        
        assertKsonEnforcesSchema(
            """
                3.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMaximum": 3.0
                }
            """,
            false,
            """exclusiveMaximum validation -> above the exclusiveMaximum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> ignores non-numbers"
     *
     * Test ID: "exclusiveMaximum::exclusiveMaximum validation::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_324() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMaximum": 3.0
                }
            """,
            true,
            """exclusiveMaximum validation -> ignores non-numbers""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> above the exclusiveMinimum is valid"
     *
     * Test ID: "exclusiveMinimum::exclusiveMinimum validation::above the exclusiveMinimum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_325() {
        
        assertKsonEnforcesSchema(
            """
                1.2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMinimum": 1.1
                }
            """,
            true,
            """exclusiveMinimum validation -> above the exclusiveMinimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> boundary point is invalid"
     *
     * Test ID: "exclusiveMinimum::exclusiveMinimum validation::boundary point is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_326() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMinimum": 1.1
                }
            """,
            false,
            """exclusiveMinimum validation -> boundary point is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> below the exclusiveMinimum is invalid"
     *
     * Test ID: "exclusiveMinimum::exclusiveMinimum validation::below the exclusiveMinimum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_327() {
        
        assertKsonEnforcesSchema(
            """
                0.6
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMinimum": 1.1
                }
            """,
            false,
            """exclusiveMinimum validation -> below the exclusiveMinimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> ignores non-numbers"
     *
     * Test ID: "exclusiveMinimum::exclusiveMinimum validation::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_328() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "exclusiveMinimum": 1.1
                }
            """,
            true,
            """exclusiveMinimum validation -> ignores non-numbers""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore integers"
     *
     * Test ID: "format::email format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_329() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """email format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore floats"
     *
     * Test ID: "format::email format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_330() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """email format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore objects"
     *
     * Test ID: "format::email format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_331() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """email format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore arrays"
     *
     * Test ID: "format::email format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_332() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """email format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore booleans"
     *
     * Test ID: "format::email format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_333() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """email format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> all string formats ignore nulls"
     *
     * Test ID: "format::email format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_334() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """email format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "email format -> invalid email string is only an annotation by default"
     *
     * Test ID: "format::email format::invalid email string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_335() {
        
        assertKsonEnforcesSchema(
            """
                "2962"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "email"
                }
            """,
            true,
            """email format -> invalid email string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore integers"
     *
     * Test ID: "format::idn-email format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_336() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """idn-email format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore floats"
     *
     * Test ID: "format::idn-email format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_337() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """idn-email format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore objects"
     *
     * Test ID: "format::idn-email format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_338() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """idn-email format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore arrays"
     *
     * Test ID: "format::idn-email format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_339() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """idn-email format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore booleans"
     *
     * Test ID: "format::idn-email format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_340() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """idn-email format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> all string formats ignore nulls"
     *
     * Test ID: "format::idn-email format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_341() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """idn-email format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-email format -> invalid idn-email string is only an annotation by default"
     *
     * Test ID: "format::idn-email format::invalid idn-email string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_342() {
        
        assertKsonEnforcesSchema(
            """
                "2962"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-email"
                }
            """,
            true,
            """idn-email format -> invalid idn-email string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore integers"
     *
     * Test ID: "format::regex format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_343() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """regex format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore floats"
     *
     * Test ID: "format::regex format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_344() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """regex format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore objects"
     *
     * Test ID: "format::regex format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_345() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """regex format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore arrays"
     *
     * Test ID: "format::regex format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_346() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """regex format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore booleans"
     *
     * Test ID: "format::regex format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_347() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """regex format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> all string formats ignore nulls"
     *
     * Test ID: "format::regex format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_348() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """regex format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "regex format -> invalid regex string is only an annotation by default"
     *
     * Test ID: "format::regex format::invalid regex string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_349() {
        
        assertKsonEnforcesSchema(
            """
                "^(abc]"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "regex"
                }
            """,
            true,
            """regex format -> invalid regex string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore integers"
     *
     * Test ID: "format::ipv4 format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_350() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """ipv4 format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore floats"
     *
     * Test ID: "format::ipv4 format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_351() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """ipv4 format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore objects"
     *
     * Test ID: "format::ipv4 format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_352() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """ipv4 format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore arrays"
     *
     * Test ID: "format::ipv4 format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_353() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """ipv4 format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore booleans"
     *
     * Test ID: "format::ipv4 format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_354() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """ipv4 format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> all string formats ignore nulls"
     *
     * Test ID: "format::ipv4 format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_355() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """ipv4 format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv4 format -> invalid ipv4 string is only an annotation by default"
     *
     * Test ID: "format::ipv4 format::invalid ipv4 string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_356() {
        
        assertKsonEnforcesSchema(
            """
                "127.0.0.0.1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv4"
                }
            """,
            true,
            """ipv4 format -> invalid ipv4 string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore integers"
     *
     * Test ID: "format::ipv6 format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_357() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """ipv6 format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore floats"
     *
     * Test ID: "format::ipv6 format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_358() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """ipv6 format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore objects"
     *
     * Test ID: "format::ipv6 format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_359() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """ipv6 format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore arrays"
     *
     * Test ID: "format::ipv6 format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_360() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """ipv6 format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore booleans"
     *
     * Test ID: "format::ipv6 format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_361() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """ipv6 format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> all string formats ignore nulls"
     *
     * Test ID: "format::ipv6 format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_362() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """ipv6 format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "ipv6 format -> invalid ipv6 string is only an annotation by default"
     *
     * Test ID: "format::ipv6 format::invalid ipv6 string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_363() {
        
        assertKsonEnforcesSchema(
            """
                "12345::"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "ipv6"
                }
            """,
            true,
            """ipv6 format -> invalid ipv6 string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore integers"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_364() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """idn-hostname format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore floats"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_365() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """idn-hostname format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore objects"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_366() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """idn-hostname format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore arrays"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_367() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """idn-hostname format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore booleans"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_368() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """idn-hostname format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> all string formats ignore nulls"
     *
     * Test ID: "format::idn-hostname format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_369() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """idn-hostname format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "idn-hostname format -> invalid idn-hostname string is only an annotation by default"
     *
     * Test ID: "format::idn-hostname format::invalid idn-hostname string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_370() {
        
        assertKsonEnforcesSchema(
            """
                "〮실례.테스트"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "idn-hostname"
                }
            """,
            true,
            """idn-hostname format -> invalid idn-hostname string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore integers"
     *
     * Test ID: "format::hostname format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_371() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """hostname format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore floats"
     *
     * Test ID: "format::hostname format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_372() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """hostname format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore objects"
     *
     * Test ID: "format::hostname format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_373() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """hostname format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore arrays"
     *
     * Test ID: "format::hostname format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_374() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """hostname format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore booleans"
     *
     * Test ID: "format::hostname format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_375() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """hostname format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> all string formats ignore nulls"
     *
     * Test ID: "format::hostname format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_376() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """hostname format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "hostname format -> invalid hostname string is only an annotation by default"
     *
     * Test ID: "format::hostname format::invalid hostname string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_377() {
        
        assertKsonEnforcesSchema(
            """
                "-a-host-name-that-starts-with--"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "hostname"
                }
            """,
            true,
            """hostname format -> invalid hostname string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore integers"
     *
     * Test ID: "format::date format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_378() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """date format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore floats"
     *
     * Test ID: "format::date format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_379() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """date format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore objects"
     *
     * Test ID: "format::date format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_380() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """date format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore arrays"
     *
     * Test ID: "format::date format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_381() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """date format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore booleans"
     *
     * Test ID: "format::date format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_382() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """date format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> all string formats ignore nulls"
     *
     * Test ID: "format::date format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_383() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """date format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date format -> invalid date string is only an annotation by default"
     *
     * Test ID: "format::date format::invalid date string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_384() {
        
        assertKsonEnforcesSchema(
            """
                "06/19/1963"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date"
                }
            """,
            true,
            """date format -> invalid date string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore integers"
     *
     * Test ID: "format::date-time format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_385() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """date-time format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore floats"
     *
     * Test ID: "format::date-time format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_386() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """date-time format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore objects"
     *
     * Test ID: "format::date-time format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_387() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """date-time format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore arrays"
     *
     * Test ID: "format::date-time format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_388() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """date-time format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore booleans"
     *
     * Test ID: "format::date-time format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_389() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """date-time format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> all string formats ignore nulls"
     *
     * Test ID: "format::date-time format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_390() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """date-time format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "date-time format -> invalid date-time string is only an annotation by default"
     *
     * Test ID: "format::date-time format::invalid date-time string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_391() {
        
        assertKsonEnforcesSchema(
            """
                "1990-02-31T15:59:60.123-08:00"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "date-time"
                }
            """,
            true,
            """date-time format -> invalid date-time string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore integers"
     *
     * Test ID: "format::time format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_392() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """time format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore floats"
     *
     * Test ID: "format::time format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_393() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """time format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore objects"
     *
     * Test ID: "format::time format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_394() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """time format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore arrays"
     *
     * Test ID: "format::time format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_395() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """time format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore booleans"
     *
     * Test ID: "format::time format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_396() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """time format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> all string formats ignore nulls"
     *
     * Test ID: "format::time format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_397() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """time format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "time format -> invalid time string is only an annotation by default"
     *
     * Test ID: "format::time format::invalid time string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_398() {
        
        assertKsonEnforcesSchema(
            """
                "08:30:06 PST"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "time"
                }
            """,
            true,
            """time format -> invalid time string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore integers"
     *
     * Test ID: "format::json-pointer format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_399() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """json-pointer format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore floats"
     *
     * Test ID: "format::json-pointer format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_400() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """json-pointer format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore objects"
     *
     * Test ID: "format::json-pointer format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_401() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """json-pointer format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore arrays"
     *
     * Test ID: "format::json-pointer format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_402() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """json-pointer format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore booleans"
     *
     * Test ID: "format::json-pointer format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_403() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """json-pointer format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> all string formats ignore nulls"
     *
     * Test ID: "format::json-pointer format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_404() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """json-pointer format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "json-pointer format -> invalid json-pointer string is only an annotation by default"
     *
     * Test ID: "format::json-pointer format::invalid json-pointer string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_405() {
        
        assertKsonEnforcesSchema(
            """
                "/foo/bar~"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "json-pointer"
                }
            """,
            true,
            """json-pointer format -> invalid json-pointer string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore integers"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_406() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """relative-json-pointer format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore floats"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_407() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """relative-json-pointer format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore objects"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_408() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """relative-json-pointer format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore arrays"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_409() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """relative-json-pointer format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore booleans"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_410() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """relative-json-pointer format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> all string formats ignore nulls"
     *
     * Test ID: "format::relative-json-pointer format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_411() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """relative-json-pointer format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "relative-json-pointer format -> invalid relative-json-pointer string is only an annotation by default"
     *
     * Test ID: "format::relative-json-pointer format::invalid relative-json-pointer string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_412() {
        
        assertKsonEnforcesSchema(
            """
                "/foo/bar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "relative-json-pointer"
                }
            """,
            true,
            """relative-json-pointer format -> invalid relative-json-pointer string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore integers"
     *
     * Test ID: "format::iri format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_413() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """iri format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore floats"
     *
     * Test ID: "format::iri format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_414() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """iri format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore objects"
     *
     * Test ID: "format::iri format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_415() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """iri format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore arrays"
     *
     * Test ID: "format::iri format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_416() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """iri format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore booleans"
     *
     * Test ID: "format::iri format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_417() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """iri format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> all string formats ignore nulls"
     *
     * Test ID: "format::iri format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_418() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """iri format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri format -> invalid iri string is only an annotation by default"
     *
     * Test ID: "format::iri format::invalid iri string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_419() {
        
        assertKsonEnforcesSchema(
            """
                "http://2001:0db8:85a3:0000:0000:8a2e:0370:7334"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri"
                }
            """,
            true,
            """iri format -> invalid iri string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore integers"
     *
     * Test ID: "format::iri-reference format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_420() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """iri-reference format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore floats"
     *
     * Test ID: "format::iri-reference format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_421() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """iri-reference format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore objects"
     *
     * Test ID: "format::iri-reference format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_422() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """iri-reference format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore arrays"
     *
     * Test ID: "format::iri-reference format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_423() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """iri-reference format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore booleans"
     *
     * Test ID: "format::iri-reference format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_424() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """iri-reference format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> all string formats ignore nulls"
     *
     * Test ID: "format::iri-reference format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_425() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """iri-reference format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "iri-reference format -> invalid iri-reference string is only an annotation by default"
     *
     * Test ID: "format::iri-reference format::invalid iri-reference string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_426() {
        
        assertKsonEnforcesSchema(
            """
                "\\\\WINDOWS\\filëßåré"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "iri-reference"
                }
            """,
            true,
            """iri-reference format -> invalid iri-reference string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore integers"
     *
     * Test ID: "format::uri format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_427() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """uri format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore floats"
     *
     * Test ID: "format::uri format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_428() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """uri format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore objects"
     *
     * Test ID: "format::uri format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_429() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """uri format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_430() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """uri format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_431() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """uri format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_432() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """uri format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri format -> invalid uri string is only an annotation by default"
     *
     * Test ID: "format::uri format::invalid uri string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_433() {
        
        assertKsonEnforcesSchema(
            """
                "//foo.bar/?baz=qux#quux"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri"
                }
            """,
            true,
            """uri format -> invalid uri string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore integers"
     *
     * Test ID: "format::uri-reference format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_434() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """uri-reference format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore floats"
     *
     * Test ID: "format::uri-reference format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_435() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """uri-reference format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore objects"
     *
     * Test ID: "format::uri-reference format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_436() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """uri-reference format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri-reference format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_437() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """uri-reference format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri-reference format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_438() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """uri-reference format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri-reference format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_439() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """uri-reference format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-reference format -> invalid uri-reference string is only an annotation by default"
     *
     * Test ID: "format::uri-reference format::invalid uri-reference string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_440() {
        
        assertKsonEnforcesSchema(
            """
                "\\\\WINDOWS\\fileshare"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-reference"
                }
            """,
            true,
            """uri-reference format -> invalid uri-reference string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore integers"
     *
     * Test ID: "format::uri-template format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_441() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """uri-template format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore floats"
     *
     * Test ID: "format::uri-template format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_442() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """uri-template format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore objects"
     *
     * Test ID: "format::uri-template format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_443() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """uri-template format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore arrays"
     *
     * Test ID: "format::uri-template format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_444() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """uri-template format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore booleans"
     *
     * Test ID: "format::uri-template format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_445() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """uri-template format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> all string formats ignore nulls"
     *
     * Test ID: "format::uri-template format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_446() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """uri-template format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uri-template format -> invalid uri-template string is only an annotation by default"
     *
     * Test ID: "format::uri-template format::invalid uri-template string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_447() {
        
        assertKsonEnforcesSchema(
            """
                "http://example.com/dictionary/{term:1}/{term"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uri-template"
                }
            """,
            true,
            """uri-template format -> invalid uri-template string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore integers"
     *
     * Test ID: "format::uuid format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_448() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """uuid format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore floats"
     *
     * Test ID: "format::uuid format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_449() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """uuid format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore objects"
     *
     * Test ID: "format::uuid format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_450() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """uuid format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore arrays"
     *
     * Test ID: "format::uuid format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_451() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """uuid format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore booleans"
     *
     * Test ID: "format::uuid format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_452() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """uuid format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> all string formats ignore nulls"
     *
     * Test ID: "format::uuid format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_453() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """uuid format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "uuid format -> invalid uuid string is only an annotation by default"
     *
     * Test ID: "format::uuid format::invalid uuid string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_454() {
        
        assertKsonEnforcesSchema(
            """
                "2eb8aa08-aa98-11ea-b4aa-73b441d1638"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "uuid"
                }
            """,
            true,
            """uuid format -> invalid uuid string is only an annotation by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore integers"
     *
     * Test ID: "format::duration format::all string formats ignore integers"
     */
    @Test
    fun jsonSchemaSuiteTest_455() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """duration format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore floats"
     *
     * Test ID: "format::duration format::all string formats ignore floats"
     */
    @Test
    fun jsonSchemaSuiteTest_456() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """duration format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore objects"
     *
     * Test ID: "format::duration format::all string formats ignore objects"
     */
    @Test
    fun jsonSchemaSuiteTest_457() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """duration format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore arrays"
     *
     * Test ID: "format::duration format::all string formats ignore arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_458() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """duration format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore booleans"
     *
     * Test ID: "format::duration format::all string formats ignore booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_459() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """duration format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> all string formats ignore nulls"
     *
     * Test ID: "format::duration format::all string formats ignore nulls"
     */
    @Test
    fun jsonSchemaSuiteTest_460() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """duration format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/format.json`:
     *     "duration format -> invalid duration string is only an annotation by default"
     *
     * Test ID: "format::duration format::invalid duration string is only an annotation by default"
     */
    @Test
    fun jsonSchemaSuiteTest_461() {
        
        assertKsonEnforcesSchema(
            """
                "PT1D"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "format": "duration"
                }
            """,
            true,
            """duration format -> invalid duration string is only an annotation by default""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "ignore if without then or else -> valid when valid against lone if"
     *
     * Test ID: "if-then-else::ignore if without then or else::valid when valid against lone if"
     */
    @Test
    fun jsonSchemaSuiteTest_462() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "const": 0
                    }
                }
            """,
            true,
            """ignore if without then or else -> valid when valid against lone if""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "ignore if without then or else -> valid when invalid against lone if"
     *
     * Test ID: "if-then-else::ignore if without then or else::valid when invalid against lone if"
     */
    @Test
    fun jsonSchemaSuiteTest_463() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "const": 0
                    }
                }
            """,
            true,
            """ignore if without then or else -> valid when invalid against lone if""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "ignore then without if -> valid when valid against lone then"
     *
     * Test ID: "if-then-else::ignore then without if::valid when valid against lone then"
     */
    @Test
    fun jsonSchemaSuiteTest_464() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "then": {
                        "const": 0
                    }
                }
            """,
            true,
            """ignore then without if -> valid when valid against lone then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "ignore then without if -> valid when invalid against lone then"
     *
     * Test ID: "if-then-else::ignore then without if::valid when invalid against lone then"
     */
    @Test
    fun jsonSchemaSuiteTest_465() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "then": {
                        "const": 0
                    }
                }
            """,
            true,
            """ignore then without if -> valid when invalid against lone then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "ignore else without if -> valid when valid against lone else"
     *
     * Test ID: "if-then-else::ignore else without if::valid when valid against lone else"
     */
    @Test
    fun jsonSchemaSuiteTest_466() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "else": {
                        "const": 0
                    }
                }
            """,
            true,
            """ignore else without if -> valid when valid against lone else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "ignore else without if -> valid when invalid against lone else"
     *
     * Test ID: "if-then-else::ignore else without if::valid when invalid against lone else"
     */
    @Test
    fun jsonSchemaSuiteTest_467() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "else": {
                        "const": 0
                    }
                }
            """,
            true,
            """ignore else without if -> valid when invalid against lone else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if and then without else -> valid through then"
     *
     * Test ID: "if-then-else::if and then without else::valid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_468() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    }
                }
            """,
            true,
            """if and then without else -> valid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if and then without else -> invalid through then"
     *
     * Test ID: "if-then-else::if and then without else::invalid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_469() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    }
                }
            """,
            false,
            """if and then without else -> invalid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if and then without else -> valid when if test fails"
     *
     * Test ID: "if-then-else::if and then without else::valid when if test fails"
     */
    @Test
    fun jsonSchemaSuiteTest_470() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    }
                }
            """,
            true,
            """if and then without else -> valid when if test fails""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if and else without then -> valid when if test passes"
     *
     * Test ID: "if-then-else::if and else without then::valid when if test passes"
     */
    @Test
    fun jsonSchemaSuiteTest_471() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """if and else without then -> valid when if test passes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if and else without then -> valid through else"
     *
     * Test ID: "if-then-else::if and else without then::valid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_472() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """if and else without then -> valid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if and else without then -> invalid through else"
     *
     * Test ID: "if-then-else::if and else without then::invalid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_473() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            false,
            """if and else without then -> invalid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "validate against correct branch, then vs else -> valid through then"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::valid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_474() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """validate against correct branch, then vs else -> valid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "validate against correct branch, then vs else -> invalid through then"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::invalid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_475() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            false,
            """validate against correct branch, then vs else -> invalid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "validate against correct branch, then vs else -> valid through else"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::valid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_476() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """validate against correct branch, then vs else -> valid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "validate against correct branch, then vs else -> invalid through else"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::invalid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_477() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            false,
            """validate against correct branch, then vs else -> invalid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "non-interference across combined schemas -> valid, but would have been invalid through then"
     *
     * Test ID: "if-then-else::non-interference across combined schemas::valid, but would have been invalid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_478() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "if": {
                                "exclusiveMaximum": 0
                            }
                        },
                        {
                            "then": {
                                "minimum": -10
                            }
                        },
                        {
                            "else": {
                                "multipleOf": 2
                            }
                        }
                    ]
                }
            """,
            true,
            """non-interference across combined schemas -> valid, but would have been invalid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "non-interference across combined schemas -> valid, but would have been invalid through else"
     *
     * Test ID: "if-then-else::non-interference across combined schemas::valid, but would have been invalid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_479() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "if": {
                                "exclusiveMaximum": 0
                            }
                        },
                        {
                            "then": {
                                "minimum": -10
                            }
                        },
                        {
                            "else": {
                                "multipleOf": 2
                            }
                        }
                    ]
                }
            """,
            true,
            """non-interference across combined schemas -> valid, but would have been invalid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if with boolean schema true -> boolean schema true in if always chooses the then path (valid)"
     *
     * Test ID: "if-then-else::if with boolean schema true::boolean schema true in if always chooses the then path (valid)"
     */
    @Test
    fun jsonSchemaSuiteTest_480() {
        
        assertKsonEnforcesSchema(
            """
                "then"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": true,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            true,
            """if with boolean schema true -> boolean schema true in if always chooses the then path (valid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if with boolean schema true -> boolean schema true in if always chooses the then path (invalid)"
     *
     * Test ID: "if-then-else::if with boolean schema true::boolean schema true in if always chooses the then path (invalid)"
     */
    @Test
    fun jsonSchemaSuiteTest_481() {
        
        assertKsonEnforcesSchema(
            """
                "else"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": true,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            false,
            """if with boolean schema true -> boolean schema true in if always chooses the then path (invalid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if with boolean schema false -> boolean schema false in if always chooses the else path (invalid)"
     *
     * Test ID: "if-then-else::if with boolean schema false::boolean schema false in if always chooses the else path (invalid)"
     */
    @Test
    fun jsonSchemaSuiteTest_482() {
        
        assertKsonEnforcesSchema(
            """
                "then"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": false,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            false,
            """if with boolean schema false -> boolean schema false in if always chooses the else path (invalid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if with boolean schema false -> boolean schema false in if always chooses the else path (valid)"
     *
     * Test ID: "if-then-else::if with boolean schema false::boolean schema false in if always chooses the else path (valid)"
     */
    @Test
    fun jsonSchemaSuiteTest_483() {
        
        assertKsonEnforcesSchema(
            """
                "else"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": false,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            true,
            """if with boolean schema false -> boolean schema false in if always chooses the else path (valid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> yes redirects to then and passes"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::yes redirects to then and passes"
     */
    @Test
    fun jsonSchemaSuiteTest_484() {
        
        assertKsonEnforcesSchema(
            """
                "yes"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            true,
            """if appears at the end when serialized (keyword processing sequence) -> yes redirects to then and passes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> other redirects to else and passes"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::other redirects to else and passes"
     */
    @Test
    fun jsonSchemaSuiteTest_485() {
        
        assertKsonEnforcesSchema(
            """
                "other"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            true,
            """if appears at the end when serialized (keyword processing sequence) -> other redirects to else and passes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> no redirects to then and fails"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::no redirects to then and fails"
     */
    @Test
    fun jsonSchemaSuiteTest_486() {
        
        assertKsonEnforcesSchema(
            """
                "no"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            false,
            """if appears at the end when serialized (keyword processing sequence) -> no redirects to then and fails""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> invalid redirects to else and fails"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::invalid redirects to else and fails"
     */
    @Test
    fun jsonSchemaSuiteTest_487() {
        
        assertKsonEnforcesSchema(
            """
                "invalid"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            false,
            """if appears at the end when serialized (keyword processing sequence) -> invalid redirects to else and fails""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/infinite-loop-detection.json`:
     *     "evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> passing case"
     *
     * Test ID: "infinite-loop-detection::evaluating the same schema location against the same data location twice is not a sign of an infinite loop::passing case"
     */
    @Test
    fun jsonSchemaSuiteTest_488() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "int": {
                            "type": "integer"
                        }
                    },
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "${'$'}ref": "#/${'$'}defs/int"
                                }
                            }
                        },
                        {
                            "additionalProperties": {
                                "${'$'}ref": "#/${'$'}defs/int"
                            }
                        }
                    ]
                }
            """,
            true,
            """evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> passing case""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/infinite-loop-detection.json`:
     *     "evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> failing case"
     *
     * Test ID: "infinite-loop-detection::evaluating the same schema location against the same data location twice is not a sign of an infinite loop::failing case"
     */
    @Test
    fun jsonSchemaSuiteTest_489() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "a string"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "int": {
                            "type": "integer"
                        }
                    },
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "${'$'}ref": "#/${'$'}defs/int"
                                }
                            }
                        },
                        {
                            "additionalProperties": {
                                "${'$'}ref": "#/${'$'}defs/int"
                            }
                        }
                    ]
                }
            """,
            false,
            """evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> failing case""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> valid items"
     *
     * Test ID: "items::a schema given for items::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_490() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """a schema given for items -> valid items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> wrong type of items"
     *
     * Test ID: "items::a schema given for items::wrong type of items"
     */
    @Test
    fun jsonSchemaSuiteTest_491() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "x"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """a schema given for items -> wrong type of items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> ignores non-arrays"
     *
     * Test ID: "items::a schema given for items::ignores non-arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_492() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """a schema given for items -> ignores non-arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "a schema given for items -> JavaScript pseudo-array is valid"
     *
     * Test ID: "items::a schema given for items::JavaScript pseudo-array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_493() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "0": "invalid",
                    "length": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """a schema given for items -> JavaScript pseudo-array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (true) -> any array is valid"
     *
     * Test ID: "items::items with boolean schema (true)::any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_494() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": true
                }
            """,
            true,
            """items with boolean schema (true) -> any array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (true) -> empty array is valid"
     *
     * Test ID: "items::items with boolean schema (true)::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_495() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": true
                }
            """,
            true,
            """items with boolean schema (true) -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (false) -> any non-empty array is invalid"
     *
     * Test ID: "items::items with boolean schema (false)::any non-empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_496() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": false
                }
            """,
            false,
            """items with boolean schema (false) -> any non-empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with boolean schema (false) -> empty array is valid"
     *
     * Test ID: "items::items with boolean schema (false)::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_497() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": false
                }
            """,
            true,
            """items with boolean schema (false) -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> valid items"
     *
     * Test ID: "items::items and subitems::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_498() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            true,
            """items and subitems -> valid items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> too many items"
     *
     * Test ID: "items::items and subitems::too many items"
     */
    @Test
    fun jsonSchemaSuiteTest_499() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """items and subitems -> too many items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> too many sub-items"
     *
     * Test ID: "items::items and subitems::too many sub-items"
     */
    @Test
    fun jsonSchemaSuiteTest_500() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """items and subitems -> too many sub-items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> wrong item"
     *
     * Test ID: "items::items and subitems::wrong item"
     */
    @Test
    fun jsonSchemaSuiteTest_501() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": null
                    },
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """items and subitems -> wrong item""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> wrong sub-item"
     *
     * Test ID: "items::items and subitems::wrong sub-item"
     */
    @Test
    fun jsonSchemaSuiteTest_502() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            false,
            """items and subitems -> wrong sub-item""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items and subitems -> fewer items is valid"
     *
     * Test ID: "items::items and subitems::fewer items is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_503() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "item": {
                            "type": "array",
                            "items": false,
                            "prefixItems": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/${'$'}defs/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "items": false,
                    "prefixItems": [
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        },
                        {
                            "${'$'}ref": "#/${'$'}defs/item"
                        }
                    ]
                }
            """,
            true,
            """items and subitems -> fewer items is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "nested items -> valid nested array"
     *
     * Test ID: "items::nested items::valid nested array"
     */
    @Test
    fun jsonSchemaSuiteTest_504() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            [
                                1
                            ]
                        ],
                        [
                            [
                                2
                            ],
                            [
                                3
                            ]
                        ]
                    ],
                    [
                        [
                            [
                                4
                            ],
                            [
                                5
                            ],
                            [
                                6
                            ]
                        ]
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """nested items -> valid nested array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "nested items -> nested array with invalid type"
     *
     * Test ID: "items::nested items::nested array with invalid type"
     */
    @Test
    fun jsonSchemaSuiteTest_505() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            [
                                "1"
                            ]
                        ],
                        [
                            [
                                2
                            ],
                            [
                                3
                            ]
                        ]
                    ],
                    [
                        [
                            [
                                4
                            ],
                            [
                                5
                            ],
                            [
                                6
                            ]
                        ]
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """nested items -> nested array with invalid type""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "nested items -> not deep enough"
     *
     * Test ID: "items::nested items::not deep enough"
     */
    @Test
    fun jsonSchemaSuiteTest_506() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ],
                    [
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ]
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """nested items -> not deep enough""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> empty array"
     *
     * Test ID: "items::prefixItems with no additional items allowed::empty array"
     */
    @Test
    fun jsonSchemaSuiteTest_507() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """prefixItems with no additional items allowed -> empty array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> fewer number of items present (1)"
     *
     * Test ID: "items::prefixItems with no additional items allowed::fewer number of items present (1)"
     */
    @Test
    fun jsonSchemaSuiteTest_508() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """prefixItems with no additional items allowed -> fewer number of items present (1)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> fewer number of items present (2)"
     *
     * Test ID: "items::prefixItems with no additional items allowed::fewer number of items present (2)"
     */
    @Test
    fun jsonSchemaSuiteTest_509() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """prefixItems with no additional items allowed -> fewer number of items present (2)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> equal number of items present"
     *
     * Test ID: "items::prefixItems with no additional items allowed::equal number of items present"
     */
    @Test
    fun jsonSchemaSuiteTest_510() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """prefixItems with no additional items allowed -> equal number of items present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems with no additional items allowed -> additional items are not permitted"
     *
     * Test ID: "items::prefixItems with no additional items allowed::additional items are not permitted"
     */
    @Test
    fun jsonSchemaSuiteTest_511() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "items": false
                }
            """,
            false,
            """prefixItems with no additional items allowed -> additional items are not permitted""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items does not look in applicators, valid case -> prefixItems in allOf does not constrain items, invalid case"
     *
     * Test ID: "items::items does not look in applicators, valid case::prefixItems in allOf does not constrain items, invalid case"
     */
    @Test
    fun jsonSchemaSuiteTest_512() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "minimum": 3
                                }
                            ]
                        }
                    ],
                    "items": {
                        "minimum": 5
                    }
                }
            """,
            false,
            """items does not look in applicators, valid case -> prefixItems in allOf does not constrain items, invalid case""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items does not look in applicators, valid case -> prefixItems in allOf does not constrain items, valid case"
     *
     * Test ID: "items::items does not look in applicators, valid case::prefixItems in allOf does not constrain items, valid case"
     */
    @Test
    fun jsonSchemaSuiteTest_513() {
        
        assertKsonEnforcesSchema(
            """
                [
                    5,
                    5
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "minimum": 3
                                }
                            ]
                        }
                    ],
                    "items": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """items does not look in applicators, valid case -> prefixItems in allOf does not constrain items, valid case""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems validation adjusts the starting index for items -> valid items"
     *
     * Test ID: "items::prefixItems validation adjusts the starting index for items::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_514() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "x",
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """prefixItems validation adjusts the starting index for items -> valid items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "prefixItems validation adjusts the starting index for items -> wrong type of second item"
     *
     * Test ID: "items::prefixItems validation adjusts the starting index for items::wrong type of second item"
     */
    @Test
    fun jsonSchemaSuiteTest_515() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "x",
                    "y"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """prefixItems validation adjusts the starting index for items -> wrong type of second item""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with heterogeneous array -> heterogeneous invalid instance"
     *
     * Test ID: "items::items with heterogeneous array::heterogeneous invalid instance"
     */
    @Test
    fun jsonSchemaSuiteTest_516() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    37
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        }
                    ],
                    "items": false
                }
            """,
            false,
            """items with heterogeneous array -> heterogeneous invalid instance""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with heterogeneous array -> valid instance"
     *
     * Test ID: "items::items with heterogeneous array::valid instance"
     */
    @Test
    fun jsonSchemaSuiteTest_517() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                        }
                    ],
                    "items": false
                }
            """,
            true,
            """items with heterogeneous array -> valid instance""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/items.json`:
     *     "items with null instance elements -> allows null elements"
     *
     * Test ID: "items::items with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_518() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "null"
                    }
                }
            """,
            true,
            """items with null instance elements -> allows null elements""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains without contains is ignored -> one item valid against lone maxContains"
     *
     * Test ID: "maxContains::maxContains without contains is ignored::one item valid against lone maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_519() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxContains": 1
                }
            """,
            true,
            """maxContains without contains is ignored -> one item valid against lone maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains without contains is ignored -> two items still valid against lone maxContains"
     *
     * Test ID: "maxContains::maxContains without contains is ignored::two items still valid against lone maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_520() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxContains": 1
                }
            """,
            true,
            """maxContains without contains is ignored -> two items still valid against lone maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> empty data"
     *
     * Test ID: "maxContains::maxContains with contains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_521() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            false,
            """maxContains with contains -> empty data""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> all elements match, valid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::all elements match, valid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_522() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            true,
            """maxContains with contains -> all elements match, valid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> all elements match, invalid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::all elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_523() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            false,
            """maxContains with contains -> all elements match, invalid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> some elements match, valid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::some elements match, valid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_524() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            true,
            """maxContains with contains -> some elements match, valid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains -> some elements match, invalid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains::some elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_525() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1
                }
            """,
            false,
            """maxContains with contains -> some elements match, invalid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains, value with a decimal -> one element matches, valid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains, value with a decimal::one element matches, valid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_526() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1.0
                }
            """,
            true,
            """maxContains with contains, value with a decimal -> one element matches, valid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "maxContains with contains, value with a decimal -> too many elements match, invalid maxContains"
     *
     * Test ID: "maxContains::maxContains with contains, value with a decimal::too many elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_527() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1.0
                }
            """,
            false,
            """maxContains with contains, value with a decimal -> too many elements match, invalid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "minContains < maxContains -> actual < minContains < maxContains"
     *
     * Test ID: "maxContains::minContains < maxContains::actual < minContains < maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_528() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1,
                    "maxContains": 3
                }
            """,
            false,
            """minContains < maxContains -> actual < minContains < maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "minContains < maxContains -> minContains < actual < maxContains"
     *
     * Test ID: "maxContains::minContains < maxContains::minContains < actual < maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_529() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1,
                    "maxContains": 3
                }
            """,
            true,
            """minContains < maxContains -> minContains < actual < maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxContains.json`:
     *     "minContains < maxContains -> minContains < maxContains < actual"
     *
     * Test ID: "maxContains::minContains < maxContains::minContains < maxContains < actual"
     */
    @Test
    fun jsonSchemaSuiteTest_530() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1,
                    "maxContains": 3
                }
            """,
            false,
            """minContains < maxContains -> minContains < maxContains < actual""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxItems.json`:
     *     "maxItems validation -> shorter is valid"
     *
     * Test ID: "maxItems::maxItems validation::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_531() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxItems": 2
                }
            """,
            true,
            """maxItems validation -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxItems.json`:
     *     "maxItems validation -> exact length is valid"
     *
     * Test ID: "maxItems::maxItems validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_532() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxItems": 2
                }
            """,
            true,
            """maxItems validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxItems.json`:
     *     "maxItems validation -> too long is invalid"
     *
     * Test ID: "maxItems::maxItems validation::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_533() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxItems": 2
                }
            """,
            false,
            """maxItems validation -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxItems.json`:
     *     "maxItems validation -> ignores non-arrays"
     *
     * Test ID: "maxItems::maxItems validation::ignores non-arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_534() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxItems": 2
                }
            """,
            true,
            """maxItems validation -> ignores non-arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxItems.json`:
     *     "maxItems validation with a decimal -> shorter is valid"
     *
     * Test ID: "maxItems::maxItems validation with a decimal::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_535() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxItems": 2.0
                }
            """,
            true,
            """maxItems validation with a decimal -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxItems.json`:
     *     "maxItems validation with a decimal -> too long is invalid"
     *
     * Test ID: "maxItems::maxItems validation with a decimal::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_536() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxItems": 2.0
                }
            """,
            false,
            """maxItems validation with a decimal -> too long is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> shorter is valid"
     *
     * Test ID: "maxLength::maxLength validation::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_537() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """maxLength validation -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> exact length is valid"
     *
     * Test ID: "maxLength::maxLength validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_538() {
        
        assertKsonEnforcesSchema(
            """
                "fo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """maxLength validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> too long is invalid"
     *
     * Test ID: "maxLength::maxLength validation::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_539() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            false,
            """maxLength validation -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> ignores non-strings"
     *
     * Test ID: "maxLength::maxLength validation::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_540() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """maxLength validation -> ignores non-strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation -> two graphemes is long enough"
     *
     * Test ID: "maxLength::maxLength validation::two graphemes is long enough"
     */
    @Test
    fun jsonSchemaSuiteTest_541() {
        
        assertKsonEnforcesSchema(
            """
                "💩💩"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2
                }
            """,
            true,
            """maxLength validation -> two graphemes is long enough""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation with a decimal -> shorter is valid"
     *
     * Test ID: "maxLength::maxLength validation with a decimal::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_542() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2.0
                }
            """,
            true,
            """maxLength validation with a decimal -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxLength.json`:
     *     "maxLength validation with a decimal -> too long is invalid"
     *
     * Test ID: "maxLength::maxLength validation with a decimal::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_543() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxLength": 2.0
                }
            """,
            false,
            """maxLength validation with a decimal -> too long is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation -> shorter is valid"
     *
     * Test ID: "maxProperties::maxProperties validation::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_544() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2
                }
            """,
            true,
            """maxProperties validation -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation -> exact length is valid"
     *
     * Test ID: "maxProperties::maxProperties validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_545() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2
                }
            """,
            true,
            """maxProperties validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation -> too long is invalid"
     *
     * Test ID: "maxProperties::maxProperties validation::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_546() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "baz": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2
                }
            """,
            false,
            """maxProperties validation -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation -> ignores arrays"
     *
     * Test ID: "maxProperties::maxProperties validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_547() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2
                }
            """,
            true,
            """maxProperties validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation -> ignores strings"
     *
     * Test ID: "maxProperties::maxProperties validation::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_548() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2
                }
            """,
            true,
            """maxProperties validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation -> ignores other non-objects"
     *
     * Test ID: "maxProperties::maxProperties validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_549() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2
                }
            """,
            true,
            """maxProperties validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation with a decimal -> shorter is valid"
     *
     * Test ID: "maxProperties::maxProperties validation with a decimal::shorter is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_550() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2.0
                }
            """,
            true,
            """maxProperties validation with a decimal -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties validation with a decimal -> too long is invalid"
     *
     * Test ID: "maxProperties::maxProperties validation with a decimal::too long is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_551() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "baz": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 2.0
                }
            """,
            false,
            """maxProperties validation with a decimal -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties = 0 means the object is empty -> no properties is valid"
     *
     * Test ID: "maxProperties::maxProperties = 0 means the object is empty::no properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_552() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 0
                }
            """,
            true,
            """maxProperties = 0 means the object is empty -> no properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maxProperties.json`:
     *     "maxProperties = 0 means the object is empty -> one property is invalid"
     *
     * Test ID: "maxProperties::maxProperties = 0 means the object is empty::one property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_553() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maxProperties": 0
                }
            """,
            false,
            """maxProperties = 0 means the object is empty -> one property is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation -> below the maximum is valid"
     *
     * Test ID: "maximum::maximum validation::below the maximum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_554() {
        
        assertKsonEnforcesSchema(
            """
                2.6
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 3.0
                }
            """,
            true,
            """maximum validation -> below the maximum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation -> boundary point is valid"
     *
     * Test ID: "maximum::maximum validation::boundary point is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_555() {
        
        assertKsonEnforcesSchema(
            """
                3.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 3.0
                }
            """,
            true,
            """maximum validation -> boundary point is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation -> above the maximum is invalid"
     *
     * Test ID: "maximum::maximum validation::above the maximum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_556() {
        
        assertKsonEnforcesSchema(
            """
                3.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 3.0
                }
            """,
            false,
            """maximum validation -> above the maximum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation -> ignores non-numbers"
     *
     * Test ID: "maximum::maximum validation::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_557() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 3.0
                }
            """,
            true,
            """maximum validation -> ignores non-numbers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation with unsigned integer -> below the maximum is invalid"
     *
     * Test ID: "maximum::maximum validation with unsigned integer::below the maximum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_558() {
        
        assertKsonEnforcesSchema(
            """
                299.97
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 300
                }
            """,
            true,
            """maximum validation with unsigned integer -> below the maximum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation with unsigned integer -> boundary point integer is valid"
     *
     * Test ID: "maximum::maximum validation with unsigned integer::boundary point integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_559() {
        
        assertKsonEnforcesSchema(
            """
                300
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 300
                }
            """,
            true,
            """maximum validation with unsigned integer -> boundary point integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation with unsigned integer -> boundary point float is valid"
     *
     * Test ID: "maximum::maximum validation with unsigned integer::boundary point float is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_560() {
        
        assertKsonEnforcesSchema(
            """
                300.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 300
                }
            """,
            true,
            """maximum validation with unsigned integer -> boundary point float is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/maximum.json`:
     *     "maximum validation with unsigned integer -> above the maximum is invalid"
     *
     * Test ID: "maximum::maximum validation with unsigned integer::above the maximum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_561() {
        
        assertKsonEnforcesSchema(
            """
                300.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "maximum": 300
                }
            """,
            false,
            """maximum validation with unsigned integer -> above the maximum is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains without contains is ignored -> one item valid against lone minContains"
     *
     * Test ID: "minContains::minContains without contains is ignored::one item valid against lone minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_562() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minContains": 1
                }
            """,
            true,
            """minContains without contains is ignored -> one item valid against lone minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains without contains is ignored -> zero items still valid against lone minContains"
     *
     * Test ID: "minContains::minContains without contains is ignored::zero items still valid against lone minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_563() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minContains": 1
                }
            """,
            true,
            """minContains without contains is ignored -> zero items still valid against lone minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> empty data"
     *
     * Test ID: "minContains::minContains=1 with contains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_564() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            false,
            """minContains=1 with contains -> empty data""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> no elements match"
     *
     * Test ID: "minContains::minContains=1 with contains::no elements match"
     */
    @Test
    fun jsonSchemaSuiteTest_565() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            false,
            """minContains=1 with contains -> no elements match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> single element matches, valid minContains"
     *
     * Test ID: "minContains::minContains=1 with contains::single element matches, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_566() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            true,
            """minContains=1 with contains -> single element matches, valid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> some elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=1 with contains::some elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_567() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            true,
            """minContains=1 with contains -> some elements match, valid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> all elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=1 with contains::all elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_568() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            true,
            """minContains=1 with contains -> all elements match, valid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> empty data"
     *
     * Test ID: "minContains::minContains=2 with contains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_569() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            false,
            """minContains=2 with contains -> empty data""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> all elements match, invalid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains::all elements match, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_570() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            false,
            """minContains=2 with contains -> all elements match, invalid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> some elements match, invalid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains::some elements match, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_571() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            false,
            """minContains=2 with contains -> some elements match, invalid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> all elements match, valid minContains (exactly as needed)"
     *
     * Test ID: "minContains::minContains=2 with contains::all elements match, valid minContains (exactly as needed)"
     */
    @Test
    fun jsonSchemaSuiteTest_572() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            true,
            """minContains=2 with contains -> all elements match, valid minContains (exactly as needed)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> all elements match, valid minContains (more than needed)"
     *
     * Test ID: "minContains::minContains=2 with contains::all elements match, valid minContains (more than needed)"
     */
    @Test
    fun jsonSchemaSuiteTest_573() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            true,
            """minContains=2 with contains -> all elements match, valid minContains (more than needed)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> some elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains::some elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_574() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            true,
            """minContains=2 with contains -> some elements match, valid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains with a decimal value -> one element matches, invalid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains with a decimal value::one element matches, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_575() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2.0
                }
            """,
            false,
            """minContains=2 with contains with a decimal value -> one element matches, invalid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains with a decimal value -> both elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains with a decimal value::both elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_576() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2.0
                }
            """,
            true,
            """minContains=2 with contains with a decimal value -> both elements match, valid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> empty data"
     *
     * Test ID: "minContains::maxContains = minContains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_577() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            false,
            """maxContains = minContains -> empty data""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> all elements match, invalid minContains"
     *
     * Test ID: "minContains::maxContains = minContains::all elements match, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_578() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            false,
            """maxContains = minContains -> all elements match, invalid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> all elements match, invalid maxContains"
     *
     * Test ID: "minContains::maxContains = minContains::all elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_579() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            false,
            """maxContains = minContains -> all elements match, invalid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> all elements match, valid maxContains and minContains"
     *
     * Test ID: "minContains::maxContains = minContains::all elements match, valid maxContains and minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_580() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            true,
            """maxContains = minContains -> all elements match, valid maxContains and minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> empty data"
     *
     * Test ID: "minContains::maxContains < minContains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_581() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """maxContains < minContains -> empty data""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> invalid minContains"
     *
     * Test ID: "minContains::maxContains < minContains::invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_582() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """maxContains < minContains -> invalid minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> invalid maxContains"
     *
     * Test ID: "minContains::maxContains < minContains::invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_583() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """maxContains < minContains -> invalid maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> invalid maxContains and minContains"
     *
     * Test ID: "minContains::maxContains < minContains::invalid maxContains and minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_584() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """maxContains < minContains -> invalid maxContains and minContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 -> empty data"
     *
     * Test ID: "minContains::minContains = 0::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_585() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0
                }
            """,
            true,
            """minContains = 0 -> empty data""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 -> minContains = 0 makes contains always pass"
     *
     * Test ID: "minContains::minContains = 0::minContains = 0 makes contains always pass"
     */
    @Test
    fun jsonSchemaSuiteTest_586() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0
                }
            """,
            true,
            """minContains = 0 -> minContains = 0 makes contains always pass""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 with maxContains -> empty data"
     *
     * Test ID: "minContains::minContains = 0 with maxContains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_587() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0,
                    "maxContains": 1
                }
            """,
            true,
            """minContains = 0 with maxContains -> empty data""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 with maxContains -> not more than maxContains"
     *
     * Test ID: "minContains::minContains = 0 with maxContains::not more than maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_588() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0,
                    "maxContains": 1
                }
            """,
            true,
            """minContains = 0 with maxContains -> not more than maxContains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 with maxContains -> too many"
     *
     * Test ID: "minContains::minContains = 0 with maxContains::too many"
     */
    @Test
    fun jsonSchemaSuiteTest_589() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0,
                    "maxContains": 1
                }
            """,
            false,
            """minContains = 0 with maxContains -> too many""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minItems.json`:
     *     "minItems validation -> longer is valid"
     *
     * Test ID: "minItems::minItems validation::longer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_590() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minItems": 1
                }
            """,
            true,
            """minItems validation -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minItems.json`:
     *     "minItems validation -> exact length is valid"
     *
     * Test ID: "minItems::minItems validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_591() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minItems": 1
                }
            """,
            true,
            """minItems validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minItems.json`:
     *     "minItems validation -> too short is invalid"
     *
     * Test ID: "minItems::minItems validation::too short is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_592() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minItems": 1
                }
            """,
            false,
            """minItems validation -> too short is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minItems.json`:
     *     "minItems validation -> ignores non-arrays"
     *
     * Test ID: "minItems::minItems validation::ignores non-arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_593() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minItems": 1
                }
            """,
            true,
            """minItems validation -> ignores non-arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minItems.json`:
     *     "minItems validation with a decimal -> longer is valid"
     *
     * Test ID: "minItems::minItems validation with a decimal::longer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_594() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minItems": 1.0
                }
            """,
            true,
            """minItems validation with a decimal -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minItems.json`:
     *     "minItems validation with a decimal -> too short is invalid"
     *
     * Test ID: "minItems::minItems validation with a decimal::too short is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_595() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minItems": 1.0
                }
            """,
            false,
            """minItems validation with a decimal -> too short is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minLength.json`:
     *     "minLength validation -> longer is valid"
     *
     * Test ID: "minLength::minLength validation::longer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_596() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minLength": 2
                }
            """,
            true,
            """minLength validation -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minLength.json`:
     *     "minLength validation -> exact length is valid"
     *
     * Test ID: "minLength::minLength validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_597() {
        
        assertKsonEnforcesSchema(
            """
                "fo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minLength": 2
                }
            """,
            true,
            """minLength validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minLength.json`:
     *     "minLength validation -> too short is invalid"
     *
     * Test ID: "minLength::minLength validation::too short is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_598() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minLength": 2
                }
            """,
            false,
            """minLength validation -> too short is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minLength.json`:
     *     "minLength validation -> ignores non-strings"
     *
     * Test ID: "minLength::minLength validation::ignores non-strings"
     */
    @Test
    fun jsonSchemaSuiteTest_599() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minLength": 2
                }
            """,
            true,
            """minLength validation -> ignores non-strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minLength.json`:
     *     "minLength validation -> one grapheme is not long enough"
     *
     * Test ID: "minLength::minLength validation::one grapheme is not long enough"
     */
    @Test
    fun jsonSchemaSuiteTest_600() {
        
        assertKsonEnforcesSchema(
            """
                "💩"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minLength": 2
                }
            """,
            false,
            """minLength validation -> one grapheme is not long enough""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minLength.json`:
     *     "minLength validation with a decimal -> longer is valid"
     *
     * Test ID: "minLength::minLength validation with a decimal::longer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_601() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minLength": 2.0
                }
            """,
            true,
            """minLength validation with a decimal -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minLength.json`:
     *     "minLength validation with a decimal -> too short is invalid"
     *
     * Test ID: "minLength::minLength validation with a decimal::too short is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_602() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minLength": 2.0
                }
            """,
            false,
            """minLength validation with a decimal -> too short is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation -> longer is valid"
     *
     * Test ID: "minProperties::minProperties validation::longer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_603() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1
                }
            """,
            true,
            """minProperties validation -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation -> exact length is valid"
     *
     * Test ID: "minProperties::minProperties validation::exact length is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_604() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1
                }
            """,
            true,
            """minProperties validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation -> too short is invalid"
     *
     * Test ID: "minProperties::minProperties validation::too short is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_605() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1
                }
            """,
            false,
            """minProperties validation -> too short is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation -> ignores arrays"
     *
     * Test ID: "minProperties::minProperties validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_606() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1
                }
            """,
            true,
            """minProperties validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation -> ignores strings"
     *
     * Test ID: "minProperties::minProperties validation::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_607() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1
                }
            """,
            true,
            """minProperties validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation -> ignores other non-objects"
     *
     * Test ID: "minProperties::minProperties validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_608() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1
                }
            """,
            true,
            """minProperties validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation with a decimal -> longer is valid"
     *
     * Test ID: "minProperties::minProperties validation with a decimal::longer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_609() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1.0
                }
            """,
            true,
            """minProperties validation with a decimal -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minProperties.json`:
     *     "minProperties validation with a decimal -> too short is invalid"
     *
     * Test ID: "minProperties::minProperties validation with a decimal::too short is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_610() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minProperties": 1.0
                }
            """,
            false,
            """minProperties validation with a decimal -> too short is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation -> above the minimum is valid"
     *
     * Test ID: "minimum::minimum validation::above the minimum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_611() {
        
        assertKsonEnforcesSchema(
            """
                2.6
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": 1.1
                }
            """,
            true,
            """minimum validation -> above the minimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation -> boundary point is valid"
     *
     * Test ID: "minimum::minimum validation::boundary point is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_612() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": 1.1
                }
            """,
            true,
            """minimum validation -> boundary point is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation -> below the minimum is invalid"
     *
     * Test ID: "minimum::minimum validation::below the minimum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_613() {
        
        assertKsonEnforcesSchema(
            """
                0.6
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": 1.1
                }
            """,
            false,
            """minimum validation -> below the minimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation -> ignores non-numbers"
     *
     * Test ID: "minimum::minimum validation::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_614() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": 1.1
                }
            """,
            true,
            """minimum validation -> ignores non-numbers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation with signed integer -> negative above the minimum is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::negative above the minimum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_615() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": -2
                }
            """,
            true,
            """minimum validation with signed integer -> negative above the minimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation with signed integer -> positive above the minimum is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::positive above the minimum is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_616() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": -2
                }
            """,
            true,
            """minimum validation with signed integer -> positive above the minimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation with signed integer -> boundary point is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::boundary point is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_617() {
        
        assertKsonEnforcesSchema(
            """
                -2
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": -2
                }
            """,
            true,
            """minimum validation with signed integer -> boundary point is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation with signed integer -> boundary point with float is valid"
     *
     * Test ID: "minimum::minimum validation with signed integer::boundary point with float is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_618() {
        
        assertKsonEnforcesSchema(
            """
                -2.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": -2
                }
            """,
            true,
            """minimum validation with signed integer -> boundary point with float is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation with signed integer -> float below the minimum is invalid"
     *
     * Test ID: "minimum::minimum validation with signed integer::float below the minimum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_619() {
        
        assertKsonEnforcesSchema(
            """
                -2.0001
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": -2
                }
            """,
            false,
            """minimum validation with signed integer -> float below the minimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation with signed integer -> int below the minimum is invalid"
     *
     * Test ID: "minimum::minimum validation with signed integer::int below the minimum is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_620() {
        
        assertKsonEnforcesSchema(
            """
                -3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": -2
                }
            """,
            false,
            """minimum validation with signed integer -> int below the minimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minimum.json`:
     *     "minimum validation with signed integer -> ignores non-numbers"
     *
     * Test ID: "minimum::minimum validation with signed integer::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_621() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minimum": -2
                }
            """,
            true,
            """minimum validation with signed integer -> ignores non-numbers""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by int -> int by int"
     *
     * Test ID: "multipleOf::by int::int by int"
     */
    @Test
    fun jsonSchemaSuiteTest_622() {
        
        assertKsonEnforcesSchema(
            """
                10
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 2
                }
            """,
            true,
            """by int -> int by int""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by int -> int by int fail"
     *
     * Test ID: "multipleOf::by int::int by int fail"
     */
    @Test
    fun jsonSchemaSuiteTest_623() {
        
        assertKsonEnforcesSchema(
            """
                7
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 2
                }
            """,
            false,
            """by int -> int by int fail""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by int -> ignores non-numbers"
     *
     * Test ID: "multipleOf::by int::ignores non-numbers"
     */
    @Test
    fun jsonSchemaSuiteTest_624() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 2
                }
            """,
            true,
            """by int -> ignores non-numbers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by number -> zero is multiple of anything"
     *
     * Test ID: "multipleOf::by number::zero is multiple of anything"
     */
    @Test
    fun jsonSchemaSuiteTest_625() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 1.5
                }
            """,
            true,
            """by number -> zero is multiple of anything""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by number -> 4.5 is multiple of 1.5"
     *
     * Test ID: "multipleOf::by number::4.5 is multiple of 1.5"
     */
    @Test
    fun jsonSchemaSuiteTest_626() {
        
        assertKsonEnforcesSchema(
            """
                4.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 1.5
                }
            """,
            true,
            """by number -> 4.5 is multiple of 1.5""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by number -> 35 is not multiple of 1.5"
     *
     * Test ID: "multipleOf::by number::35 is not multiple of 1.5"
     */
    @Test
    fun jsonSchemaSuiteTest_627() {
        
        assertKsonEnforcesSchema(
            """
                35
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 1.5
                }
            """,
            false,
            """by number -> 35 is not multiple of 1.5""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by small number -> 0.0075 is multiple of 0.0001"
     *
     * Test ID: "multipleOf::by small number::0.0075 is multiple of 0.0001"
     */
    @Test
    fun jsonSchemaSuiteTest_628() {
        
        assertKsonEnforcesSchema(
            """
                0.0075
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 1.0E-4
                }
            """,
            true,
            """by small number -> 0.0075 is multiple of 0.0001""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "by small number -> 0.00751 is not multiple of 0.0001"
     *
     * Test ID: "multipleOf::by small number::0.00751 is not multiple of 0.0001"
     */
    @Test
    fun jsonSchemaSuiteTest_629() {
        
        assertKsonEnforcesSchema(
            """
                0.00751
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "multipleOf": 1.0E-4
                }
            """,
            false,
            """by small number -> 0.00751 is not multiple of 0.0001""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "float division = inf -> always invalid, but naive implementations may raise an overflow error"
     *
     * Test ID: "multipleOf::float division = inf::always invalid, but naive implementations may raise an overflow error"
     */
    @Test
    fun jsonSchemaSuiteTest_630() {
        
        assertKsonEnforcesSchema(
            """
                1.0E308
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer",
                    "multipleOf": 0.123456789
                }
            """,
            false,
            """float division = inf -> always invalid, but naive implementations may raise an overflow error""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/multipleOf.json`:
     *     "small multiple of large integer -> any integer is a multiple of 1e-8"
     *
     * Test ID: "multipleOf::small multiple of large integer::any integer is a multiple of 1e-8"
     */
    @Test
    fun jsonSchemaSuiteTest_631() {
        
        assertKsonEnforcesSchema(
            """
                12391239123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer",
                    "multipleOf": 1.0E-8
                }
            """,
            true,
            """small multiple of large integer -> any integer is a multiple of 1e-8""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not -> allowed"
     *
     * Test ID: "not::not::allowed"
     */
    @Test
    fun jsonSchemaSuiteTest_632() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """not -> allowed""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not -> disallowed"
     *
     * Test ID: "not::not::disallowed"
     */
    @Test
    fun jsonSchemaSuiteTest_633() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """not -> disallowed""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not multiple types -> valid"
     *
     * Test ID: "not::not multiple types::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_634() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": [
                            "integer",
                            "boolean"
                        ]
                    }
                }
            """,
            true,
            """not multiple types -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not multiple types -> mismatch"
     *
     * Test ID: "not::not multiple types::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_635() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": [
                            "integer",
                            "boolean"
                        ]
                    }
                }
            """,
            false,
            """not multiple types -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not multiple types -> other mismatch"
     *
     * Test ID: "not::not multiple types::other mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_636() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": [
                            "integer",
                            "boolean"
                        ]
                    }
                }
            """,
            false,
            """not multiple types -> other mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not more complex schema -> match"
     *
     * Test ID: "not::not more complex schema::match"
     */
    @Test
    fun jsonSchemaSuiteTest_637() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": "object",
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """not more complex schema -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not more complex schema -> other match"
     *
     * Test ID: "not::not more complex schema::other match"
     */
    @Test
    fun jsonSchemaSuiteTest_638() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": "object",
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            true,
            """not more complex schema -> other match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "not more complex schema -> mismatch"
     *
     * Test ID: "not::not more complex schema::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_639() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "type": "object",
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    }
                }
            """,
            false,
            """not more complex schema -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbidden property -> property present"
     *
     * Test ID: "not::forbidden property::property present"
     */
    @Test
    fun jsonSchemaSuiteTest_640() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "not": {
                            }
                        }
                    }
                }
            """,
            false,
            """forbidden property -> property present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbidden property -> property absent"
     *
     * Test ID: "not::forbidden property::property absent"
     */
    @Test
    fun jsonSchemaSuiteTest_641() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1,
                    "baz": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "not": {
                            }
                        }
                    }
                }
            """,
            true,
            """forbidden property -> property absent""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> number is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_642() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> string is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_643() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> boolean true is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::boolean true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_644() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> boolean true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> boolean false is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::boolean false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_645() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> boolean false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> null is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_646() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> object is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_647() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> empty object is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_648() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> array is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_649() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with empty schema -> empty array is invalid"
     *
     * Test ID: "not::forbid everything with empty schema::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_650() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                    }
                }
            """,
            false,
            """forbid everything with empty schema -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> number is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_651() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> string is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_652() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> boolean true is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::boolean true is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_653() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> boolean true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> boolean false is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::boolean false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_654() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> boolean false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> null is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_655() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> object is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_656() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> empty object is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::empty object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_657() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> array is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_658() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "forbid everything with boolean schema true -> empty array is invalid"
     *
     * Test ID: "not::forbid everything with boolean schema true::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_659() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": true
                }
            """,
            false,
            """forbid everything with boolean schema true -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> number is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_660() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> string is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_661() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> boolean true is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::boolean true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_662() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> boolean true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> boolean false is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::boolean false is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_663() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> boolean false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> null is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_664() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> object is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_665() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> empty object is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_666() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> array is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_667() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "allow everything with boolean schema false -> empty array is valid"
     *
     * Test ID: "not::allow everything with boolean schema false::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_668() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": false
                }
            """,
            true,
            """allow everything with boolean schema false -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "double negation -> any value is valid"
     *
     * Test ID: "not::double negation::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_669() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "not": {
                        }
                    }
                }
            """,
            true,
            """double negation -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "collect annotations inside a 'not', even if collection is disabled -> unevaluated property"
     *
     * Test ID: "not::collect annotations inside a 'not', even if collection is disabled::unevaluated property"
     */
    @Test
    fun jsonSchemaSuiteTest_670() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "${'$'}comment": "this subschema must still produce annotations internally, even though the 'not' will ultimately discard them",
                        "anyOf": [
                            true,
                            {
                                "properties": {
                                    "foo": true
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                }
            """,
            true,
            """collect annotations inside a 'not', even if collection is disabled -> unevaluated property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/not.json`:
     *     "collect annotations inside a 'not', even if collection is disabled -> annotations are still collected inside a 'not'"
     *
     * Test ID: "not::collect annotations inside a 'not', even if collection is disabled::annotations are still collected inside a 'not'"
     */
    @Test
    fun jsonSchemaSuiteTest_671() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "not": {
                        "${'$'}comment": "this subschema must still produce annotations internally, even though the 'not' will ultimately discard them",
                        "anyOf": [
                            true,
                            {
                                "properties": {
                                    "foo": true
                                }
                            }
                        ],
                        "unevaluatedProperties": false
                    }
                }
            """,
            false,
            """collect annotations inside a 'not', even if collection is disabled -> annotations are still collected inside a 'not'""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf -> first oneOf valid"
     *
     * Test ID: "oneOf::oneOf::first oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_672() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """oneOf -> first oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf -> second oneOf valid"
     *
     * Test ID: "oneOf::oneOf::second oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_673() {
        
        assertKsonEnforcesSchema(
            """
                2.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            true,
            """oneOf -> second oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf -> both oneOf valid"
     *
     * Test ID: "oneOf::oneOf::both oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_674() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            false,
            """oneOf -> both oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf -> neither oneOf valid"
     *
     * Test ID: "oneOf::oneOf::neither oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_675() {
        
        assertKsonEnforcesSchema(
            """
                1.5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "minimum": 2
                        }
                    ]
                }
            """,
            false,
            """oneOf -> neither oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with base schema -> mismatch base schema"
     *
     * Test ID: "oneOf::oneOf with base schema::mismatch base schema"
     */
    @Test
    fun jsonSchemaSuiteTest_676() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string",
                    "oneOf": [
                        {
                            "minLength": 2
                        },
                        {
                            "maxLength": 4
                        }
                    ]
                }
            """,
            false,
            """oneOf with base schema -> mismatch base schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with base schema -> one oneOf valid"
     *
     * Test ID: "oneOf::oneOf with base schema::one oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_677() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string",
                    "oneOf": [
                        {
                            "minLength": 2
                        },
                        {
                            "maxLength": 4
                        }
                    ]
                }
            """,
            true,
            """oneOf with base schema -> one oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with base schema -> both oneOf valid"
     *
     * Test ID: "oneOf::oneOf with base schema::both oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_678() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string",
                    "oneOf": [
                        {
                            "minLength": 2
                        },
                        {
                            "maxLength": 4
                        }
                    ]
                }
            """,
            false,
            """oneOf with base schema -> both oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with boolean schemas, all true -> any value is invalid"
     *
     * Test ID: "oneOf::oneOf with boolean schemas, all true::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_679() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        true,
                        true,
                        true
                    ]
                }
            """,
            false,
            """oneOf with boolean schemas, all true -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with boolean schemas, one true -> any value is valid"
     *
     * Test ID: "oneOf::oneOf with boolean schemas, one true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_680() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        true,
                        false,
                        false
                    ]
                }
            """,
            true,
            """oneOf with boolean schemas, one true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with boolean schemas, more than one true -> any value is invalid"
     *
     * Test ID: "oneOf::oneOf with boolean schemas, more than one true::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_681() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        true,
                        true,
                        false
                    ]
                }
            """,
            false,
            """oneOf with boolean schemas, more than one true -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with boolean schemas, all false -> any value is invalid"
     *
     * Test ID: "oneOf::oneOf with boolean schemas, all false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_682() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        false,
                        false,
                        false
                    ]
                }
            """,
            false,
            """oneOf with boolean schemas, all false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf complex types -> first oneOf valid (complex)"
     *
     * Test ID: "oneOf::oneOf complex types::first oneOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_683() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """oneOf complex types -> first oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf complex types -> second oneOf valid (complex)"
     *
     * Test ID: "oneOf::oneOf complex types::second oneOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_684() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """oneOf complex types -> second oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf complex types -> both oneOf valid (complex)"
     *
     * Test ID: "oneOf::oneOf complex types::both oneOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_685() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "baz",
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """oneOf complex types -> both oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf complex types -> neither oneOf valid (complex)"
     *
     * Test ID: "oneOf::oneOf complex types::neither oneOf valid (complex)"
     */
    @Test
    fun jsonSchemaSuiteTest_686() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 2,
                    "bar": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """oneOf complex types -> neither oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with empty schema -> one valid - valid"
     *
     * Test ID: "oneOf::oneOf with empty schema::one valid - valid"
     */
    @Test
    fun jsonSchemaSuiteTest_687() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            true,
            """oneOf with empty schema -> one valid - valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with empty schema -> both valid - invalid"
     *
     * Test ID: "oneOf::oneOf with empty schema::both valid - invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_688() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "type": "number"
                        },
                        {
                        }
                    ]
                }
            """,
            false,
            """oneOf with empty schema -> both valid - invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with required -> both invalid - invalid"
     *
     * Test ID: "oneOf::oneOf with required::both invalid - invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_689() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "oneOf": [
                        {
                            "required": [
                                "foo",
                                "bar"
                            ]
                        },
                        {
                            "required": [
                                "foo",
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """oneOf with required -> both invalid - invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with required -> first valid - valid"
     *
     * Test ID: "oneOf::oneOf with required::first valid - valid"
     */
    @Test
    fun jsonSchemaSuiteTest_690() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "oneOf": [
                        {
                            "required": [
                                "foo",
                                "bar"
                            ]
                        },
                        {
                            "required": [
                                "foo",
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            true,
            """oneOf with required -> first valid - valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with required -> second valid - valid"
     *
     * Test ID: "oneOf::oneOf with required::second valid - valid"
     */
    @Test
    fun jsonSchemaSuiteTest_691() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "baz": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "oneOf": [
                        {
                            "required": [
                                "foo",
                                "bar"
                            ]
                        },
                        {
                            "required": [
                                "foo",
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            true,
            """oneOf with required -> second valid - valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with required -> both valid - invalid"
     *
     * Test ID: "oneOf::oneOf with required::both valid - invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_692() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2,
                    "baz": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "oneOf": [
                        {
                            "required": [
                                "foo",
                                "bar"
                            ]
                        },
                        {
                            "required": [
                                "foo",
                                "baz"
                            ]
                        }
                    ]
                }
            """,
            false,
            """oneOf with required -> both valid - invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with missing optional property -> first oneOf valid"
     *
     * Test ID: "oneOf::oneOf with missing optional property::first oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_693() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 8
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": true,
                                "baz": true
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": true
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """oneOf with missing optional property -> first oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with missing optional property -> second oneOf valid"
     *
     * Test ID: "oneOf::oneOf with missing optional property::second oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_694() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": true,
                                "baz": true
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": true
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            true,
            """oneOf with missing optional property -> second oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with missing optional property -> both oneOf valid"
     *
     * Test ID: "oneOf::oneOf with missing optional property::both oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_695() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": 8
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": true,
                                "baz": true
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": true
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """oneOf with missing optional property -> both oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "oneOf with missing optional property -> neither oneOf valid"
     *
     * Test ID: "oneOf::oneOf with missing optional property::neither oneOf valid"
     */
    @Test
    fun jsonSchemaSuiteTest_696() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "properties": {
                                "bar": true,
                                "baz": true
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "foo": true
                            },
                            "required": [
                                "foo"
                            ]
                        }
                    ]
                }
            """,
            false,
            """oneOf with missing optional property -> neither oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "nested oneOf, to check validation semantics -> null is valid"
     *
     * Test ID: "oneOf::nested oneOf, to check validation semantics::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_697() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "oneOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            true,
            """nested oneOf, to check validation semantics -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/oneOf.json`:
     *     "nested oneOf, to check validation semantics -> anything non-null is invalid"
     *
     * Test ID: "oneOf::nested oneOf, to check validation semantics::anything non-null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_698() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "oneOf": [
                        {
                            "oneOf": [
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ]
                }
            """,
            false,
            """nested oneOf, to check validation semantics -> anything non-null is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> a matching pattern is valid"
     *
     * Test ID: "pattern::pattern validation::a matching pattern is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_699() {
        
        assertKsonEnforcesSchema(
            """
                "aaa"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """pattern validation -> a matching pattern is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> a non-matching pattern is invalid"
     *
     * Test ID: "pattern::pattern validation::a non-matching pattern is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_700() {
        
        assertKsonEnforcesSchema(
            """
                "abc"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            false,
            """pattern validation -> a non-matching pattern is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> ignores booleans"
     *
     * Test ID: "pattern::pattern validation::ignores booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_701() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """pattern validation -> ignores booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> ignores integers"
     *
     * Test ID: "pattern::pattern validation::ignores integers"
     */
    @Test
    fun jsonSchemaSuiteTest_702() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """pattern validation -> ignores integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> ignores floats"
     *
     * Test ID: "pattern::pattern validation::ignores floats"
     */
    @Test
    fun jsonSchemaSuiteTest_703() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """pattern validation -> ignores floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> ignores objects"
     *
     * Test ID: "pattern::pattern validation::ignores objects"
     */
    @Test
    fun jsonSchemaSuiteTest_704() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """pattern validation -> ignores objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> ignores arrays"
     *
     * Test ID: "pattern::pattern validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_705() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """pattern validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern validation -> ignores null"
     *
     * Test ID: "pattern::pattern validation::ignores null"
     */
    @Test
    fun jsonSchemaSuiteTest_706() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "^a*${'$'}"
                }
            """,
            true,
            """pattern validation -> ignores null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/pattern.json`:
     *     "pattern is not anchored -> matches a substring"
     *
     * Test ID: "pattern::pattern is not anchored::matches a substring"
     */
    @Test
    fun jsonSchemaSuiteTest_707() {
        
        assertKsonEnforcesSchema(
            """
                "xxaayy"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "pattern": "a+"
                }
            """,
            true,
            """pattern is not anchored -> matches a substring""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> a single valid match is valid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::a single valid match is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_708() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """patternProperties validates properties matching a regex -> a single valid match is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> multiple valid matches is valid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::multiple valid matches is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_709() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "foooooo": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """patternProperties validates properties matching a regex -> multiple valid matches is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> a single invalid match is invalid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::a single invalid match is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_710() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar",
                    "fooooo": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """patternProperties validates properties matching a regex -> a single invalid match is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> multiple invalid matches is invalid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::multiple invalid matches is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_711() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar",
                    "foooooo": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """patternProperties validates properties matching a regex -> multiple invalid matches is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores arrays"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_712() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """patternProperties validates properties matching a regex -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores strings"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_713() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """patternProperties validates properties matching a regex -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores other non-objects"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_714() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """patternProperties validates properties matching a regex -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> a single valid match is valid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::a single valid match is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_715() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 21
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            true,
            """multiple simultaneous patternProperties are validated -> a single valid match is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> a simultaneous match is valid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::a simultaneous match is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_716() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "aaaa": 18
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            true,
            """multiple simultaneous patternProperties are validated -> a simultaneous match is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> multiple matches is valid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::multiple matches is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_717() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 21,
                    "aaaa": 18
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            true,
            """multiple simultaneous patternProperties are validated -> multiple matches is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to one is invalid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_718() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            false,
            """multiple simultaneous patternProperties are validated -> an invalid due to one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to the other is invalid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to the other is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_719() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "aaaa": 31
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            false,
            """multiple simultaneous patternProperties are validated -> an invalid due to the other is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to both is invalid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to both is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_720() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "aaa": "foo",
                    "aaaa": 31
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            false,
            """multiple simultaneous patternProperties are validated -> an invalid due to both is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> non recognized members are ignored"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::non recognized members are ignored"
     */
    @Test
    fun jsonSchemaSuiteTest_721() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "answer 1": "42"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """regexes are not anchored by default and are case sensitive -> non recognized members are ignored""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> recognized members are accounted for"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::recognized members are accounted for"
     */
    @Test
    fun jsonSchemaSuiteTest_722() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a31b": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """regexes are not anchored by default and are case sensitive -> recognized members are accounted for""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> regexes are case sensitive"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::regexes are case sensitive"
     */
    @Test
    fun jsonSchemaSuiteTest_723() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a_x_3": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """regexes are not anchored by default and are case sensitive -> regexes are case sensitive""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> regexes are case sensitive, 2"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::regexes are case sensitive, 2"
     */
    @Test
    fun jsonSchemaSuiteTest_724() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a_X_3": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """regexes are not anchored by default and are case sensitive -> regexes are case sensitive, 2""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with property matching schema true is valid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with property matching schema true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_725() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            true,
            """patternProperties with boolean schemas -> object with property matching schema true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with property matching schema false is invalid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with property matching schema false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_726() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            false,
            """patternProperties with boolean schemas -> object with property matching schema false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with both properties is invalid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with both properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_727() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            false,
            """patternProperties with boolean schemas -> object with both properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with a property matching both true and false is invalid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with a property matching both true and false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_728() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foobar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            false,
            """patternProperties with boolean schemas -> object with a property matching both true and false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties with boolean schemas -> empty object is valid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_729() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            true,
            """patternProperties with boolean schemas -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/patternProperties.json`:
     *     "patternProperties with null valued instance properties -> allows null values"
     *
     * Test ID: "patternProperties::patternProperties with null valued instance properties::allows null values"
     */
    @Test
    fun jsonSchemaSuiteTest_730() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foobar": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "patternProperties": {
                        "^.*bar${'$'}": {
                            "type": "null"
                        }
                    }
                }
            """,
            true,
            """patternProperties with null valued instance properties -> allows null values""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> correct types"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::correct types"
     */
    @Test
    fun jsonSchemaSuiteTest_731() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """a schema given for prefixItems -> correct types""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> wrong types"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::wrong types"
     */
    @Test
    fun jsonSchemaSuiteTest_732() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            false,
            """a schema given for prefixItems -> wrong types""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> incomplete array of items"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::incomplete array of items"
     */
    @Test
    fun jsonSchemaSuiteTest_733() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """a schema given for prefixItems -> incomplete array of items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> array with additional items"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::array with additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_734() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """a schema given for prefixItems -> array with additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> empty array"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::empty array"
     */
    @Test
    fun jsonSchemaSuiteTest_735() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """a schema given for prefixItems -> empty array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "a schema given for prefixItems -> JavaScript pseudo-array is valid"
     *
     * Test ID: "prefixItems::a schema given for prefixItems::JavaScript pseudo-array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_736() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "0": "invalid",
                    "1": "valid",
                    "length": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """a schema given for prefixItems -> JavaScript pseudo-array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with boolean schemas -> array with one item is valid"
     *
     * Test ID: "prefixItems::prefixItems with boolean schemas::array with one item is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_737() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """prefixItems with boolean schemas -> array with one item is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with boolean schemas -> array with two items is invalid"
     *
     * Test ID: "prefixItems::prefixItems with boolean schemas::array with two items is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_738() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true,
                        false
                    ]
                }
            """,
            false,
            """prefixItems with boolean schemas -> array with two items is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with boolean schemas -> empty array is valid"
     *
     * Test ID: "prefixItems::prefixItems with boolean schemas::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_739() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """prefixItems with boolean schemas -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "additional items are allowed by default -> only the first item is validated"
     *
     * Test ID: "prefixItems::additional items are allowed by default::only the first item is validated"
     */
    @Test
    fun jsonSchemaSuiteTest_740() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        }
                    ]
                }
            """,
            true,
            """additional items are allowed by default -> only the first item is validated""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/prefixItems.json`:
     *     "prefixItems with null instance elements -> allows null elements"
     *
     * Test ID: "prefixItems::prefixItems with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_741() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "null"
                        }
                    ]
                }
            """,
            true,
            """prefixItems with null instance elements -> allows null elements""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "object properties validation -> both properties present and valid is valid"
     *
     * Test ID: "properties::object properties validation::both properties present and valid is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_742() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """object properties validation -> both properties present and valid is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "object properties validation -> one property invalid is invalid"
     *
     * Test ID: "properties::object properties validation::one property invalid is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_743() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """object properties validation -> one property invalid is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "object properties validation -> both properties invalid is invalid"
     *
     * Test ID: "properties::object properties validation::both properties invalid is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_744() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                    ],
                    "bar": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """object properties validation -> both properties invalid is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "object properties validation -> doesn't invalidate other properties"
     *
     * Test ID: "properties::object properties validation::doesn't invalidate other properties"
     */
    @Test
    fun jsonSchemaSuiteTest_745() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": [
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """object properties validation -> doesn't invalidate other properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "object properties validation -> ignores arrays"
     *
     * Test ID: "properties::object properties validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_746() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """object properties validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "object properties validation -> ignores other non-objects"
     *
     * Test ID: "properties::object properties validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_747() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """object properties validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> property validates property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::property validates property"
     */
    @Test
    fun jsonSchemaSuiteTest_748() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        1,
                        2
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> property validates property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> property invalidates property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::property invalidates property"
     */
    @Test
    fun jsonSchemaSuiteTest_749() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        1,
                        2,
                        3,
                        4
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> property invalidates property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty invalidates property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::patternProperty invalidates property"
     */
    @Test
    fun jsonSchemaSuiteTest_750() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> patternProperty invalidates property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty validates nonproperty"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::patternProperty validates nonproperty"
     */
    @Test
    fun jsonSchemaSuiteTest_751() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "fxo": [
                        1,
                        2
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> patternProperty validates nonproperty""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty invalidates nonproperty"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::patternProperty invalidates nonproperty"
     */
    @Test
    fun jsonSchemaSuiteTest_752() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "fxo": [
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> patternProperty invalidates nonproperty""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty ignores property"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty ignores property"
     */
    @Test
    fun jsonSchemaSuiteTest_753() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": [
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> additionalProperty ignores property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty validates others"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty validates others"
     */
    @Test
    fun jsonSchemaSuiteTest_754() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> additionalProperty validates others""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty invalidates others"
     *
     * Test ID: "properties::properties, patternProperties, additionalProperties interaction::additionalProperty invalidates others"
     */
    @Test
    fun jsonSchemaSuiteTest_755() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "quux": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "array",
                            "maxItems": 3
                        },
                        "bar": {
                            "type": "array"
                        }
                    },
                    "patternProperties": {
                        "f.o": {
                            "minItems": 2
                        }
                    },
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> additionalProperty invalidates others""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties with boolean schema -> no property present is valid"
     *
     * Test ID: "properties::properties with boolean schema::no property present is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_756() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """properties with boolean schema -> no property present is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties with boolean schema -> only 'true' property present is valid"
     *
     * Test ID: "properties::properties with boolean schema::only 'true' property present is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_757() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """properties with boolean schema -> only 'true' property present is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties with boolean schema -> only 'false' property present is invalid"
     *
     * Test ID: "properties::properties with boolean schema::only 'false' property present is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_758() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """properties with boolean schema -> only 'false' property present is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties with boolean schema -> both properties present is invalid"
     *
     * Test ID: "properties::properties with boolean schema::both properties present is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_759() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """properties with boolean schema -> both properties present is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties with escaped characters -> object with all numbers is valid"
     *
     * Test ID: "properties::properties with escaped characters::object with all numbers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_760() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo\"bar": 1,
                    "foo\\bar": 1,
                    "foo\rbar": 1,
                    "foo\tbar": 1,
                    "foo\fbar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo\nbar": {
                            "type": "number"
                        },
                        "foo\"bar": {
                            "type": "number"
                        },
                        "foo\\bar": {
                            "type": "number"
                        },
                        "foo\rbar": {
                            "type": "number"
                        },
                        "foo\tbar": {
                            "type": "number"
                        },
                        "foo\fbar": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """properties with escaped characters -> object with all numbers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties with escaped characters -> object with strings is invalid"
     *
     * Test ID: "properties::properties with escaped characters::object with strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_761() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": "1",
                    "foo\"bar": "1",
                    "foo\\bar": "1",
                    "foo\rbar": "1",
                    "foo\tbar": "1",
                    "foo\fbar": "1"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo\nbar": {
                            "type": "number"
                        },
                        "foo\"bar": {
                            "type": "number"
                        },
                        "foo\\bar": {
                            "type": "number"
                        },
                        "foo\rbar": {
                            "type": "number"
                        },
                        "foo\tbar": {
                            "type": "number"
                        },
                        "foo\fbar": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """properties with escaped characters -> object with strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties with null valued instance properties -> allows null values"
     *
     * Test ID: "properties::properties with null valued instance properties::allows null values"
     */
    @Test
    fun jsonSchemaSuiteTest_762() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "null"
                        }
                    }
                }
            """,
            true,
            """properties with null valued instance properties -> allows null values""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties whose names are Javascript object property names -> ignores arrays"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_763() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """properties whose names are Javascript object property names -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties whose names are Javascript object property names -> ignores other non-objects"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_764() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """properties whose names are Javascript object property names -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties whose names are Javascript object property names -> none of the properties mentioned"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::none of the properties mentioned"
     */
    @Test
    fun jsonSchemaSuiteTest_765() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """properties whose names are Javascript object property names -> none of the properties mentioned""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties whose names are Javascript object property names -> __proto__ not valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::__proto__ not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_766() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """properties whose names are Javascript object property names -> __proto__ not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties whose names are Javascript object property names -> toString not valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::toString not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_767() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "toString": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """properties whose names are Javascript object property names -> toString not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties whose names are Javascript object property names -> constructor not valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::constructor not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_768() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "constructor": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """properties whose names are Javascript object property names -> constructor not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/properties.json`:
     *     "properties whose names are Javascript object property names -> all present and valid"
     *
     * Test ID: "properties::properties whose names are Javascript object property names::all present and valid"
     */
    @Test
    fun jsonSchemaSuiteTest_769() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": 12,
                    "toString": {
                        "length": "foo"
                    },
                    "constructor": 37
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "__proto__": {
                            "type": "number"
                        },
                        "toString": {
                            "properties": {
                                "length": {
                                    "type": "string"
                                }
                            }
                        },
                        "constructor": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """properties whose names are Javascript object property names -> all present and valid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> all property names valid"
     *
     * Test ID: "propertyNames::propertyNames validation::all property names valid"
     */
    @Test
    fun jsonSchemaSuiteTest_770() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "f": {
                    },
                    "foo": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """propertyNames validation -> all property names valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> some property names invalid"
     *
     * Test ID: "propertyNames::propertyNames validation::some property names invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_771() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                    },
                    "foobar": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            false,
            """propertyNames validation -> some property names invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> object without properties is valid"
     *
     * Test ID: "propertyNames::propertyNames validation::object without properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_772() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """propertyNames validation -> object without properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> ignores arrays"
     *
     * Test ID: "propertyNames::propertyNames validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_773() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """propertyNames validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> ignores strings"
     *
     * Test ID: "propertyNames::propertyNames validation::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_774() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """propertyNames validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> ignores other non-objects"
     *
     * Test ID: "propertyNames::propertyNames validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_775() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """propertyNames validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema true -> object with any properties is valid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema true::object with any properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_776() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": true
                }
            """,
            true,
            """propertyNames with boolean schema true -> object with any properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema true -> empty object is valid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema true::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_777() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": true
                }
            """,
            true,
            """propertyNames with boolean schema true -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema false -> object with any properties is invalid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema false::object with any properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_778() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": false
                }
            """,
            false,
            """propertyNames with boolean schema false -> object with any properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema false -> empty object is valid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema false::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_779() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": false
                }
            """,
            true,
            """propertyNames with boolean schema false -> empty object is valid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> match"
     *
     * Test ID: "ref::root pointer ref::match"
     */
    @Test
    fun jsonSchemaSuiteTest_780() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """root pointer ref -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> recursive match"
     *
     * Test ID: "ref::root pointer ref::recursive match"
     */
    @Test
    fun jsonSchemaSuiteTest_781() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "foo": false
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            true,
            """root pointer ref -> recursive match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> mismatch"
     *
     * Test ID: "ref::root pointer ref::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_782() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": false
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """root pointer ref -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "root pointer ref -> recursive mismatch"
     *
     * Test ID: "ref::root pointer ref::recursive mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_783() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": false
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#"
                        }
                    },
                    "additionalProperties": false
                }
            """,
            false,
            """root pointer ref -> recursive mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to object -> match"
     *
     * Test ID: "ref::relative pointer ref to object::match"
     */
    @Test
    fun jsonSchemaSuiteTest_784() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 3
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "${'$'}ref": "#/properties/foo"
                        }
                    }
                }
            """,
            true,
            """relative pointer ref to object -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to object -> mismatch"
     *
     * Test ID: "ref::relative pointer ref to object::mismatch"
     */
    @Test
    fun jsonSchemaSuiteTest_785() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "type": "integer"
                        },
                        "bar": {
                            "${'$'}ref": "#/properties/foo"
                        }
                    }
                }
            """,
            false,
            """relative pointer ref to object -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to array -> match array"
     *
     * Test ID: "ref::relative pointer ref to array::match array"
     */
    @Test
    fun jsonSchemaSuiteTest_786() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "${'$'}ref": "#/prefixItems/0"
                        }
                    ]
                }
            """,
            true,
            """relative pointer ref to array -> match array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative pointer ref to array -> mismatch array"
     *
     * Test ID: "ref::relative pointer ref to array::mismatch array"
     */
    @Test
    fun jsonSchemaSuiteTest_787() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "integer"
                        },
                        {
                            "${'$'}ref": "#/prefixItems/0"
                        }
                    ]
                }
            """,
            false,
            """relative pointer ref to array -> mismatch array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> slash invalid"
     *
     * Test ID: "ref::escaped pointer ref::slash invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_788() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "slash": "aoeu"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            false,
            """escaped pointer ref -> slash invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> tilde invalid"
     *
     * Test ID: "ref::escaped pointer ref::tilde invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_789() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "tilde": "aoeu"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            false,
            """escaped pointer ref -> tilde invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> percent invalid"
     *
     * Test ID: "ref::escaped pointer ref::percent invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_790() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "percent": "aoeu"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            false,
            """escaped pointer ref -> percent invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> slash valid"
     *
     * Test ID: "ref::escaped pointer ref::slash valid"
     */
    @Test
    fun jsonSchemaSuiteTest_791() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "slash": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            true,
            """escaped pointer ref -> slash valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> tilde valid"
     *
     * Test ID: "ref::escaped pointer ref::tilde valid"
     */
    @Test
    fun jsonSchemaSuiteTest_792() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "tilde": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            true,
            """escaped pointer ref -> tilde valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "escaped pointer ref -> percent valid"
     *
     * Test ID: "ref::escaped pointer ref::percent valid"
     */
    @Test
    fun jsonSchemaSuiteTest_793() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "percent": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "tilde~field": {
                            "type": "integer"
                        },
                        "slash/field": {
                            "type": "integer"
                        },
                        "percent%field": {
                            "type": "integer"
                        }
                    },
                    "properties": {
                        "tilde": {
                            "${'$'}ref": "#/${'$'}defs/tilde~0field"
                        },
                        "slash": {
                            "${'$'}ref": "#/${'$'}defs/slash~1field"
                        },
                        "percent": {
                            "${'$'}ref": "#/${'$'}defs/percent%25field"
                        }
                    }
                }
            """,
            true,
            """escaped pointer ref -> percent valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "nested refs -> nested ref valid"
     *
     * Test ID: "ref::nested refs::nested ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_794() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a": {
                            "type": "integer"
                        },
                        "b": {
                            "${'$'}ref": "#/${'$'}defs/a"
                        },
                        "c": {
                            "${'$'}ref": "#/${'$'}defs/b"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/c"
                }
            """,
            true,
            """nested refs -> nested ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "nested refs -> nested ref invalid"
     *
     * Test ID: "ref::nested refs::nested ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_795() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a": {
                            "type": "integer"
                        },
                        "b": {
                            "${'$'}ref": "#/${'$'}defs/a"
                        },
                        "c": {
                            "${'$'}ref": "#/${'$'}defs/b"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/c"
                }
            """,
            false,
            """nested refs -> nested ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref applies alongside sibling keywords -> ref valid, maxItems valid"
     *
     * Test ID: "ref::ref applies alongside sibling keywords::ref valid, maxItems valid"
     */
    @Test
    fun jsonSchemaSuiteTest_796() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/reffed",
                            "maxItems": 2
                        }
                    }
                }
            """,
            true,
            """ref applies alongside sibling keywords -> ref valid, maxItems valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref applies alongside sibling keywords -> ref valid, maxItems invalid"
     *
     * Test ID: "ref::ref applies alongside sibling keywords::ref valid, maxItems invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_797() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        1,
                        2,
                        3
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/reffed",
                            "maxItems": 2
                        }
                    }
                }
            """,
            false,
            """ref applies alongside sibling keywords -> ref valid, maxItems invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref applies alongside sibling keywords -> ref invalid"
     *
     * Test ID: "ref::ref applies alongside sibling keywords::ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_798() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "string"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "reffed": {
                            "type": "array"
                        }
                    },
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/reffed",
                            "maxItems": 2
                        }
                    }
                }
            """,
            false,
            """ref applies alongside sibling keywords -> ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "remote ref, containing refs itself -> remote ref valid"
     *
     * Test ID: "ref::remote ref, containing refs itself::remote ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_799() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "minLength": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "https://json-schema.org/draft/2020-12/schema"
                }
            """,
            true,
            """remote ref, containing refs itself -> remote ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "remote ref, containing refs itself -> remote ref invalid"
     *
     * Test ID: "ref::remote ref, containing refs itself::remote ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_800() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "minLength": -1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "https://json-schema.org/draft/2020-12/schema"
                }
            """,
            false,
            """remote ref, containing refs itself -> remote ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref that is not a reference -> property named $ref valid"
     *
     * Test ID: "ref::property named $ref that is not a reference::property named $ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_801() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """property named ${'$'}ref that is not a reference -> property named ${'$'}ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref that is not a reference -> property named $ref invalid"
     *
     * Test ID: "ref::property named $ref that is not a reference::property named $ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_802() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """property named ${'$'}ref that is not a reference -> property named ${'$'}ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref, containing an actual $ref -> property named $ref valid"
     *
     * Test ID: "ref::property named $ref, containing an actual $ref::property named $ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_803() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "${'$'}ref": "#/${'$'}defs/is-string"
                        }
                    },
                    "${'$'}defs": {
                        "is-string": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """property named ${'$'}ref, containing an actual ${'$'}ref -> property named ${'$'}ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "property named $ref, containing an actual $ref -> property named $ref invalid"
     *
     * Test ID: "ref::property named $ref, containing an actual $ref::property named $ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_804() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "${'$'}ref": {
                            "${'$'}ref": "#/${'$'}defs/is-string"
                        }
                    },
                    "${'$'}defs": {
                        "is-string": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """property named ${'$'}ref, containing an actual ${'$'}ref -> property named ${'$'}ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$ref to boolean schema true -> any value is valid"
     *
     * Test ID: "ref::$ref to boolean schema true::any value is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_805() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bool",
                    "${'$'}defs": {
                        "bool": true
                    }
                }
            """,
            true,
            """${'$'}ref to boolean schema true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$ref to boolean schema false -> any value is invalid"
     *
     * Test ID: "ref::$ref to boolean schema false::any value is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_806() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bool",
                    "${'$'}defs": {
                        "bool": false
                    }
                }
            """,
            false,
            """${'$'}ref to boolean schema false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "Recursive references between schemas -> valid tree"
     *
     * Test ID: "ref::Recursive references between schemas::valid tree"
     */
    @Test
    fun jsonSchemaSuiteTest_807() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "meta": "root",
                    "nodes": [
                        {
                            "value": 1,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 1.1
                                    },
                                    {
                                        "value": 1.2
                                    }
                                ]
                            }
                        },
                        {
                            "value": 2,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 2.1
                                    },
                                    {
                                        "value": 2.2
                                    }
                                ]
                            }
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/tree",
                    "description": "tree of nodes",
                    "type": "object",
                    "properties": {
                        "meta": {
                            "type": "string"
                        },
                        "nodes": {
                            "type": "array",
                            "items": {
                                "${'$'}ref": "node"
                            }
                        }
                    },
                    "required": [
                        "meta",
                        "nodes"
                    ],
                    "${'$'}defs": {
                        "node": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/node",
                            "description": "node",
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "number"
                                },
                                "subtree": {
                                    "${'$'}ref": "tree"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    }
                }
            """,
            true,
            """Recursive references between schemas -> valid tree""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "Recursive references between schemas -> invalid tree"
     *
     * Test ID: "ref::Recursive references between schemas::invalid tree"
     */
    @Test
    fun jsonSchemaSuiteTest_808() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "meta": "root",
                    "nodes": [
                        {
                            "value": 1,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": "string is invalid"
                                    },
                                    {
                                        "value": 1.2
                                    }
                                ]
                            }
                        },
                        {
                            "value": 2,
                            "subtree": {
                                "meta": "child",
                                "nodes": [
                                    {
                                        "value": 2.1
                                    },
                                    {
                                        "value": 2.2
                                    }
                                ]
                            }
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/tree",
                    "description": "tree of nodes",
                    "type": "object",
                    "properties": {
                        "meta": {
                            "type": "string"
                        },
                        "nodes": {
                            "type": "array",
                            "items": {
                                "${'$'}ref": "node"
                            }
                        }
                    },
                    "required": [
                        "meta",
                        "nodes"
                    ],
                    "${'$'}defs": {
                        "node": {
                            "${'$'}id": "http://localhost:1234/draft2020-12/node",
                            "description": "node",
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "number"
                                },
                                "subtree": {
                                    "${'$'}ref": "tree"
                                }
                            },
                            "required": [
                                "value"
                            ]
                        }
                    }
                }
            """,
            false,
            """Recursive references between schemas -> invalid tree""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with quote -> object with numbers is valid"
     *
     * Test ID: "ref::refs with quote::object with numbers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_809() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\"bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo\"bar": {
                            "${'$'}ref": "#/${'$'}defs/foo%22bar"
                        }
                    },
                    "${'$'}defs": {
                        "foo\"bar": {
                            "type": "number"
                        }
                    }
                }
            """,
            true,
            """refs with quote -> object with numbers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with quote -> object with strings is invalid"
     *
     * Test ID: "ref::refs with quote::object with strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_810() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\"bar": "1"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo\"bar": {
                            "${'$'}ref": "#/${'$'}defs/foo%22bar"
                        }
                    },
                    "${'$'}defs": {
                        "foo\"bar": {
                            "type": "number"
                        }
                    }
                }
            """,
            false,
            """refs with quote -> object with strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref creates new scope when adjacent to keywords -> referenced subschema doesn't see annotations from properties"
     *
     * Test ID: "ref::ref creates new scope when adjacent to keywords::referenced subschema doesn't see annotations from properties"
     */
    @Test
    fun jsonSchemaSuiteTest_811() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "prop1": "match"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "A": {
                            "unevaluatedProperties": false
                        }
                    },
                    "properties": {
                        "prop1": {
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/A"
                }
            """,
            false,
            """ref creates new scope when adjacent to keywords -> referenced subschema doesn't see annotations from properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> do not evaluate the $ref inside the enum, matching any string"
     *
     * Test ID: "ref::naive replacement of $ref with its destination is not correct::do not evaluate the $ref inside the enum, matching any string"
     */
    @Test
    fun jsonSchemaSuiteTest_812() {
        
        assertKsonEnforcesSchema(
            """
                "this is a string"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "enum": [
                        {
                            "${'$'}ref": "#/${'$'}defs/a_string"
                        }
                    ]
                }
            """,
            false,
            """naive replacement of ${'$'}ref with its destination is not correct -> do not evaluate the ${'$'}ref inside the enum, matching any string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> do not evaluate the $ref inside the enum, definition exact match"
     *
     * Test ID: "ref::naive replacement of $ref with its destination is not correct::do not evaluate the $ref inside the enum, definition exact match"
     */
    @Test
    fun jsonSchemaSuiteTest_813() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "type": "string"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "enum": [
                        {
                            "${'$'}ref": "#/${'$'}defs/a_string"
                        }
                    ]
                }
            """,
            false,
            """naive replacement of ${'$'}ref with its destination is not correct -> do not evaluate the ${'$'}ref inside the enum, definition exact match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> match the enum exactly"
     *
     * Test ID: "ref::naive replacement of $ref with its destination is not correct::match the enum exactly"
     */
    @Test
    fun jsonSchemaSuiteTest_814() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "${'$'}ref": "#/${'$'}defs/a_string"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "a_string": {
                            "type": "string"
                        }
                    },
                    "enum": [
                        {
                            "${'$'}ref": "#/${'$'}defs/a_string"
                        }
                    ]
                }
            """,
            true,
            """naive replacement of ${'$'}ref with its destination is not correct -> match the enum exactly""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with relative uris and defs -> invalid on inner field"
     *
     * Test ID: "ref::refs with relative uris and defs::invalid on inner field"
     */
    @Test
    fun jsonSchemaSuiteTest_815() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": 1
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-relative-uri-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "schema-relative-uri-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-relative-uri-defs2.json"
                }
            """,
            false,
            """refs with relative uris and defs -> invalid on inner field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with relative uris and defs -> invalid on outer field"
     *
     * Test ID: "ref::refs with relative uris and defs::invalid on outer field"
     */
    @Test
    fun jsonSchemaSuiteTest_816() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-relative-uri-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "schema-relative-uri-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-relative-uri-defs2.json"
                }
            """,
            false,
            """refs with relative uris and defs -> invalid on outer field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "refs with relative uris and defs -> valid on both fields"
     *
     * Test ID: "ref::refs with relative uris and defs::valid on both fields"
     */
    @Test
    fun jsonSchemaSuiteTest_817() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-relative-uri-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "schema-relative-uri-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-relative-uri-defs2.json"
                }
            """,
            true,
            """refs with relative uris and defs -> valid on both fields""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative refs with absolute uris and defs -> invalid on inner field"
     *
     * Test ID: "ref::relative refs with absolute uris and defs::invalid on inner field"
     */
    @Test
    fun jsonSchemaSuiteTest_818() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": 1
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-refs-absolute-uris-defs2.json"
                }
            """,
            false,
            """relative refs with absolute uris and defs -> invalid on inner field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative refs with absolute uris and defs -> invalid on outer field"
     *
     * Test ID: "ref::relative refs with absolute uris and defs::invalid on outer field"
     */
    @Test
    fun jsonSchemaSuiteTest_819() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-refs-absolute-uris-defs2.json"
                }
            """,
            false,
            """relative refs with absolute uris and defs -> invalid on outer field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "relative refs with absolute uris and defs -> valid on both fields"
     *
     * Test ID: "ref::relative refs with absolute uris and defs::valid on both fields"
     */
    @Test
    fun jsonSchemaSuiteTest_820() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "a"
                    },
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs1.json",
                    "properties": {
                        "foo": {
                            "${'$'}id": "http://example.com/schema-refs-absolute-uris-defs2.json",
                            "${'$'}defs": {
                                "inner": {
                                    "properties": {
                                        "bar": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/inner"
                        }
                    },
                    "${'$'}ref": "schema-refs-absolute-uris-defs2.json"
                }
            """,
            true,
            """relative refs with absolute uris and defs -> valid on both fields""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id must be resolved against nearest parent, not just immediate parent -> number is valid"
     *
     * Test ID: "ref::$id must be resolved against nearest parent, not just immediate parent::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_821() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/a.json",
                    "${'$'}defs": {
                        "x": {
                            "${'$'}id": "http://example.com/b/c.json",
                            "not": {
                                "${'$'}defs": {
                                    "y": {
                                        "${'$'}id": "d.json",
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "http://example.com/b/d.json"
                        }
                    ]
                }
            """,
            true,
            """${'$'}id must be resolved against nearest parent, not just immediate parent -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id must be resolved against nearest parent, not just immediate parent -> non-number is invalid"
     *
     * Test ID: "ref::$id must be resolved against nearest parent, not just immediate parent::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_822() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/a.json",
                    "${'$'}defs": {
                        "x": {
                            "${'$'}id": "http://example.com/b/c.json",
                            "not": {
                                "${'$'}defs": {
                                    "y": {
                                        "${'$'}id": "d.json",
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "http://example.com/b/d.json"
                        }
                    ]
                }
            """,
            false,
            """${'$'}id must be resolved against nearest parent, not just immediate parent -> non-number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $ref -> data is valid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $ref::data is valid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_823() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id1/base.json",
                    "${'$'}ref": "int.json",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1/int.json",
                            "${'$'}id": "int.json",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1-int.json",
                            "${'$'}id": "/draft2020-12/ref-and-id1-int.json",
                            "maximum": 2
                        }
                    }
                }
            """,
            true,
            """order of evaluation: ${'$'}id and ${'$'}ref -> data is valid against first definition""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $ref -> data is invalid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $ref::data is invalid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_824() {
        
        assertKsonEnforcesSchema(
            """
                50
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id1/base.json",
                    "${'$'}ref": "int.json",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1/int.json",
                            "${'$'}id": "int.json",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id1-int.json",
                            "${'$'}id": "/draft2020-12/ref-and-id1-int.json",
                            "maximum": 2
                        }
                    }
                }
            """,
            false,
            """order of evaluation: ${'$'}id and ${'$'}ref -> data is invalid against first definition""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $anchor and $ref -> data is valid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $anchor and $ref::data is valid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_825() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/base.json",
                    "${'$'}ref": "#bigint",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: /ref-and-id2/base.json#/${'$'}defs/bigint; another valid uri for this location: /ref-and-id2/base.json#bigint",
                            "${'$'}anchor": "bigint",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id2#/${'$'}defs/smallint; another valid uri for this location: https://example.com/ref-and-id2/#bigint",
                            "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/",
                            "${'$'}anchor": "bigint",
                            "maximum": 2
                        }
                    }
                }
            """,
            true,
            """order of evaluation: ${'$'}id and ${'$'}anchor and ${'$'}ref -> data is valid against first definition""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "order of evaluation: $id and $anchor and $ref -> data is invalid against first definition"
     *
     * Test ID: "ref::order of evaluation: $id and $anchor and $ref::data is invalid against first definition"
     */
    @Test
    fun jsonSchemaSuiteTest_826() {
        
        assertKsonEnforcesSchema(
            """
                50
            """,
            """
                {
                    "${'$'}comment": "${'$'}id must be evaluated before ${'$'}ref to get the proper ${'$'}ref destination",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/base.json",
                    "${'$'}ref": "#bigint",
                    "${'$'}defs": {
                        "bigint": {
                            "${'$'}comment": "canonical uri: /ref-and-id2/base.json#/${'$'}defs/bigint; another valid uri for this location: /ref-and-id2/base.json#bigint",
                            "${'$'}anchor": "bigint",
                            "maximum": 10
                        },
                        "smallint": {
                            "${'$'}comment": "canonical uri: https://example.com/ref-and-id2#/${'$'}defs/smallint; another valid uri for this location: https://example.com/ref-and-id2/#bigint",
                            "${'$'}id": "https://example.com/draft2020-12/ref-and-id2/",
                            "${'$'}anchor": "bigint",
                            "maximum": 2
                        }
                    }
                }
            """,
            false,
            """order of evaluation: ${'$'}id and ${'$'}anchor and ${'$'}ref -> data is invalid against first definition""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with $ref via the URN -> valid under the URN IDed schema"
     *
     * Test ID: "ref::simple URN base URI with $ref via the URN::valid under the URN IDed schema"
     */
    @Test
    fun jsonSchemaSuiteTest_827() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 37
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
                    "minimum": 30,
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"
                        }
                    }
                }
            """,
            true,
            """simple URN base URI with ${'$'}ref via the URN -> valid under the URN IDed schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with $ref via the URN -> invalid under the URN IDed schema"
     *
     * Test ID: "ref::simple URN base URI with $ref via the URN::invalid under the URN IDed schema"
     */
    @Test
    fun jsonSchemaSuiteTest_828() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
                    "minimum": 30,
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"
                        }
                    }
                }
            """,
            false,
            """simple URN base URI with ${'$'}ref via the URN -> invalid under the URN IDed schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with JSON pointer -> a string is valid"
     *
     * Test ID: "ref::simple URN base URI with JSON pointer::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_829() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """simple URN base URI with JSON pointer -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "simple URN base URI with JSON pointer -> a non-string is invalid"
     *
     * Test ID: "ref::simple URN base URI with JSON pointer::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_830() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "URIs do not have to have HTTP(s) schemes",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """simple URN base URI with JSON pointer -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with NSS -> a string is valid"
     *
     * Test ID: "ref::URN base URI with NSS::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_831() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:1/406/47452/2",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """URN base URI with NSS -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with NSS -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with NSS::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_832() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:1/406/47452/2",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """URN base URI with NSS -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with r-component -> a string is valid"
     *
     * Test ID: "ref::URN base URI with r-component::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_833() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.1",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """URN base URI with r-component -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with r-component -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with r-component::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_834() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.1",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """URN base URI with r-component -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with q-component -> a string is valid"
     *
     * Test ID: "ref::URN base URI with q-component::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_835() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """URN base URI with q-component -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with q-component -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with q-component::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_836() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}comment": "RFC 8141 §2.3.2",
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """URN base URI with q-component -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and JSON pointer ref -> a string is valid"
     *
     * Test ID: "ref::URN base URI with URN and JSON pointer ref::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_837() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """URN base URI with URN and JSON pointer ref -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and JSON pointer ref -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with URN and JSON pointer ref::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_838() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """URN base URI with URN and JSON pointer ref -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and anchor ref -> a string is valid"
     *
     * Test ID: "ref::URN base URI with URN and anchor ref::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_839() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}anchor": "something",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """URN base URI with URN and anchor ref -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN base URI with URN and anchor ref -> a non-string is invalid"
     *
     * Test ID: "ref::URN base URI with URN and anchor ref::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_840() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 12
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
                    "properties": {
                        "foo": {
                            "${'$'}ref": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}anchor": "something",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """URN base URI with URN and anchor ref -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN ref with nested pointer ref -> a string is valid"
     *
     * Test ID: "ref::URN ref with nested pointer ref::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_841() {
        
        assertKsonEnforcesSchema(
            """
                "bar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                            "${'$'}defs": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    }
                }
            """,
            true,
            """URN ref with nested pointer ref -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "URN ref with nested pointer ref -> a non-string is invalid"
     *
     * Test ID: "ref::URN ref with nested pointer ref::a non-string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_842() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
                            "${'$'}defs": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "#/${'$'}defs/bar"
                        }
                    }
                }
            """,
            false,
            """URN ref with nested pointer ref -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to if -> a non-integer is invalid due to the $ref"
     *
     * Test ID: "ref::ref to if::a non-integer is invalid due to the $ref"
     */
    @Test
    fun jsonSchemaSuiteTest_843() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/if",
                    "if": {
                        "${'$'}id": "http://example.com/ref/if",
                        "type": "integer"
                    }
                }
            """,
            false,
            """ref to if -> a non-integer is invalid due to the ${'$'}ref""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to if -> an integer is valid"
     *
     * Test ID: "ref::ref to if::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_844() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/if",
                    "if": {
                        "${'$'}id": "http://example.com/ref/if",
                        "type": "integer"
                    }
                }
            """,
            true,
            """ref to if -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to then -> a non-integer is invalid due to the $ref"
     *
     * Test ID: "ref::ref to then::a non-integer is invalid due to the $ref"
     */
    @Test
    fun jsonSchemaSuiteTest_845() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/then",
                    "then": {
                        "${'$'}id": "http://example.com/ref/then",
                        "type": "integer"
                    }
                }
            """,
            false,
            """ref to then -> a non-integer is invalid due to the ${'$'}ref""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to then -> an integer is valid"
     *
     * Test ID: "ref::ref to then::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_846() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/then",
                    "then": {
                        "${'$'}id": "http://example.com/ref/then",
                        "type": "integer"
                    }
                }
            """,
            true,
            """ref to then -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to else -> a non-integer is invalid due to the $ref"
     *
     * Test ID: "ref::ref to else::a non-integer is invalid due to the $ref"
     */
    @Test
    fun jsonSchemaSuiteTest_847() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/else",
                    "else": {
                        "${'$'}id": "http://example.com/ref/else",
                        "type": "integer"
                    }
                }
            """,
            false,
            """ref to else -> a non-integer is invalid due to the ${'$'}ref""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref to else -> an integer is valid"
     *
     * Test ID: "ref::ref to else::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_848() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://example.com/ref/else",
                    "else": {
                        "${'$'}id": "http://example.com/ref/else",
                        "type": "integer"
                    }
                }
            """,
            true,
            """ref to else -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref with absolute-path-reference -> a string is valid"
     *
     * Test ID: "ref::ref with absolute-path-reference::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_849() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/ref/absref.json",
                    "${'$'}defs": {
                        "a": {
                            "${'$'}id": "http://example.com/ref/absref/foobar.json",
                            "type": "number"
                        },
                        "b": {
                            "${'$'}id": "http://example.com/absref/foobar.json",
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "/absref/foobar.json"
                }
            """,
            true,
            """ref with absolute-path-reference -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "ref with absolute-path-reference -> an integer is invalid"
     *
     * Test ID: "ref::ref with absolute-path-reference::an integer is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_850() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://example.com/ref/absref.json",
                    "${'$'}defs": {
                        "a": {
                            "${'$'}id": "http://example.com/ref/absref/foobar.json",
                            "type": "number"
                        },
                        "b": {
                            "${'$'}id": "http://example.com/absref/foobar.json",
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "/absref/foobar.json"
                }
            """,
            false,
            """ref with absolute-path-reference -> an integer is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - *nix -> number is valid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - *nix::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_851() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            true,
            """${'$'}id with file URI still resolves pointers - *nix -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - *nix -> non-number is invalid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - *nix::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_852() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            false,
            """${'$'}id with file URI still resolves pointers - *nix -> non-number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - windows -> number is valid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - windows::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_853() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///c:/folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            true,
            """${'$'}id with file URI still resolves pointers - windows -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "$id with file URI still resolves pointers - windows -> non-number is invalid"
     *
     * Test ID: "ref::$id with file URI still resolves pointers - windows::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_854() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "file:///c:/folder/file.json",
                    "${'$'}defs": {
                        "foo": {
                            "type": "number"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/foo"
                }
            """,
            false,
            """${'$'}id with file URI still resolves pointers - windows -> non-number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "empty tokens in $ref json-pointer -> number is valid"
     *
     * Test ID: "ref::empty tokens in $ref json-pointer::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_855() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "": {
                            "${'$'}defs": {
                                "": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs//${'$'}defs/"
                        }
                    ]
                }
            """,
            true,
            """empty tokens in ${'$'}ref json-pointer -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/ref.json`:
     *     "empty tokens in $ref json-pointer -> non-number is invalid"
     *
     * Test ID: "ref::empty tokens in $ref json-pointer::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_856() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "": {
                            "${'$'}defs": {
                                "": {
                                    "type": "number"
                                }
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs//${'$'}defs/"
                        }
                    ]
                }
            """,
            false,
            """empty tokens in ${'$'}ref json-pointer -> non-number is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote ref -> remote ref valid"
     *
     * Test ID: "refRemote::remote ref::remote ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_857() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::remote ref::remote ref valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/integer.json"
                }
            """,
            true,
            """remote ref -> remote ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote ref -> remote ref invalid"
     *
     * Test ID: "refRemote::remote ref::remote ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_858() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::remote ref::remote ref invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/integer.json"
                }
            """,
            false,
            """remote ref -> remote ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "fragment within remote ref -> remote fragment valid"
     *
     * Test ID: "refRemote::fragment within remote ref::remote fragment valid"
     */
    @Test
    fun jsonSchemaSuiteTest_859() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::fragment within remote ref::remote fragment valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/subSchemas.json#/${'$'}defs/integer"
                }
            """,
            true,
            """fragment within remote ref -> remote fragment valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "fragment within remote ref -> remote fragment invalid"
     *
     * Test ID: "refRemote::fragment within remote ref::remote fragment invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_860() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::fragment within remote ref::remote fragment invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/subSchemas.json#/${'$'}defs/integer"
                }
            """,
            false,
            """fragment within remote ref -> remote fragment invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "anchor within remote ref -> remote anchor valid"
     *
     * Test ID: "refRemote::anchor within remote ref::remote anchor valid"
     */
    @Test
    fun jsonSchemaSuiteTest_861() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/locationIndependentIdentifier.json#foo"
                }
            """,
            true,
            """anchor within remote ref -> remote anchor valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "anchor within remote ref -> remote anchor invalid"
     *
     * Test ID: "refRemote::anchor within remote ref::remote anchor invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_862() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/locationIndependentIdentifier.json#foo"
                }
            """,
            false,
            """anchor within remote ref -> remote anchor invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "ref within remote ref -> ref within ref valid"
     *
     * Test ID: "refRemote::ref within remote ref::ref within ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_863() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::ref within remote ref::ref within ref valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/subSchemas.json#/${'$'}defs/refToInteger"
                }
            """,
            true,
            """ref within remote ref -> ref within ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "ref within remote ref -> ref within ref invalid"
     *
     * Test ID: "refRemote::ref within remote ref::ref within ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_864() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::ref within remote ref::ref within ref invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/subSchemas.json#/${'$'}defs/refToInteger"
                }
            """,
            false,
            """ref within remote ref -> ref within ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "base URI change -> base URI change ref valid"
     *
     * Test ID: "refRemote::base URI change::base URI change ref valid"
     */
    @Test
    fun jsonSchemaSuiteTest_865() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change::base URI change ref valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        1
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/",
                    "items": {
                        "${'$'}id": "baseUriChange/",
                        "items": {
                            "${'$'}ref": "folderInteger.json"
                        }
                    }
                }
            """,
            true,
            """base URI change -> base URI change ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "base URI change -> base URI change ref invalid"
     *
     * Test ID: "refRemote::base URI change::base URI change ref invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_866() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change::base URI change ref invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "a"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/",
                    "items": {
                        "${'$'}id": "baseUriChange/",
                        "items": {
                            "${'$'}ref": "folderInteger.json"
                        }
                    }
                }
            """,
            false,
            """base URI change -> base URI change ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "base URI change - change folder -> number is valid"
     *
     * Test ID: "refRemote::base URI change - change folder::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_867() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder::number is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        1
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/scope_change_defs1.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "baseUriChangeFolder/"
                        }
                    },
                    "${'$'}defs": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolder/",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "folderInteger.json"
                            }
                        }
                    }
                }
            """,
            true,
            """base URI change - change folder -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "base URI change - change folder -> string is invalid"
     *
     * Test ID: "refRemote::base URI change - change folder::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_868() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder::string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        "a"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/scope_change_defs1.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "baseUriChangeFolder/"
                        }
                    },
                    "${'$'}defs": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolder/",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "folderInteger.json"
                            }
                        }
                    }
                }
            """,
            false,
            """base URI change - change folder -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "base URI change - change folder in subschema -> number is valid"
     *
     * Test ID: "refRemote::base URI change - change folder in subschema::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_869() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder in subschema::number is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        1
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/scope_change_defs2.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "baseUriChangeFolderInSubschema/#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolderInSubschema/",
                            "${'$'}defs": {
                                "bar": {
                                    "type": "array",
                                    "items": {
                                        "${'$'}ref": "folderInteger.json"
                                    }
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """base URI change - change folder in subschema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "base URI change - change folder in subschema -> string is invalid"
     *
     * Test ID: "refRemote::base URI change - change folder in subschema::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_870() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::base URI change - change folder in subschema::string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "list": [
                        "a"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/scope_change_defs2.json",
                    "type": "object",
                    "properties": {
                        "list": {
                            "${'$'}ref": "baseUriChangeFolderInSubschema/#/${'$'}defs/bar"
                        }
                    },
                    "${'$'}defs": {
                        "baz": {
                            "${'$'}id": "baseUriChangeFolderInSubschema/",
                            "${'$'}defs": {
                                "bar": {
                                    "type": "array",
                                    "items": {
                                        "${'$'}ref": "folderInteger.json"
                                    }
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """base URI change - change folder in subschema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "root ref in remote ref -> string is valid"
     *
     * Test ID: "refRemote::root ref in remote ref::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_871() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::root ref in remote ref::string is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/object",
                    "type": "object",
                    "properties": {
                        "name": {
                            "${'$'}ref": "name-defs.json#/${'$'}defs/orNull"
                        }
                    }
                }
            """,
            true,
            """root ref in remote ref -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "root ref in remote ref -> null is valid"
     *
     * Test ID: "refRemote::root ref in remote ref::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_872() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::root ref in remote ref::null is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/object",
                    "type": "object",
                    "properties": {
                        "name": {
                            "${'$'}ref": "name-defs.json#/${'$'}defs/orNull"
                        }
                    }
                }
            """,
            true,
            """root ref in remote ref -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "root ref in remote ref -> object is invalid"
     *
     * Test ID: "refRemote::root ref in remote ref::object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_873() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::root ref in remote ref::object is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": {
                        "name": null
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/object",
                    "type": "object",
                    "properties": {
                        "name": {
                            "${'$'}ref": "name-defs.json#/${'$'}defs/orNull"
                        }
                    }
                }
            """,
            false,
            """root ref in remote ref -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote ref with ref to defs -> invalid"
     *
     * Test ID: "refRemote::remote ref with ref to defs::invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_874() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/schema-remote-ref-ref-defs1.json",
                    "${'$'}ref": "ref-and-defs.json"
                }
            """,
            false,
            """remote ref with ref to defs -> invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote ref with ref to defs -> valid"
     *
     * Test ID: "refRemote::remote ref with ref to defs::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_875() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/schema-remote-ref-ref-defs1.json",
                    "${'$'}ref": "ref-and-defs.json"
                }
            """,
            true,
            """remote ref with ref to defs -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "Location-independent identifier in remote ref -> integer is valid"
     *
     * Test ID: "refRemote::Location-independent identifier in remote ref::integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_876() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::Location-independent identifier in remote ref::integer is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/locationIndependentIdentifier.json#/${'$'}defs/refToInteger"
                }
            """,
            true,
            """Location-independent identifier in remote ref -> integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "Location-independent identifier in remote ref -> string is invalid"
     *
     * Test ID: "refRemote::Location-independent identifier in remote ref::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_877() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::Location-independent identifier in remote ref::string is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/locationIndependentIdentifier.json#/${'$'}defs/refToInteger"
                }
            """,
            false,
            """Location-independent identifier in remote ref -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "retrieved nested refs resolve relative to their URI not $id -> number is invalid"
     *
     * Test ID: "refRemote::retrieved nested refs resolve relative to their URI not $id::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_878() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::retrieved nested refs resolve relative to their URI not $id::number is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": {
                        "foo": 1
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/some-id",
                    "properties": {
                        "name": {
                            "${'$'}ref": "nested/foo-ref-string.json"
                        }
                    }
                }
            """,
            false,
            """retrieved nested refs resolve relative to their URI not ${'$'}id -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "retrieved nested refs resolve relative to their URI not $id -> string is valid"
     *
     * Test ID: "refRemote::retrieved nested refs resolve relative to their URI not $id::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_879() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "refRemote::retrieved nested refs resolve relative to their URI not $id::string is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "name": {
                        "foo": "a"
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/some-id",
                    "properties": {
                        "name": {
                            "${'$'}ref": "nested/foo-ref-string.json"
                        }
                    }
                }
            """,
            true,
            """retrieved nested refs resolve relative to their URI not ${'$'}id -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote HTTP ref with different $id -> number is invalid"
     *
     * Test ID: "refRemote::remote HTTP ref with different $id::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_880() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/different-id-ref-string.json"
                }
            """,
            false,
            """remote HTTP ref with different ${'$'}id -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote HTTP ref with different $id -> string is valid"
     *
     * Test ID: "refRemote::remote HTTP ref with different $id::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_881() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/different-id-ref-string.json"
                }
            """,
            true,
            """remote HTTP ref with different ${'$'}id -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote HTTP ref with different URN $id -> number is invalid"
     *
     * Test ID: "refRemote::remote HTTP ref with different URN $id::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_882() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/urn-ref-string.json"
                }
            """,
            false,
            """remote HTTP ref with different URN ${'$'}id -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote HTTP ref with different URN $id -> string is valid"
     *
     * Test ID: "refRemote::remote HTTP ref with different URN $id::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_883() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/urn-ref-string.json"
                }
            """,
            true,
            """remote HTTP ref with different URN ${'$'}id -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote HTTP ref with nested absolute ref -> number is invalid"
     *
     * Test ID: "refRemote::remote HTTP ref with nested absolute ref::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_884() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/nested-absolute-ref-to-string.json"
                }
            """,
            false,
            """remote HTTP ref with nested absolute ref -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "remote HTTP ref with nested absolute ref -> string is valid"
     *
     * Test ID: "refRemote::remote HTTP ref with nested absolute ref::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_885() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/nested-absolute-ref-to-string.json"
                }
            """,
            true,
            """remote HTTP ref with nested absolute ref -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "$ref to $ref finds detached $anchor -> number is valid"
     *
     * Test ID: "refRemote::$ref to $ref finds detached $anchor::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_886() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/detached-ref.json#/${'$'}defs/foo"
                }
            """,
            true,
            """${'$'}ref to ${'$'}ref finds detached ${'$'}anchor -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/refRemote.json`:
     *     "$ref to $ref finds detached $anchor -> non-number is invalid"
     *
     * Test ID: "refRemote::$ref to $ref finds detached $anchor::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_887() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "http://localhost:1234/draft2020-12/detached-ref.json#/${'$'}defs/foo"
                }
            """,
            false,
            """${'$'}ref to ${'$'}ref finds detached ${'$'}anchor -> non-number is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> present required property is valid"
     *
     * Test ID: "required::required validation::present required property is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_888() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """required validation -> present required property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> non-present required property is invalid"
     *
     * Test ID: "required::required validation::non-present required property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_889() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            false,
            """required validation -> non-present required property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> ignores arrays"
     *
     * Test ID: "required::required validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_890() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """required validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> ignores strings"
     *
     * Test ID: "required::required validation::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_891() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """required validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> ignores other non-objects"
     *
     * Test ID: "required::required validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_892() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """required validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required default validation -> not required by default"
     *
     * Test ID: "required::required default validation::not required by default"
     */
    @Test
    fun jsonSchemaSuiteTest_893() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    }
                }
            """,
            true,
            """required default validation -> not required by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required with empty array -> property not required"
     *
     * Test ID: "required::required with empty array::property not required"
     */
    @Test
    fun jsonSchemaSuiteTest_894() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "required": [
                    ]
                }
            """,
            true,
            """required with empty array -> property not required""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required with escaped characters -> object with all properties present is valid"
     *
     * Test ID: "required::required with escaped characters::object with all properties present is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_895() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo\"bar": 1,
                    "foo\\bar": 1,
                    "foo\rbar": 1,
                    "foo\tbar": 1,
                    "foo\fbar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "foo\nbar",
                        "foo\"bar",
                        "foo\\bar",
                        "foo\rbar",
                        "foo\tbar",
                        "foo\fbar"
                    ]
                }
            """,
            true,
            """required with escaped characters -> object with all properties present is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required with escaped characters -> object with some properties missing is invalid"
     *
     * Test ID: "required::required with escaped characters::object with some properties missing is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_896() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": "1",
                    "foo\"bar": "1"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "foo\nbar",
                        "foo\"bar",
                        "foo\\bar",
                        "foo\rbar",
                        "foo\tbar",
                        "foo\fbar"
                    ]
                }
            """,
            false,
            """required with escaped characters -> object with some properties missing is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> ignores arrays"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_897() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            true,
            """required properties whose names are Javascript object property names -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> ignores other non-objects"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_898() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            true,
            """required properties whose names are Javascript object property names -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> none of the properties mentioned"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::none of the properties mentioned"
     */
    @Test
    fun jsonSchemaSuiteTest_899() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """required properties whose names are Javascript object property names -> none of the properties mentioned""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> __proto__ present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::__proto__ present"
     */
    @Test
    fun jsonSchemaSuiteTest_900() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """required properties whose names are Javascript object property names -> __proto__ present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> toString present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::toString present"
     */
    @Test
    fun jsonSchemaSuiteTest_901() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "toString": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """required properties whose names are Javascript object property names -> toString present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> constructor present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::constructor present"
     */
    @Test
    fun jsonSchemaSuiteTest_902() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "constructor": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """required properties whose names are Javascript object property names -> constructor present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> all present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::all present"
     */
    @Test
    fun jsonSchemaSuiteTest_903() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": 12,
                    "toString": {
                        "length": "foo"
                    },
                    "constructor": 37
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            true,
            """required properties whose names are Javascript object property names -> all present""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> an integer is an integer"
     *
     * Test ID: "type::integer type matches integers::an integer is an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_904() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            true,
            """integer type matches integers -> an integer is an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a float with zero fractional part is an integer"
     *
     * Test ID: "type::integer type matches integers::a float with zero fractional part is an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_905() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            true,
            """integer type matches integers -> a float with zero fractional part is an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a float is not an integer"
     *
     * Test ID: "type::integer type matches integers::a float is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_906() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """integer type matches integers -> a float is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a string is not an integer"
     *
     * Test ID: "type::integer type matches integers::a string is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_907() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """integer type matches integers -> a string is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a string is still not an integer, even if it looks like one"
     *
     * Test ID: "type::integer type matches integers::a string is still not an integer, even if it looks like one"
     */
    @Test
    fun jsonSchemaSuiteTest_908() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """integer type matches integers -> a string is still not an integer, even if it looks like one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> an object is not an integer"
     *
     * Test ID: "type::integer type matches integers::an object is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_909() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """integer type matches integers -> an object is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> an array is not an integer"
     *
     * Test ID: "type::integer type matches integers::an array is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_910() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """integer type matches integers -> an array is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> a boolean is not an integer"
     *
     * Test ID: "type::integer type matches integers::a boolean is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_911() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """integer type matches integers -> a boolean is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "integer type matches integers -> null is not an integer"
     *
     * Test ID: "type::integer type matches integers::null is not an integer"
     */
    @Test
    fun jsonSchemaSuiteTest_912() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "integer"
                }
            """,
            false,
            """integer type matches integers -> null is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> an integer is a number"
     *
     * Test ID: "type::number type matches numbers::an integer is a number"
     */
    @Test
    fun jsonSchemaSuiteTest_913() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            true,
            """number type matches numbers -> an integer is a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a float with zero fractional part is a number (and an integer)"
     *
     * Test ID: "type::number type matches numbers::a float with zero fractional part is a number (and an integer)"
     */
    @Test
    fun jsonSchemaSuiteTest_914() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            true,
            """number type matches numbers -> a float with zero fractional part is a number (and an integer)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a float is a number"
     *
     * Test ID: "type::number type matches numbers::a float is a number"
     */
    @Test
    fun jsonSchemaSuiteTest_915() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            true,
            """number type matches numbers -> a float is a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a string is not a number"
     *
     * Test ID: "type::number type matches numbers::a string is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_916() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """number type matches numbers -> a string is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a string is still not a number, even if it looks like one"
     *
     * Test ID: "type::number type matches numbers::a string is still not a number, even if it looks like one"
     */
    @Test
    fun jsonSchemaSuiteTest_917() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """number type matches numbers -> a string is still not a number, even if it looks like one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> an object is not a number"
     *
     * Test ID: "type::number type matches numbers::an object is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_918() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """number type matches numbers -> an object is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> an array is not a number"
     *
     * Test ID: "type::number type matches numbers::an array is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_919() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """number type matches numbers -> an array is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> a boolean is not a number"
     *
     * Test ID: "type::number type matches numbers::a boolean is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_920() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """number type matches numbers -> a boolean is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "number type matches numbers -> null is not a number"
     *
     * Test ID: "type::number type matches numbers::null is not a number"
     */
    @Test
    fun jsonSchemaSuiteTest_921() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "number"
                }
            """,
            false,
            """number type matches numbers -> null is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> 1 is not a string"
     *
     * Test ID: "type::string type matches strings::1 is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_922() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """string type matches strings -> 1 is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a float is not a string"
     *
     * Test ID: "type::string type matches strings::a float is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_923() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """string type matches strings -> a float is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a string is a string"
     *
     * Test ID: "type::string type matches strings::a string is a string"
     */
    @Test
    fun jsonSchemaSuiteTest_924() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            true,
            """string type matches strings -> a string is a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a string is still a string, even if it looks like a number"
     *
     * Test ID: "type::string type matches strings::a string is still a string, even if it looks like a number"
     */
    @Test
    fun jsonSchemaSuiteTest_925() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            true,
            """string type matches strings -> a string is still a string, even if it looks like a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> an empty string is still a string"
     *
     * Test ID: "type::string type matches strings::an empty string is still a string"
     */
    @Test
    fun jsonSchemaSuiteTest_926() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            true,
            """string type matches strings -> an empty string is still a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> an object is not a string"
     *
     * Test ID: "type::string type matches strings::an object is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_927() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """string type matches strings -> an object is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> an array is not a string"
     *
     * Test ID: "type::string type matches strings::an array is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_928() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """string type matches strings -> an array is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> a boolean is not a string"
     *
     * Test ID: "type::string type matches strings::a boolean is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_929() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """string type matches strings -> a boolean is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "string type matches strings -> null is not a string"
     *
     * Test ID: "type::string type matches strings::null is not a string"
     */
    @Test
    fun jsonSchemaSuiteTest_930() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "string"
                }
            """,
            false,
            """string type matches strings -> null is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> an integer is not an object"
     *
     * Test ID: "type::object type matches objects::an integer is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_931() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """object type matches objects -> an integer is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> a float is not an object"
     *
     * Test ID: "type::object type matches objects::a float is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_932() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """object type matches objects -> a float is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> a string is not an object"
     *
     * Test ID: "type::object type matches objects::a string is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_933() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """object type matches objects -> a string is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> an object is an object"
     *
     * Test ID: "type::object type matches objects::an object is an object"
     */
    @Test
    fun jsonSchemaSuiteTest_934() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            true,
            """object type matches objects -> an object is an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> an array is not an object"
     *
     * Test ID: "type::object type matches objects::an array is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_935() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """object type matches objects -> an array is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> a boolean is not an object"
     *
     * Test ID: "type::object type matches objects::a boolean is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_936() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """object type matches objects -> a boolean is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "object type matches objects -> null is not an object"
     *
     * Test ID: "type::object type matches objects::null is not an object"
     */
    @Test
    fun jsonSchemaSuiteTest_937() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object"
                }
            """,
            false,
            """object type matches objects -> null is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> an integer is not an array"
     *
     * Test ID: "type::array type matches arrays::an integer is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_938() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """array type matches arrays -> an integer is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> a float is not an array"
     *
     * Test ID: "type::array type matches arrays::a float is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_939() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """array type matches arrays -> a float is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> a string is not an array"
     *
     * Test ID: "type::array type matches arrays::a string is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_940() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """array type matches arrays -> a string is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> an object is not an array"
     *
     * Test ID: "type::array type matches arrays::an object is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_941() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """array type matches arrays -> an object is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> an array is an array"
     *
     * Test ID: "type::array type matches arrays::an array is an array"
     */
    @Test
    fun jsonSchemaSuiteTest_942() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            true,
            """array type matches arrays -> an array is an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> a boolean is not an array"
     *
     * Test ID: "type::array type matches arrays::a boolean is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_943() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """array type matches arrays -> a boolean is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "array type matches arrays -> null is not an array"
     *
     * Test ID: "type::array type matches arrays::null is not an array"
     */
    @Test
    fun jsonSchemaSuiteTest_944() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "array"
                }
            """,
            false,
            """array type matches arrays -> null is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an integer is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an integer is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_945() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> an integer is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> zero is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::zero is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_946() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> zero is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> a float is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::a float is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_947() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> a float is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> a string is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::a string is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_948() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> a string is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an empty string is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an empty string is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_949() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> an empty string is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an object is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an object is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_950() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> an object is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> an array is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::an array is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_951() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> an array is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> true is a boolean"
     *
     * Test ID: "type::boolean type matches booleans::true is a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_952() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            true,
            """boolean type matches booleans -> true is a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> false is a boolean"
     *
     * Test ID: "type::boolean type matches booleans::false is a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_953() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            true,
            """boolean type matches booleans -> false is a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "boolean type matches booleans -> null is not a boolean"
     *
     * Test ID: "type::boolean type matches booleans::null is not a boolean"
     */
    @Test
    fun jsonSchemaSuiteTest_954() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "boolean"
                }
            """,
            false,
            """boolean type matches booleans -> null is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an integer is not null"
     *
     * Test ID: "type::null type matches only the null object::an integer is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_955() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> an integer is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> a float is not null"
     *
     * Test ID: "type::null type matches only the null object::a float is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_956() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> a float is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> zero is not null"
     *
     * Test ID: "type::null type matches only the null object::zero is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_957() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> zero is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> a string is not null"
     *
     * Test ID: "type::null type matches only the null object::a string is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_958() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> a string is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an empty string is not null"
     *
     * Test ID: "type::null type matches only the null object::an empty string is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_959() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> an empty string is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an object is not null"
     *
     * Test ID: "type::null type matches only the null object::an object is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_960() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> an object is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> an array is not null"
     *
     * Test ID: "type::null type matches only the null object::an array is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_961() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> an array is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> true is not null"
     *
     * Test ID: "type::null type matches only the null object::true is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_962() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> true is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> false is not null"
     *
     * Test ID: "type::null type matches only the null object::false is not null"
     */
    @Test
    fun jsonSchemaSuiteTest_963() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            false,
            """null type matches only the null object -> false is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "null type matches only the null object -> null is null"
     *
     * Test ID: "type::null type matches only the null object::null is null"
     */
    @Test
    fun jsonSchemaSuiteTest_964() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "null"
                }
            """,
            true,
            """null type matches only the null object -> null is null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> an integer is valid"
     *
     * Test ID: "type::multiple types can be specified in an array::an integer is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_965() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            true,
            """multiple types can be specified in an array -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> a string is valid"
     *
     * Test ID: "type::multiple types can be specified in an array::a string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_966() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            true,
            """multiple types can be specified in an array -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> a float is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::a float is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_967() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """multiple types can be specified in an array -> a float is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> an object is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::an object is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_968() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """multiple types can be specified in an array -> an object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> an array is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::an array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_969() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """multiple types can be specified in an array -> an array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> a boolean is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::a boolean is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_970() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """multiple types can be specified in an array -> a boolean is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "multiple types can be specified in an array -> null is invalid"
     *
     * Test ID: "type::multiple types can be specified in an array::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_971() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "integer",
                        "string"
                    ]
                }
            """,
            false,
            """multiple types can be specified in an array -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type as array with one item -> string is valid"
     *
     * Test ID: "type::type as array with one item::string is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_972() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "string"
                    ]
                }
            """,
            true,
            """type as array with one item -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type as array with one item -> number is invalid"
     *
     * Test ID: "type::type as array with one item::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_973() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "string"
                    ]
                }
            """,
            false,
            """type as array with one item -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> array is valid"
     *
     * Test ID: "type::type: array or object::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_974() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            true,
            """type: array or object -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> object is valid"
     *
     * Test ID: "type::type: array or object::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_975() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            true,
            """type: array or object -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> number is invalid"
     *
     * Test ID: "type::type: array or object::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_976() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            false,
            """type: array or object -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> string is invalid"
     *
     * Test ID: "type::type: array or object::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_977() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            false,
            """type: array or object -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array or object -> null is invalid"
     *
     * Test ID: "type::type: array or object::null is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_978() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object"
                    ]
                }
            """,
            false,
            """type: array or object -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> array is valid"
     *
     * Test ID: "type::type: array, object or null::array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_979() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            true,
            """type: array, object or null -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> object is valid"
     *
     * Test ID: "type::type: array, object or null::object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_980() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 123
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            true,
            """type: array, object or null -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> null is valid"
     *
     * Test ID: "type::type: array, object or null::null is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_981() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            true,
            """type: array, object or null -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> number is invalid"
     *
     * Test ID: "type::type: array, object or null::number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_982() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            false,
            """type: array, object or null -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/type.json`:
     *     "type: array, object or null -> string is invalid"
     *
     * Test ID: "type::type: array, object or null::string is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_983() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": [
                        "array",
                        "object",
                        "null"
                    ]
                }
            """,
            false,
            """type: array, object or null -> string is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems true -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems true::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_984() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": true
                }
            """,
            true,
            """unevaluatedItems true -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems true -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems true::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_985() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": true
                }
            """,
            true,
            """unevaluatedItems true -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems false -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems false::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_986() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems false -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems false -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems false::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_987() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems false -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems as schema -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems as schema::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_988() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            true,
            """unevaluatedItems as schema -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems as schema -> with valid unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems as schema::with valid unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_989() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            true,
            """unevaluatedItems as schema -> with valid unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems as schema -> with invalid unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems as schema::with invalid unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_990() {
        
        assertKsonEnforcesSchema(
            """
                [
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            false,
            """unevaluatedItems as schema -> with invalid unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with uniform items -> unevaluatedItems doesn't apply"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with uniform items::unevaluatedItems doesn't apply"
     */
    @Test
    fun jsonSchemaSuiteTest_991() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with uniform items -> unevaluatedItems doesn't apply""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with tuple -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with tuple::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_992() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with tuple -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with tuple -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with tuple::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_993() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with tuple -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with items and prefixItems -> unevaluatedItems doesn't apply"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with items and prefixItems::unevaluatedItems doesn't apply"
     */
    @Test
    fun jsonSchemaSuiteTest_994() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "items": true,
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with items and prefixItems -> unevaluatedItems doesn't apply""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with items -> valid under items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with items::valid under items"
     */
    @Test
    fun jsonSchemaSuiteTest_995() {
        
        assertKsonEnforcesSchema(
            """
                [
                    5,
                    6,
                    7,
                    8
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "number"
                    },
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            true,
            """unevaluatedItems with items -> valid under items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with items -> invalid under items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with items::invalid under items"
     */
    @Test
    fun jsonSchemaSuiteTest_996() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "items": {
                        "type": "number"
                    },
                    "unevaluatedItems": {
                        "type": "string"
                    }
                }
            """,
            false,
            """unevaluatedItems with items -> invalid under items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested tuple -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested tuple::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_997() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "allOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with nested tuple -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested tuple -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested tuple::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_998() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "allOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "type": "number"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with nested tuple -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested items -> with only (valid) additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested items::with only (valid) additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_999() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "boolean"
                    },
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        true
                    ]
                }
            """,
            true,
            """unevaluatedItems with nested items -> with only (valid) additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested items -> with no additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested items::with no additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_1000() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "yes",
                    "no"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "boolean"
                    },
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        true
                    ]
                }
            """,
            true,
            """unevaluatedItems with nested items -> with no additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested items -> with invalid additional item"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested items::with invalid additional item"
     */
    @Test
    fun jsonSchemaSuiteTest_1001() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "yes",
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "boolean"
                    },
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            }
                        },
                        true
                    ]
                }
            """,
            false,
            """unevaluatedItems with nested items -> with invalid additional item""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested prefixItems and items -> with no additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested prefixItems and items::with no additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_1002() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "items": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with nested prefixItems and items -> with no additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested prefixItems and items -> with additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested prefixItems and items::with additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_1003() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "items": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with nested prefixItems and items -> with additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested unevaluatedItems -> with no additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested unevaluatedItems::with no additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_1004() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "unevaluatedItems": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with nested unevaluatedItems -> with no additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with nested unevaluatedItems -> with additional items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with nested unevaluatedItems::with additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_1005() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "unevaluatedItems": true
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with nested unevaluatedItems -> with additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when one schema matches and has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when one schema matches and has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1006() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with anyOf -> when one schema matches and has no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when one schema matches and has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when one schema matches and has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1007() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with anyOf -> when one schema matches and has unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when two schemas match and has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when two schemas match and has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1008() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with anyOf -> when two schemas match and has no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with anyOf -> when two schemas match and has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with anyOf::when two schemas match and has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1009() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "anyOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with anyOf -> when two schemas match and has unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with oneOf -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with oneOf::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1010() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "oneOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with oneOf -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with oneOf -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with oneOf::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1011() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "oneOf": [
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        },
                        {
                            "prefixItems": [
                                true,
                                {
                                    "const": "baz"
                                }
                            ]
                        }
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with oneOf -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with not -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with not::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1012() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "not": {
                        "not": {
                            "prefixItems": [
                                true,
                                {
                                    "const": "bar"
                                }
                            ]
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with not -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if matches and it has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if matches and it has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1013() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "then"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with if/then/else -> when if matches and it has no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if matches and it has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if matches and it has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1014() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "then",
                    "else"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with if/then/else -> when if matches and it has unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if doesn't match and it has no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if doesn't match and it has no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1015() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    42,
                    "else"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with if/then/else -> when if doesn't match and it has no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with if/then/else -> when if doesn't match and it has unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with if/then/else::when if doesn't match and it has unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1016() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42,
                    42,
                    "else",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "const": "foo"
                        }
                    ],
                    "if": {
                        "prefixItems": [
                            true,
                            {
                                "const": "bar"
                            }
                        ]
                    },
                    "then": {
                        "prefixItems": [
                            true,
                            true,
                            {
                                "const": "then"
                            }
                        ]
                    },
                    "else": {
                        "prefixItems": [
                            true,
                            true,
                            true,
                            {
                                "const": "else"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with if/then/else -> when if doesn't match and it has unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with boolean schemas -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with boolean schemas::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1017() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        true
                    ],
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems with boolean schemas -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with boolean schemas -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with boolean schemas::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1018() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        true
                    ],
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems with boolean schemas -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $ref -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $ref::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1019() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false,
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            true,
            """unevaluatedItems with ${'$'}ref -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $ref -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $ref::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1020() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "unevaluatedItems": false,
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            false,
            """unevaluatedItems with ${'$'}ref -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems before $ref -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems before $ref::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1021() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false,
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            true,
            """unevaluatedItems before ${'$'}ref -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems before $ref -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems before $ref::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1022() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false,
                    "prefixItems": [
                        {
                            "type": "string"
                        }
                    ],
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    }
                }
            """,
            false,
            """unevaluatedItems before ${'$'}ref -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $dynamicRef -> with no unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $dynamicRef::with no unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1023() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-items-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedItems comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedItems": false,
                            "type": "array",
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """unevaluatedItems with ${'$'}dynamicRef -> with no unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with $dynamicRef -> with unevaluated items"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with $dynamicRef::with unevaluated items"
     */
    @Test
    fun jsonSchemaSuiteTest_1024() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-items-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "prefixItems": [
                                true,
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedItems comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedItems": false,
                            "type": "array",
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """unevaluatedItems with ${'$'}dynamicRef -> with unevaluated items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems can't see inside cousins -> always fails"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems can't see inside cousins::always fails"
     */
    @Test
    fun jsonSchemaSuiteTest_1025() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "prefixItems": [
                                true
                            ]
                        },
                        {
                            "unevaluatedItems": false
                        }
                    ]
                }
            """,
            false,
            """unevaluatedItems can't see inside cousins -> always fails""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "item is evaluated in an uncle schema to unevaluatedItems -> no extra items"
     *
     * Test ID: "unevaluatedItems::item is evaluated in an uncle schema to unevaluatedItems::no extra items"
     */
    @Test
    fun jsonSchemaSuiteTest_1026() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        "test"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "unevaluatedItems": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "prefixItems": [
                                        true,
                                        {
                                            "type": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            """,
            true,
            """item is evaluated in an uncle schema to unevaluatedItems -> no extra items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "item is evaluated in an uncle schema to unevaluatedItems -> uncle keyword evaluation is not significant"
     *
     * Test ID: "unevaluatedItems::item is evaluated in an uncle schema to unevaluatedItems::uncle keyword evaluation is not significant"
     */
    @Test
    fun jsonSchemaSuiteTest_1027() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": [
                        "test",
                        "test"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                            "prefixItems": [
                                {
                                    "type": "string"
                                }
                            ],
                            "unevaluatedItems": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "prefixItems": [
                                        true,
                                        {
                                            "type": "string"
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """item is evaluated in an uncle schema to unevaluatedItems -> uncle keyword evaluation is not significant""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on adjacent contains -> second item is evaluated by contains"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on adjacent contains::second item is evaluated by contains"
     */
    @Test
    fun jsonSchemaSuiteTest_1028() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems depends on adjacent contains -> second item is evaluated by contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on adjacent contains -> contains fails, second item is not evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on adjacent contains::contains fails, second item is not evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_1029() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems depends on adjacent contains -> contains fails, second item is not evaluated""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on adjacent contains -> contains passes, second item is not evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on adjacent contains::contains passes, second item is not evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_1030() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        true
                    ],
                    "contains": {
                        "type": "string"
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems depends on adjacent contains -> contains passes, second item is not evaluated""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on multiple nested contains -> 5 not evaluated, passes unevaluatedItems"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on multiple nested contains::5 not evaluated, passes unevaluatedItems"
     */
    @Test
    fun jsonSchemaSuiteTest_1031() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    3,
                    4,
                    5,
                    6
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "contains": {
                                "multipleOf": 2
                            }
                        },
                        {
                            "contains": {
                                "multipleOf": 3
                            }
                        }
                    ],
                    "unevaluatedItems": {
                        "multipleOf": 5
                    }
                }
            """,
            true,
            """unevaluatedItems depends on multiple nested contains -> 5 not evaluated, passes unevaluatedItems""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems depends on multiple nested contains -> 7 not evaluated, fails unevaluatedItems"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems depends on multiple nested contains::7 not evaluated, fails unevaluatedItems"
     */
    @Test
    fun jsonSchemaSuiteTest_1032() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    3,
                    4,
                    7,
                    8
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "contains": {
                                "multipleOf": 2
                            }
                        },
                        {
                            "contains": {
                                "multipleOf": 3
                            }
                        }
                    ],
                    "unevaluatedItems": {
                        "multipleOf": 5
                    }
                }
            """,
            false,
            """unevaluatedItems depends on multiple nested contains -> 7 not evaluated, fails unevaluatedItems""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> empty array is valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1033() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems and contains interact to control item dependency relationship -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only a's are valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only a's are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1034() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "a",
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems and contains interact to control item dependency relationship -> only a's are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> a's and b's are valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::a's and b's are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1035() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "a",
                    "b",
                    "a",
                    "b",
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems and contains interact to control item dependency relationship -> a's and b's are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> a's, b's and c's are valid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::a's, b's and c's are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1036() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "a",
                    "c",
                    "c",
                    "b",
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems and contains interact to control item dependency relationship -> a's, b's and c's are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only b's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only b's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1037() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "b",
                    "b"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems and contains interact to control item dependency relationship -> only b's are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only c's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only c's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1038() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "c"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems and contains interact to control item dependency relationship -> only c's are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only b's and c's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only b's and c's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1039() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "b",
                    "c",
                    "b",
                    "c"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems and contains interact to control item dependency relationship -> only b's and c's are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems and contains interact to control item dependency relationship -> only a's and c's are invalid"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems and contains interact to control item dependency relationship::only a's and c's are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1040() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "c",
                    "a",
                    "c",
                    "a",
                    "c"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "contains": {
                            "const": "a"
                        }
                    },
                    "then": {
                        "if": {
                            "contains": {
                                "const": "b"
                            }
                        },
                        "then": {
                            "if": {
                                "contains": {
                                    "const": "c"
                                }
                            }
                        }
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems and contains interact to control item dependency relationship -> only a's and c's are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores booleans"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_1041() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """non-array instances are valid -> ignores booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores integers"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores integers"
     */
    @Test
    fun jsonSchemaSuiteTest_1042() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """non-array instances are valid -> ignores integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores floats"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores floats"
     */
    @Test
    fun jsonSchemaSuiteTest_1043() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """non-array instances are valid -> ignores floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores objects"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores objects"
     */
    @Test
    fun jsonSchemaSuiteTest_1044() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """non-array instances are valid -> ignores objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores strings"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_1045() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """non-array instances are valid -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "non-array instances are valid -> ignores null"
     *
     * Test ID: "unevaluatedItems::non-array instances are valid::ignores null"
     */
    @Test
    fun jsonSchemaSuiteTest_1046() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": false
                }
            """,
            true,
            """non-array instances are valid -> ignores null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems with null instance elements -> allows null elements"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_1047() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedItems": {
                        "type": "null"
                    }
                }
            """,
            true,
            """unevaluatedItems with null instance elements -> allows null elements""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems can see annotations from if without then and else -> valid in case if is evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems can see annotations from if without then and else::valid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_1048() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "a"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "prefixItems": [
                            {
                                "const": "a"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            true,
            """unevaluatedItems can see annotations from if without then and else -> valid in case if is evaluated""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedItems.json`:
     *     "unevaluatedItems can see annotations from if without then and else -> invalid in case if is evaluated"
     *
     * Test ID: "unevaluatedItems::unevaluatedItems can see annotations from if without then and else::invalid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_1049() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "b"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "prefixItems": [
                            {
                                "const": "a"
                            }
                        ]
                    },
                    "unevaluatedItems": false
                }
            """,
            false,
            """unevaluatedItems can see annotations from if without then and else -> invalid in case if is evaluated""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties true -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties true::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1050() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": true
                }
            """,
            true,
            """unevaluatedProperties true -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties true -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties true::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1051() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": true
                }
            """,
            true,
            """unevaluatedProperties true -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties schema -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties schema::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1052() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": {
                        "type": "string",
                        "minLength": 3
                    }
                }
            """,
            true,
            """unevaluatedProperties schema -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties schema -> with valid unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties schema::with valid unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1053() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": {
                        "type": "string",
                        "minLength": 3
                    }
                }
            """,
            true,
            """unevaluatedProperties schema -> with valid unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties schema -> with invalid unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties schema::with invalid unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1054() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "fo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": {
                        "type": "string",
                        "minLength": 3
                    }
                }
            """,
            false,
            """unevaluatedProperties schema -> with invalid unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties false -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties false::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1055() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties false -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties false -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties false::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1056() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties false -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent properties -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent properties::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1057() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with adjacent properties -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent properties -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent properties::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1058() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with adjacent properties -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent patternProperties -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent patternProperties::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1059() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "patternProperties": {
                        "^foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with adjacent patternProperties -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent patternProperties -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent patternProperties::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1060() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "patternProperties": {
                        "^foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with adjacent patternProperties -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent additionalProperties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent additionalProperties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1061() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": true,
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with adjacent additionalProperties -> with no additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with adjacent additionalProperties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with adjacent additionalProperties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1062() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": true,
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with adjacent additionalProperties -> with additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested properties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested properties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1063() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with nested properties -> with no additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested properties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested properties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1064() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with nested properties -> with additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested patternProperties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested patternProperties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1065() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "patternProperties": {
                                "^bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with nested patternProperties -> with no additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested patternProperties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested patternProperties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1066() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "patternProperties": {
                                "^bar": {
                                    "type": "string"
                                }
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with nested patternProperties -> with additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested additionalProperties -> with no additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested additionalProperties::with no additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1067() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "additionalProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with nested additionalProperties -> with no additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested additionalProperties -> with additional properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested additionalProperties::with additional properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1068() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "additionalProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with nested additionalProperties -> with additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested unevaluatedProperties -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested unevaluatedProperties::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1069() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": {
                        "type": "string",
                        "maxLength": 2
                    }
                }
            """,
            true,
            """unevaluatedProperties with nested unevaluatedProperties -> with no nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with nested unevaluatedProperties -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with nested unevaluatedProperties::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1070() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": {
                        "type": "string",
                        "maxLength": 2
                    }
                }
            """,
            true,
            """unevaluatedProperties with nested unevaluatedProperties -> with nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when one matches and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when one matches and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1071() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with anyOf -> when one matches and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when one matches and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when one matches and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1072() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "not-baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with anyOf -> when one matches and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when two match and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when two match and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1073() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with anyOf -> when two match and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with anyOf -> when two match and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with anyOf::when two match and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1074() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz",
                    "quux": "not-quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        },
                        {
                            "properties": {
                                "quux": {
                                    "const": "quux"
                                }
                            },
                            "required": [
                                "quux"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with anyOf -> when two match and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with oneOf -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with oneOf::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1075() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with oneOf -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with oneOf -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with oneOf::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1076() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "quux": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "oneOf": [
                        {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        },
                        {
                            "properties": {
                                "baz": {
                                    "const": "baz"
                                }
                            },
                            "required": [
                                "baz"
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with oneOf -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with not -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with not::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1077() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "not": {
                        "not": {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with not -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is true and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is true and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1078() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with if/then/else -> when if is true and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is true and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is true and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1079() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else -> when if is true and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is false and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is false and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1080() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with if/then/else -> when if is false and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else -> when if is false and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else::when if is false and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1081() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "else",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else -> when if is false and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is true and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is true and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1082() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else, then not defined -> when if is true and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is true and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is true and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1083() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else, then not defined -> when if is true and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is false and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is false and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1084() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with if/then/else, then not defined -> when if is false and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, then not defined -> when if is false and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, then not defined::when if is false and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1085() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "else",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "else": {
                        "properties": {
                            "baz": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "baz"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else, then not defined -> when if is false and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is true and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is true and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1086() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with if/then/else, else not defined -> when if is true and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is true and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is true and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1087() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "then",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else, else not defined -> when if is true and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is false and has no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is false and has no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1088() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else, else not defined -> when if is false and has no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with if/then/else, else not defined -> when if is false and has unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with if/then/else, else not defined::when if is false and has unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1089() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "else",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "if": {
                        "properties": {
                            "foo": {
                                "const": "then"
                            }
                        },
                        "required": [
                            "foo"
                        ]
                    },
                    "then": {
                        "properties": {
                            "bar": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "bar"
                        ]
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with if/then/else, else not defined -> when if is false and has unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with dependentSchemas -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with dependentSchemas::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1090() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with dependentSchemas -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with dependentSchemas -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with dependentSchemas::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1091() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                    "const": "bar"
                                }
                            },
                            "required": [
                                "bar"
                            ]
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with dependentSchemas -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with boolean schemas -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with boolean schemas::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1092() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        true
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties with boolean schemas -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with boolean schemas -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with boolean schemas::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1093() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        true
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties with boolean schemas -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $ref -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $ref::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1094() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false,
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """unevaluatedProperties with ${'$'}ref -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $ref -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $ref::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1095() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "unevaluatedProperties": false,
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """unevaluatedProperties with ${'$'}ref -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties before $ref -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties before $ref::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1096() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false,
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """unevaluatedProperties before ${'$'}ref -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties before $ref -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties before $ref::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1097() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "unevaluatedProperties": false,
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "${'$'}ref": "#/${'$'}defs/bar",
                    "${'$'}defs": {
                        "bar": {
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """unevaluatedProperties before ${'$'}ref -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $dynamicRef -> with no unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $dynamicRef::with no unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1098() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-properties-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedProperties comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedProperties": false,
                            "type": "object",
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """unevaluatedProperties with ${'$'}dynamicRef -> with no unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with $dynamicRef -> with unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with $dynamicRef::with unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1099() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar",
                    "baz": "baz"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://example.com/unevaluated-properties-with-dynamic-ref/derived",
                    "${'$'}ref": "./baseSchema",
                    "${'$'}defs": {
                        "derived": {
                            "${'$'}dynamicAnchor": "addons",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            }
                        },
                        "baseSchema": {
                            "${'$'}id": "./baseSchema",
                            "${'$'}comment": "unevaluatedProperties comes first so it's more likely to catch bugs with implementations that are sensitive to keyword ordering",
                            "unevaluatedProperties": false,
                            "type": "object",
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "${'$'}dynamicRef": "#addons",
                            "${'$'}defs": {
                                "defaultAddons": {
                                    "${'$'}comment": "Needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "addons"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """unevaluatedProperties with ${'$'}dynamicRef -> with unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can't see inside cousins -> always fails"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can't see inside cousins::always fails"
     */
    @Test
    fun jsonSchemaSuiteTest_1100() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        },
                        {
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """unevaluatedProperties can't see inside cousins -> always fails""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can't see inside cousins (reverse order) -> always fails"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can't see inside cousins (reverse order)::always fails"
     */
    @Test
    fun jsonSchemaSuiteTest_1101() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "allOf": [
                        {
                            "unevaluatedProperties": false
                        },
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ]
                }
            """,
            false,
            """unevaluatedProperties can't see inside cousins (reverse order) -> always fails""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties outside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties outside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1102() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """nested unevaluatedProperties, outer false, inner true, properties outside -> with no nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties outside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties outside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1103() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """nested unevaluatedProperties, outer false, inner true, properties outside -> with nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties inside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties inside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1104() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """nested unevaluatedProperties, outer false, inner true, properties inside -> with no nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer false, inner true, properties inside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer false, inner true, properties inside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1105() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """nested unevaluatedProperties, outer false, inner true, properties inside -> with nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties outside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties outside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1106() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            false,
            """nested unevaluatedProperties, outer true, inner false, properties outside -> with no nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties outside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties outside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1107() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "string"
                        }
                    },
                    "allOf": [
                        {
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            false,
            """nested unevaluatedProperties, outer true, inner false, properties outside -> with nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties inside -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties inside::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1108() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            true,
            """nested unevaluatedProperties, outer true, inner false, properties inside -> with no nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "nested unevaluatedProperties, outer true, inner false, properties inside -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::nested unevaluatedProperties, outer true, inner false, properties inside::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1109() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "unevaluatedProperties": true
                }
            """,
            false,
            """nested unevaluatedProperties, outer true, inner false, properties inside -> with nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, true with properties -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, true with properties::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1110() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        },
                        {
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """cousin unevaluatedProperties, true and false, true with properties -> with no nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, true with properties -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, true with properties::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1111() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": true
                        },
                        {
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """cousin unevaluatedProperties, true and false, true with properties -> with nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, false with properties -> with no nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, false with properties::with no nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1112() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            true,
            """cousin unevaluatedProperties, true and false, false with properties -> with no nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "cousin unevaluatedProperties, true and false, false with properties -> with nested unevaluated properties"
     *
     * Test ID: "unevaluatedProperties::cousin unevaluatedProperties, true and false, false with properties::with nested unevaluated properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1113() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "foo",
                    "bar": "bar"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "unevaluatedProperties": true
                        },
                        {
                            "properties": {
                                "foo": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """cousin unevaluatedProperties, true and false, false with properties -> with nested unevaluated properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "property is evaluated in an uncle schema to unevaluatedProperties -> no extra properties"
     *
     * Test ID: "unevaluatedProperties::property is evaluated in an uncle schema to unevaluatedProperties::no extra properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1114() {
        // see https://stackoverflow.com/questions/66936884/deeply-nested-unevaluatedproperties-and-their-expectations
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "test"
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "properties": {
                                        "faz": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            """,
            true,
            """property is evaluated in an uncle schema to unevaluatedProperties -> no extra properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "property is evaluated in an uncle schema to unevaluatedProperties -> uncle keyword evaluation is not significant"
     *
     * Test ID: "unevaluatedProperties::property is evaluated in an uncle schema to unevaluatedProperties::uncle keyword evaluation is not significant"
     */
    @Test
    fun jsonSchemaSuiteTest_1115() {
        // see https://stackoverflow.com/questions/66936884/deeply-nested-unevaluatedproperties-and-their-expectations
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                        "bar": "test",
                        "faz": "test"
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "type": "string"
                                }
                            },
                            "unevaluatedProperties": false
                        }
                    },
                    "anyOf": [
                        {
                            "properties": {
                                "foo": {
                                    "properties": {
                                        "faz": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """property is evaluated in an uncle schema to unevaluatedProperties -> uncle keyword evaluation is not significant""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, allOf has unevaluated -> base case: both properties present"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::base case: both properties present"
     */
    @Test
    fun jsonSchemaSuiteTest_1116() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            }
                        }
                    ]
                }
            """,
            false,
            """in-place applicator siblings, allOf has unevaluated -> base case: both properties present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, allOf has unevaluated -> in place applicator siblings, bar is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::in place applicator siblings, bar is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_1117() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            }
                        }
                    ]
                }
            """,
            true,
            """in-place applicator siblings, allOf has unevaluated -> in place applicator siblings, bar is missing""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, allOf has unevaluated -> in place applicator siblings, foo is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, allOf has unevaluated::in place applicator siblings, foo is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_1118() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            },
                            "unevaluatedProperties": false
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            }
                        }
                    ]
                }
            """,
            false,
            """in-place applicator siblings, allOf has unevaluated -> in place applicator siblings, foo is missing""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, anyOf has unevaluated -> base case: both properties present"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::base case: both properties present"
     */
    @Test
    fun jsonSchemaSuiteTest_1119() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """in-place applicator siblings, anyOf has unevaluated -> base case: both properties present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, anyOf has unevaluated -> in place applicator siblings, bar is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::in place applicator siblings, bar is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_1120() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            false,
            """in-place applicator siblings, anyOf has unevaluated -> in place applicator siblings, bar is missing""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "in-place applicator siblings, anyOf has unevaluated -> in place applicator siblings, foo is missing"
     *
     * Test ID: "unevaluatedProperties::in-place applicator siblings, anyOf has unevaluated::in place applicator siblings, foo is missing"
     */
    @Test
    fun jsonSchemaSuiteTest_1121() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "allOf": [
                        {
                            "properties": {
                                "foo": true
                            }
                        }
                    ],
                    "anyOf": [
                        {
                            "properties": {
                                "bar": true
                            },
                            "unevaluatedProperties": false
                        }
                    ]
                }
            """,
            true,
            """in-place applicator siblings, anyOf has unevaluated -> in place applicator siblings, foo is missing""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Empty is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Empty is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1122() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + single cyclic ref -> Empty is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Single is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Single is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1123() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + single cyclic ref -> Single is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Unevaluated on 1st level is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 1st level is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1124() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                    },
                    "y": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties + single cyclic ref -> Unevaluated on 1st level is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Nested is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Nested is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1125() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + single cyclic ref -> Nested is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Unevaluated on 2nd level is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 2nd level is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1126() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                        },
                        "y": {
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties + single cyclic ref -> Unevaluated on 2nd level is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Deep nested is valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Deep nested is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1127() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                            "x": {
                            }
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + single cyclic ref -> Deep nested is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + single cyclic ref -> Unevaluated on 3rd level is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + single cyclic ref::Unevaluated on 3rd level is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1128() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": {
                        "x": {
                            "x": {
                            },
                            "y": {
                            }
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "properties": {
                        "x": {
                            "${'$'}ref": "#"
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties + single cyclic ref -> Unevaluated on 3rd level is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> Empty is invalid (no x or y)"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::Empty is invalid (no x or y)"
     */
    @Test
    fun jsonSchemaSuiteTest_1129() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties + ref inside allOf / oneOf -> Empty is invalid (no x or y)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b are invalid (no x or y)"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b are invalid (no x or y)"
     */
    @Test
    fun jsonSchemaSuiteTest_1130() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties + ref inside allOf / oneOf -> a and b are invalid (no x or y)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> x and y are invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::x and y are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1131() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "x": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties + ref inside allOf / oneOf -> x and y are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and x are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and x are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1132() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "x": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + ref inside allOf / oneOf -> a and x are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and y are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and y are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1133() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + ref inside allOf / oneOf -> a and y are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b and x are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and x are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1134() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1,
                    "x": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + ref inside allOf / oneOf -> a and b and x are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b and y are valid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and y are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1135() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties + ref inside allOf / oneOf -> a and b and y are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties + ref inside allOf / oneOf -> a and b and x and y are invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties + ref inside allOf / oneOf::a and b and x and y are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1136() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1,
                    "x": 1,
                    "y": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "properties": {
                                "a": true
                            }
                        },
                        "two": {
                            "required": [
                                "x"
                            ],
                            "properties": {
                                "x": true
                            }
                        }
                    },
                    "allOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "properties": {
                                "b": true
                            }
                        },
                        {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "y"
                                    ],
                                    "properties": {
                                        "y": true
                                    }
                                }
                            ]
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties + ref inside allOf / oneOf -> a and b and x and y are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> Empty is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::Empty is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1137() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> Empty is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1138() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> a is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> b is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::b is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1139() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> b is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> c is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::c is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1140() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> c is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> d is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::d is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1141() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> d is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a + b is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a + b is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1142() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> a + b is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a + c is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a + c is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1143() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> a + c is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> a + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::a + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1144() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> a + d is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> b + c is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::b + c is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1145() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "b": 1,
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> b + c is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> b + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::b + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1146() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "b": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> b + d is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> c + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::c + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1147() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "c": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> c + d is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1148() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> xx is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + foox is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + foox is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1149() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "foox": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> xx + foox is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + foo is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + foo is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1150() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> xx + foo is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + a is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + a is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1151() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> xx + a is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + b is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + b is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1152() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "b": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> xx + b is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + c is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + c is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1153() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "c": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> xx + c is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> xx + d is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::xx + d is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1154() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "xx": 1,
                    "d": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> xx + d is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> all is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::all is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1155() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "all": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> all is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> all + foo is valid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::all + foo is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1156() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "all": 1,
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dynamic evalation inside nested refs -> all + foo is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dynamic evalation inside nested refs -> all + a is invalid"
     *
     * Test ID: "unevaluatedProperties::dynamic evalation inside nested refs::all + a is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1157() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "all": 1,
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "one": {
                            "oneOf": [
                                {
                                    "${'$'}ref": "#/${'$'}defs/two"
                                },
                                {
                                    "required": [
                                        "b"
                                    ],
                                    "properties": {
                                        "b": true
                                    }
                                },
                                {
                                    "required": [
                                        "xx"
                                    ],
                                    "patternProperties": {
                                        "x": true
                                    }
                                },
                                {
                                    "required": [
                                        "all"
                                    ],
                                    "unevaluatedProperties": true
                                }
                            ]
                        },
                        "two": {
                            "oneOf": [
                                {
                                    "required": [
                                        "c"
                                    ],
                                    "properties": {
                                        "c": true
                                    }
                                },
                                {
                                    "required": [
                                        "d"
                                    ],
                                    "properties": {
                                        "d": true
                                    }
                                }
                            ]
                        }
                    },
                    "oneOf": [
                        {
                            "${'$'}ref": "#/${'$'}defs/one"
                        },
                        {
                            "required": [
                                "a"
                            ],
                            "properties": {
                                "a": true
                            }
                        }
                    ],
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dynamic evalation inside nested refs -> all + a is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores booleans"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores booleans"
     */
    @Test
    fun jsonSchemaSuiteTest_1158() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """non-object instances are valid -> ignores booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores integers"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores integers"
     */
    @Test
    fun jsonSchemaSuiteTest_1159() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """non-object instances are valid -> ignores integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores floats"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores floats"
     */
    @Test
    fun jsonSchemaSuiteTest_1160() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """non-object instances are valid -> ignores floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores arrays"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_1161() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """non-object instances are valid -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores strings"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_1162() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """non-object instances are valid -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "non-object instances are valid -> ignores null"
     *
     * Test ID: "unevaluatedProperties::non-object instances are valid::ignores null"
     */
    @Test
    fun jsonSchemaSuiteTest_1163() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """non-object instances are valid -> ignores null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties with null valued instance properties -> allows null valued properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties with null valued instance properties::allows null valued properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1164() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": null
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "unevaluatedProperties": {
                        "type": "null"
                    }
                }
            """,
            true,
            """unevaluatedProperties with null valued instance properties -> allows null valued properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties not affected by propertyNames -> allows only number properties"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties not affected by propertyNames::allows only number properties"
     */
    @Test
    fun jsonSchemaSuiteTest_1165() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 1
                    },
                    "unevaluatedProperties": {
                        "type": "number"
                    }
                }
            """,
            true,
            """unevaluatedProperties not affected by propertyNames -> allows only number properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties not affected by propertyNames -> string property is invalid"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties not affected by propertyNames::string property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1166() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": "b"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 1
                    },
                    "unevaluatedProperties": {
                        "type": "number"
                    }
                }
            """,
            false,
            """unevaluatedProperties not affected by propertyNames -> string property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can see annotations from if without then and else -> valid in case if is evaluated"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can see annotations from if without then and else::valid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_1167() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "patternProperties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """unevaluatedProperties can see annotations from if without then and else -> valid in case if is evaluated""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "unevaluatedProperties can see annotations from if without then and else -> invalid in case if is evaluated"
     *
     * Test ID: "unevaluatedProperties::unevaluatedProperties can see annotations from if without then and else::invalid in case if is evaluated"
     */
    @Test
    fun jsonSchemaSuiteTest_1168() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": "a"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "if": {
                        "patternProperties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """unevaluatedProperties can see annotations from if without then and else -> invalid in case if is evaluated""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dependentSchemas with unevaluatedProperties -> unevaluatedProperties doesn't consider dependentSchemas"
     *
     * Test ID: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties doesn't consider dependentSchemas"
     */
    @Test
    fun jsonSchemaSuiteTest_1169() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dependentSchemas with unevaluatedProperties -> unevaluatedProperties doesn't consider dependentSchemas""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dependentSchemas with unevaluatedProperties -> unevaluatedProperties doesn't see bar when foo2 is absent"
     *
     * Test ID: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties doesn't see bar when foo2 is absent"
     */
    @Test
    fun jsonSchemaSuiteTest_1170() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            false,
            """dependentSchemas with unevaluatedProperties -> unevaluatedProperties doesn't see bar when foo2 is absent""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/unevaluatedProperties.json`:
     *     "dependentSchemas with unevaluatedProperties -> unevaluatedProperties sees bar when foo2 is present"
     *
     * Test ID: "unevaluatedProperties::dependentSchemas with unevaluatedProperties::unevaluatedProperties sees bar when foo2 is present"
     */
    @Test
    fun jsonSchemaSuiteTest_1171() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo2": "",
                    "bar": ""
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo2": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                        },
                        "foo2": {
                            "properties": {
                                "bar": {
                                }
                            }
                        }
                    },
                    "unevaluatedProperties": false
                }
            """,
            true,
            """dependentSchemas with unevaluatedProperties -> unevaluatedProperties sees bar when foo2 is present""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of integers is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of integers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1172() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> unique array of integers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of integers is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of integers is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1173() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique array of integers is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of more than two integers is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of more than two integers is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1174() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique array of more than two integers is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> numbers are unique if mathematically unequal"
     *
     * Test ID: "uniqueItems::uniqueItems validation::numbers are unique if mathematically unequal"
     */
    @Test
    fun jsonSchemaSuiteTest_1175() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0,
                    1.0,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> numbers are unique if mathematically unequal""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> false is not equal to zero"
     *
     * Test ID: "uniqueItems::uniqueItems validation::false is not equal to zero"
     */
    @Test
    fun jsonSchemaSuiteTest_1176() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> false is not equal to zero""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> true is not equal to one"
     *
     * Test ID: "uniqueItems::uniqueItems validation::true is not equal to one"
     */
    @Test
    fun jsonSchemaSuiteTest_1177() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> true is not equal to one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of strings is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1178() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "baz"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> unique array of strings is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of strings is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1179() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique array of strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1180() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "baz"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> unique array of objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of objects is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of objects is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1181() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique array of objects is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> property order of array of objects is ignored"
     *
     * Test ID: "uniqueItems::uniqueItems validation::property order of array of objects is ignored"
     */
    @Test
    fun jsonSchemaSuiteTest_1182() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar",
                        "bar": "foo"
                    },
                    {
                        "bar": "foo",
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> property order of array of objects is ignored""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of nested objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of nested objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1183() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": false
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> unique array of nested objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of nested objects is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of nested objects is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1184() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique array of nested objects is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of arrays is valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique array of arrays is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1185() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "bar"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> unique array of arrays is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of arrays is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of arrays is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1186() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique array of arrays is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of more than two arrays is invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique array of more than two arrays is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1187() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "bar"
                    ],
                    [
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique array of more than two arrays is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> 1 and true are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::1 and true are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1188() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> 1 and true are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> 0 and false are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::0 and false are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1189() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> 0 and false are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> [1] and [true] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::[1] and [true] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1190() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        1
                    ],
                    [
                        true
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> [1] and [true] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> [0] and [false] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::[0] and [false] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1191() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        0
                    ],
                    [
                        false
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> [0] and [false] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> nested [1] and [true] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::nested [1] and [true] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1192() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            1
                        ],
                        "foo"
                    ],
                    [
                        [
                            true
                        ],
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> nested [1] and [true] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> nested [0] and [false] are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::nested [0] and [false] are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1193() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            0
                        ],
                        "foo"
                    ],
                    [
                        [
                            false
                        ],
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> nested [0] and [false] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> unique heterogeneous types are valid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::unique heterogeneous types are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1194() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    1,
                    "{}"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> unique heterogeneous types are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique heterogeneous types are invalid"
     *
     * Test ID: "uniqueItems::uniqueItems validation::non-unique heterogeneous types are invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_1195() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    {
                    },
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> non-unique heterogeneous types are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> different objects are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::different objects are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1196() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": 1,
                        "b": 2
                    },
                    {
                        "a": 2,
                        "b": 1
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> different objects are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> objects are non-unique despite key order"
     *
     * Test ID: "uniqueItems::uniqueItems validation::objects are non-unique despite key order"
     */
    @Test
    fun jsonSchemaSuiteTest_1197() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": 1,
                        "b": 2
                    },
                    {
                        "b": 2,
                        "a": 1
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems validation -> objects are non-unique despite key order""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> {"a": false} and {"a": 0} are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::{"a": false} and {"a": 0} are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1198() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": false
                    },
                    {
                        "a": 0
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> {"a": false} and {"a": 0} are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems validation -> {"a": true} and {"a": 1} are unique"
     *
     * Test ID: "uniqueItems::uniqueItems validation::{"a": true} and {"a": 1} are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1199() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "a": true
                    },
                    {
                        "a": 1
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems validation -> {"a": true} and {"a": 1} are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1200() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems with an array of items -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1201() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems with an array of items -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [false, false] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[false, false] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1202() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems with an array of items -> [false, false] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [true, true] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::[true, true] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1203() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems with an array of items -> [true, true] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> unique array extended from [false, true] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::unique array extended from [false, true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1204() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems with an array of items -> unique array extended from [false, true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> unique array extended from [true, false] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::unique array extended from [true, false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1205() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            true,
            """uniqueItems with an array of items -> unique array extended from [true, false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> non-unique array extended from [false, true] is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::non-unique array extended from [false, true] is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1206() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems with an array of items -> non-unique array extended from [false, true] is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items -> non-unique array extended from [true, false] is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items::non-unique array extended from [true, false] is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1207() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true
                }
            """,
            false,
            """uniqueItems with an array of items -> non-unique array extended from [true, false] is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1208() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            true,
            """uniqueItems with an array of items and additionalItems=false -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1209() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            true,
            """uniqueItems with an array of items and additionalItems=false -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [false, false] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[false, false] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1210() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            false,
            """uniqueItems with an array of items and additionalItems=false -> [false, false] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [true, true] from items array is not valid"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::[true, true] from items array is not valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1211() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            false,
            """uniqueItems with an array of items and additionalItems=false -> [true, true] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> extra items are invalid even if unique"
     *
     * Test ID: "uniqueItems::uniqueItems with an array of items and additionalItems=false::extra items are invalid even if unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1212() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": true,
                    "items": false
                }
            """,
            false,
            """uniqueItems with an array of items and additionalItems=false -> extra items are invalid even if unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of integers is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of integers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1213() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> unique array of integers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of integers is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of integers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1214() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> non-unique array of integers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> numbers are unique if mathematically unequal"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::numbers are unique if mathematically unequal"
     */
    @Test
    fun jsonSchemaSuiteTest_1215() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1.0,
                    1.0,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> numbers are unique if mathematically unequal""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> false is not equal to zero"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::false is not equal to zero"
     */
    @Test
    fun jsonSchemaSuiteTest_1216() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> false is not equal to zero""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> true is not equal to one"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::true is not equal to one"
     */
    @Test
    fun jsonSchemaSuiteTest_1217() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> true is not equal to one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1218() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "baz"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> unique array of objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1219() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": "bar"
                    },
                    {
                        "foo": "bar"
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> non-unique array of objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of nested objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of nested objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1220() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": false
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> unique array of nested objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of nested objects is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of nested objects is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1221() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    },
                    {
                        "foo": {
                            "bar": {
                                "baz": true
                            }
                        }
                    }
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> non-unique array of nested objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of arrays is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique array of arrays is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1222() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "bar"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> unique array of arrays is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of arrays is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique array of arrays is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1223() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        "foo"
                    ],
                    [
                        "foo"
                    ]
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> non-unique array of arrays is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> 1 and true are unique"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::1 and true are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1224() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> 1 and true are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> 0 and false are unique"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::0 and false are unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1225() {
        
        assertKsonEnforcesSchema(
            """
                [
                    0,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> 0 and false are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique heterogeneous types are valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::unique heterogeneous types are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1226() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> unique heterogeneous types are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique heterogeneous types are valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false validation::non-unique heterogeneous types are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1227() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                    },
                    [
                        1
                    ],
                    true,
                    null,
                    {
                    },
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false validation -> non-unique heterogeneous types are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1228() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1229() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [false, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[false, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1230() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> [false, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [true, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::[true, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1231() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> [true, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> unique array extended from [false, true] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::unique array extended from [false, true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1232() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> unique array extended from [false, true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> unique array extended from [true, false] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::unique array extended from [true, false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1233() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> unique array extended from [true, false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> non-unique array extended from [false, true] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::non-unique array extended from [false, true] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1234() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> non-unique array extended from [false, true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> non-unique array extended from [true, false] is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items::non-unique array extended from [true, false] is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1235() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false,
                    "foo",
                    "foo"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false
                }
            """,
            true,
            """uniqueItems=false with an array of items -> non-unique array extended from [true, false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [false, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1236() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [true, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1237() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [false, false] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[false, false] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1238() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    false
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [false, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [true, true] from items array is valid"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::[true, true] from items array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1239() {
        
        assertKsonEnforcesSchema(
            """
                [
                    true,
                    true
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [true, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> extra items are invalid even if unique"
     *
     * Test ID: "uniqueItems::uniqueItems=false with an array of items and additionalItems=false::extra items are invalid even if unique"
     */
    @Test
    fun jsonSchemaSuiteTest_1240() {
        
        assertKsonEnforcesSchema(
            """
                [
                    false,
                    true,
                    null
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "prefixItems": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "boolean"
                        }
                    ],
                    "uniqueItems": false,
                    "items": false
                }
            """,
            false,
            """uniqueItems=false with an array of items and additionalItems=false -> extra items are invalid even if unique""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "schema that uses custom metaschema with with no validation vocabulary -> applicator vocabulary still works"
     *
     * Test ID: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::applicator vocabulary still works"
     */
    @Test
    fun jsonSchemaSuiteTest_1241() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "badProperty": "this property should not exist"
                }
            """,
            """
                {
                    "${'$'}id": "https://schema/using/no/validation",
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-no-validation.json",
                    "properties": {
                        "badProperty": false,
                        "numberProperty": {
                            "minimum": 10
                        }
                    }
                }
            """,
            false,
            """schema that uses custom metaschema with with no validation vocabulary -> applicator vocabulary still works""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "schema that uses custom metaschema with with no validation vocabulary -> no validation: valid number"
     *
     * Test ID: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::no validation: valid number"
     */
    @Test
    fun jsonSchemaSuiteTest_1242() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "numberProperty": 20
                }
            """,
            """
                {
                    "${'$'}id": "https://schema/using/no/validation",
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-no-validation.json",
                    "properties": {
                        "badProperty": false,
                        "numberProperty": {
                            "minimum": 10
                        }
                    }
                }
            """,
            true,
            """schema that uses custom metaschema with with no validation vocabulary -> no validation: valid number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "schema that uses custom metaschema with with no validation vocabulary -> no validation: invalid number, but it still validates"
     *
     * Test ID: "vocabulary::schema that uses custom metaschema with with no validation vocabulary::no validation: invalid number, but it still validates"
     */
    @Test
    fun jsonSchemaSuiteTest_1243() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "numberProperty": 1
                }
            """,
            """
                {
                    "${'$'}id": "https://schema/using/no/validation",
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-no-validation.json",
                    "properties": {
                        "badProperty": false,
                        "numberProperty": {
                            "minimum": 10
                        }
                    }
                }
            """,
            true,
            """schema that uses custom metaschema with with no validation vocabulary -> no validation: invalid number, but it still validates""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "ignore unrecognized optional vocabulary -> string value"
     *
     * Test ID: "vocabulary::ignore unrecognized optional vocabulary::string value"
     */
    @Test
    fun jsonSchemaSuiteTest_1244() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-optional-vocabulary.json",
                    "type": "number"
                }
            """,
            false,
            """ignore unrecognized optional vocabulary -> string value""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/vocabulary.json`:
     *     "ignore unrecognized optional vocabulary -> number value"
     *
     * Test ID: "vocabulary::ignore unrecognized optional vocabulary::number value"
     */
    @Test
    fun jsonSchemaSuiteTest_1245() {
        
        assertKsonEnforcesSchema(
            """
                20
            """,
            """
                {
                    "${'$'}schema": "http://localhost:1234/draft2020-12/metaschema-optional-vocabulary.json",
                    "type": "number"
                }
            """,
            true,
            """ignore unrecognized optional vocabulary -> number value""")
    }
}
