package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_contains : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array with item matching schema (5) is valid"
     *
     * Test ID: "contains::contains keyword validation::array with item matching schema (5) is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5
                ]
            """,
            """
                {
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword validation::array with item matching schema (5) is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array with item matching schema (6) is valid"
     *
     * Test ID: "contains::contains keyword validation::array with item matching schema (6) is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    6
                ]
            """,
            """
                {
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword validation::array with item matching schema (6) is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array with two items matching schema (5, 6) is valid"
     *
     * Test ID: "contains::contains keyword validation::array with two items matching schema (5, 6) is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5,
                    6
                ]
            """,
            """
                {
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword validation::array with two items matching schema (5, 6) is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array without items matching schema is invalid"
     *
     * Test ID: "contains::contains keyword validation::array without items matching schema is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            false,
            """    schemaTestId: "contains::contains keyword validation::array without items matching schema is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> empty array is invalid"
     *
     * Test ID: "contains::contains keyword validation::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            false,
            """    schemaTestId: "contains::contains keyword validation::empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> not array is valid"
     *
     * Test ID: "contains::contains keyword validation::not array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "contains": {
                        "minimum": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword validation::not array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with const keyword -> array with item 5 is valid"
     *
     * Test ID: "contains::contains keyword with const keyword::array with item 5 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5
                ]
            """,
            """
                {
                    "contains": {
                        "const": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword with const keyword::array with item 5 is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with const keyword -> array with two items 5 is valid"
     *
     * Test ID: "contains::contains keyword with const keyword::array with two items 5 is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    4,
                    5,
                    5
                ]
            """,
            """
                {
                    "contains": {
                        "const": 5
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword with const keyword::array with two items 5 is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with const keyword -> array without item 5 is invalid"
     *
     * Test ID: "contains::contains keyword with const keyword::array without item 5 is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "contains": {
                        "const": 5
                    }
                }
            """,
            false,
            """    schemaTestId: "contains::contains keyword with const keyword::array without item 5 is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema true -> any non-empty array is valid"
     *
     * Test ID: "contains::contains keyword with boolean schema true::any non-empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "contains": true
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword with boolean schema true::any non-empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema true -> empty array is invalid"
     *
     * Test ID: "contains::contains keyword with boolean schema true::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "contains": true
                }
            """,
            false,
            """    schemaTestId: "contains::contains keyword with boolean schema true::empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema false -> any non-empty array is invalid"
     *
     * Test ID: "contains::contains keyword with boolean schema false::any non-empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "contains": false
                }
            """,
            false,
            """    schemaTestId: "contains::contains keyword with boolean schema false::any non-empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema false -> empty array is invalid"
     *
     * Test ID: "contains::contains keyword with boolean schema false::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "contains": false
                }
            """,
            false,
            """    schemaTestId: "contains::contains keyword with boolean schema false::empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema false -> non-arrays are valid"
     *
     * Test ID: "contains::contains keyword with boolean schema false::non-arrays are valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                "contains does not apply to strings"
            """,
            """
                {
                    "contains": false
                }
            """,
            true,
            """    schemaTestId: "contains::contains keyword with boolean schema false::non-arrays are valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> matches items, does not match contains"
     *
     * Test ID: "contains::items + contains::matches items, does not match contains"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2,
                    4,
                    8
                ]
            """,
            """
                {
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            false,
            """    schemaTestId: "contains::items + contains::matches items, does not match contains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> does not match items, matches contains"
     *
     * Test ID: "contains::items + contains::does not match items, matches contains"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                    3,
                    6,
                    9
                ]
            """,
            """
                {
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            false,
            """    schemaTestId: "contains::items + contains::does not match items, matches contains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> matches both items and contains"
     *
     * Test ID: "contains::items + contains::matches both items and contains"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                    6,
                    12
                ]
            """,
            """
                {
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::items + contains::matches both items and contains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> matches neither items nor contains"
     *
     * Test ID: "contains::items + contains::matches neither items nor contains"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    5
                ]
            """,
            """
                {
                    "items": {
                        "multipleOf": 2
                    },
                    "contains": {
                        "multipleOf": 3
                    }
                }
            """,
            false,
            """    schemaTestId: "contains::items + contains::matches neither items nor contains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains with false if subschema -> any non-empty array is valid"
     *
     * Test ID: "contains::contains with false if subschema::any non-empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "contains": {
                        "if": false,
                        "else": true
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains with false if subschema::any non-empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains with false if subschema -> empty array is invalid"
     *
     * Test ID: "contains::contains with false if subschema::empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "contains": {
                        "if": false,
                        "else": true
                    }
                }
            """,
            false,
            """    schemaTestId: "contains::contains with false if subschema::empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains with null instance elements -> allows null items"
     *
     * Test ID: "contains::contains with null instance elements::allows null items"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "contains": {
                        "type": "null"
                    }
                }
            """,
            true,
            """    schemaTestId: "contains::contains with null instance elements::allows null items"    """)
    }
}
