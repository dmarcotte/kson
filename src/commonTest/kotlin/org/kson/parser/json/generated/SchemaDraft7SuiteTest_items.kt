package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_items : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> valid items"
     *
     * Test ID: "items::a schema given for items::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::a schema given for items::valid items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> wrong type of items"
     *
     * Test ID: "items::a schema given for items::wrong type of items"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "x"
                ]
            """,
            """
                {
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "items::a schema given for items::wrong type of items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> ignores non-arrays"
     *
     * Test ID: "items::a schema given for items::ignores non-arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::a schema given for items::ignores non-arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> JavaScript pseudo-array is valid"
     *
     * Test ID: "items::a schema given for items::JavaScript pseudo-array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "0": "invalid",
                    "length": 1
                }
            """,
            """
                {
                    "items": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::a schema given for items::JavaScript pseudo-array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> correct types"
     *
     * Test ID: "items::an array of schemas for items::correct types"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::an array of schemas for items::correct types"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> wrong types"
     *
     * Test ID: "items::an array of schemas for items::wrong types"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    1
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::an array of schemas for items::wrong types"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> incomplete array of items"
     *
     * Test ID: "items::an array of schemas for items::incomplete array of items"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::an array of schemas for items::incomplete array of items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> array with additional items"
     *
     * Test ID: "items::an array of schemas for items::array with additional items"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::an array of schemas for items::array with additional items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> empty array"
     *
     * Test ID: "items::an array of schemas for items::empty array"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::an array of schemas for items::empty array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> JavaScript pseudo-array is valid"
     *
     * Test ID: "items::an array of schemas for items::JavaScript pseudo-array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "0": "invalid",
                    "1": "valid",
                    "length": 2
                }
            """,
            """
                {
                    "items": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "string"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::an array of schemas for items::JavaScript pseudo-array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (true) -> any array is valid"
     *
     * Test ID: "items::items with boolean schema (true)::any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "items": true
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schema (true)::any array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (true) -> empty array is valid"
     *
     * Test ID: "items::items with boolean schema (true)::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "items": true
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schema (true)::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (false) -> any non-empty array is invalid"
     *
     * Test ID: "items::items with boolean schema (false)::any non-empty array is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    true
                ]
            """,
            """
                {
                    "items": false
                }
            """,
            false,
            """    schemaTestId: "items::items with boolean schema (false)::any non-empty array is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (false) -> empty array is valid"
     *
     * Test ID: "items::items with boolean schema (false)::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "items": false
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schema (false)::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schemas -> array with one item is valid"
     *
     * Test ID: "items::items with boolean schemas::array with one item is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "items": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schemas::array with one item is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schemas -> array with two items is invalid"
     *
     * Test ID: "items::items with boolean schemas::array with two items is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo"
                ]
            """,
            """
                {
                    "items": [
                        true,
                        false
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items with boolean schemas::array with two items is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schemas -> empty array is valid"
     *
     * Test ID: "items::items with boolean schemas::empty array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "items": [
                        true,
                        false
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::items with boolean schemas::empty array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> valid items"
     *
     * Test ID: "items::items and subitems::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::items and subitems::valid items" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "definitions": {
                        "item": {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::items and subitems::valid items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> too many items"
     *
     * Test ID: "items::items and subitems::too many items"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "definitions": {
                        "item": {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::too many items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> too many sub-items"
     *
     * Test ID: "items::items and subitems::too many sub-items"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "definitions": {
                        "item": {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::too many sub-items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> wrong item"
     *
     * Test ID: "items::items and subitems::wrong item"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                [
                    {
                        "foo": null
                    },
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "definitions": {
                        "item": {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::wrong item"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> wrong sub-item"
     *
     * Test ID: "items::items and subitems::wrong sub-item"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        },
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "definitions": {
                        "item": {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "items::items and subitems::wrong sub-item"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> fewer items is valid"
     *
     * Test ID: "items::items and subitems::fewer items is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "items::items and subitems::fewer items is valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        {
                            "foo": null
                        }
                    ],
                    [
                        {
                            "foo": null
                        }
                    ]
                ]
            """,
            """
                {
                    "definitions": {
                        "item": {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                },
                                {
                                    "${'$'}ref": "#/definitions/sub-item"
                                }
                            ]
                        },
                        "sub-item": {
                            "type": "object",
                            "required": [
                                "foo"
                            ]
                        }
                    },
                    "type": "array",
                    "additionalItems": false,
                    "items": [
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        },
                        {
                            "${'$'}ref": "#/definitions/item"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::items and subitems::fewer items is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "nested items -> valid nested array"
     *
     * Test ID: "items::nested items::valid nested array"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            [
                                1
                            ]
                        ],
                        [
                            [
                                2
                            ],
                            [
                                3
                            ]
                        ]
                    ],
                    [
                        [
                            [
                                4
                            ],
                            [
                                5
                            ],
                            [
                                6
                            ]
                        ]
                    ]
                ]
            """,
            """
                {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "items::nested items::valid nested array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "nested items -> nested array with invalid type"
     *
     * Test ID: "items::nested items::nested array with invalid type"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            [
                                "1"
                            ]
                        ],
                        [
                            [
                                2
                            ],
                            [
                                3
                            ]
                        ]
                    ],
                    [
                        [
                            [
                                4
                            ],
                            [
                                5
                            ],
                            [
                                6
                            ]
                        ]
                    ]
                ]
            """,
            """
                {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "items::nested items::nested array with invalid type"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "nested items -> not deep enough"
     *
     * Test ID: "items::nested items::not deep enough"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                [
                    [
                        [
                            1
                        ],
                        [
                            2
                        ],
                        [
                            3
                        ]
                    ],
                    [
                        [
                            4
                        ],
                        [
                            5
                        ],
                        [
                            6
                        ]
                    ]
                ]
            """,
            """
                {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "items::nested items::not deep enough"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "single-form items with null instance elements -> allows null elements"
     *
     * Test ID: "items::single-form items with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "items": {
                        "type": "null"
                    }
                }
            """,
            true,
            """    schemaTestId: "items::single-form items with null instance elements::allows null elements"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "array-form items with null instance elements -> allows null elements"
     *
     * Test ID: "items::array-form items with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "null"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "items::array-form items with null instance elements::allows null elements"    """)
    }
}
