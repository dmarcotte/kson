package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_dynamicRef : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor::An array of strings is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor::An array containing non-strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-anchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}anchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef to an ${'$'}anchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor::An array of strings is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-anchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}dynamicRef": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}anchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef to an ${'$'}anchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor::An array containing non-strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/ref-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}ref": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}ref to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor::An array of strings is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/ref-dynamicAnchor-same-schema/root",
                    "type": "array",
                    "items": {
                        "${'$'}ref": "#items"
                    },
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::A ${'$'}ref to a ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to an ${'$'}anchor::An array containing non-strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/typical-dynamic-resolution/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef resolves to the first ${'$'}dynamicAnchor still in scope that is encountered when the schema is evaluated::An array of strings is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/typical-dynamic-resolution/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef resolves to the first ${'$'}dynamicAnchor still in scope that is encountered when the schema is evaluated::An array containing non-strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef without anchor in fragment behaves identical to $ref -> An array of strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef without anchor in fragment behaves identical to $ref::An array of strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-without-anchor/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#/${'$'}defs/items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items",
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef without anchor in fragment behaves identical to ${'$'}ref::An array of strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef without anchor in fragment behaves identical to $ref -> An array of numbers is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef without anchor in fragment behaves identical to $ref::An array of numbers is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    24,
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamicRef-without-anchor/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#/${'$'}defs/items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items",
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef without anchor in fragment behaves identical to ${'$'}ref::An array of numbers is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution -> An array of strings is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution::An array of strings is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-with-intermediate-scopes/root",
                    "${'$'}ref": "intermediate-scope",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "intermediate-scope": {
                            "${'$'}id": "intermediate-scope",
                            "${'$'}ref": "list"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef with intermediate scopes that don't include a matching ${'$'}dynamicAnchor does not affect dynamic scope resolution::An array of strings is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution -> An array containing non-strings is invalid"
     *
     * Test ID: "dynamicRef::A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution::An array containing non-strings is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-with-intermediate-scopes/root",
                    "${'$'}ref": "intermediate-scope",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "intermediate-scope": {
                            "${'$'}id": "intermediate-scope",
                            "${'$'}ref": "list"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef with intermediate scopes that don't include a matching ${'$'}dynamicAnchor does not affect dynamic scope resolution::An array containing non-strings is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "An $anchor with the same name as a $dynamicAnchor is not used for dynamic scope resolution -> Any array is valid"
     *
     * Test ID: "dynamicRef::An $anchor with the same name as a $dynamicAnchor is not used for dynamic scope resolution::Any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-ignores-anchors/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}anchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to satisfy the bookending requirement",
                                    "${'$'}dynamicAnchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::An ${'$'}anchor with the same name as a ${'$'}dynamicAnchor is not used for dynamic scope resolution::Any array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef without a matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor -> Any array is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef without a matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor::Any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-resolution-without-bookend/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to give the reference somewhere to resolve to when it behaves like ${'$'}ref",
                                    "${'$'}anchor": "items"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef without a matching ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to ${'$'}anchor::Any array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef with a non-matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor -> Any array is valid"
     *
     * Test ID: "dynamicRef::A $dynamicRef with a non-matching $dynamicAnchor in the same schema resource behaves like a normal $ref to $anchor::Any array is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    42
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/unmatched-dynamic-anchor/root",
                    "${'$'}ref": "list",
                    "${'$'}defs": {
                        "foo": {
                            "${'$'}dynamicAnchor": "items",
                            "type": "string"
                        },
                        "list": {
                            "${'$'}id": "list",
                            "type": "array",
                            "items": {
                                "${'$'}dynamicRef": "#items"
                            },
                            "${'$'}defs": {
                                "items": {
                                    "${'$'}comment": "This is only needed to give the reference somewhere to resolve to when it behaves like ${'$'}ref",
                                    "${'$'}anchor": "items",
                                    "${'$'}dynamicAnchor": "foo"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef with a non-matching ${'$'}dynamicAnchor in the same schema resource behaves like a normal ${'$'}ref to ${'$'}anchor::Any array is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope -> The recursive part is valid against the root"
     *
     * Test ID: "dynamicRef::A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope::The recursive part is valid against the root"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "pass",
                    "bar": {
                        "baz": {
                            "foo": "pass"
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/relative-dynamic-reference/root",
                    "${'$'}dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "const": "pass"
                        }
                    },
                    "${'$'}ref": "extended",
                    "${'$'}defs": {
                        "extended": {
                            "${'$'}id": "extended",
                            "${'$'}dynamicAnchor": "meta",
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "${'$'}ref": "bar"
                                }
                            }
                        },
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "object",
                            "properties": {
                                "baz": {
                                    "${'$'}dynamicRef": "extended#meta"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef that initially resolves to a schema with a matching ${'$'}dynamicAnchor resolves to the first ${'$'}dynamicAnchor in the dynamic scope::The recursive part is valid against the root"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope -> The recursive part is not valid against the root"
     *
     * Test ID: "dynamicRef::A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope::The recursive part is not valid against the root"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "pass",
                    "bar": {
                        "baz": {
                            "foo": "fail"
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/relative-dynamic-reference/root",
                    "${'$'}dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "const": "pass"
                        }
                    },
                    "${'$'}ref": "extended",
                    "${'$'}defs": {
                        "extended": {
                            "${'$'}id": "extended",
                            "${'$'}dynamicAnchor": "meta",
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "${'$'}ref": "bar"
                                }
                            }
                        },
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "object",
                            "properties": {
                                "baz": {
                                    "${'$'}dynamicRef": "extended#meta"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef that initially resolves to a schema with a matching ${'$'}dynamicAnchor resolves to the first ${'$'}dynamicAnchor in the dynamic scope::The recursive part is not valid against the root"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "A $dynamicRef that initially resolves to a schema without a matching $dynamicAnchor behaves like a normal $ref to $anchor -> The recursive part doesn't need to validate against the root"
     *
     * Test ID: "dynamicRef::A $dynamicRef that initially resolves to a schema without a matching $dynamicAnchor behaves like a normal $ref to $anchor::The recursive part doesn't need to validate against the root"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "pass",
                    "bar": {
                        "baz": {
                            "foo": "fail"
                        }
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/relative-dynamic-reference-without-bookend/root",
                    "${'$'}dynamicAnchor": "meta",
                    "type": "object",
                    "properties": {
                        "foo": {
                            "const": "pass"
                        }
                    },
                    "${'$'}ref": "extended",
                    "${'$'}defs": {
                        "extended": {
                            "${'$'}id": "extended",
                            "${'$'}anchor": "meta",
                            "type": "object",
                            "properties": {
                                "bar": {
                                    "${'$'}ref": "bar"
                                }
                            }
                        },
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "object",
                            "properties": {
                                "baz": {
                                    "${'$'}dynamicRef": "extended#meta"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::A ${'$'}dynamicRef that initially resolves to a schema without a matching ${'$'}dynamicAnchor behaves like a normal ${'$'}ref to ${'$'}anchor::The recursive part doesn't need to validate against the root"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> number list with number values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::number list with number values"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "numbers",
                    "list": [
                        1.1
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::multiple dynamic paths to the ${'$'}dynamicRef keyword::number list with number values"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> number list with string values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::number list with string values"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "numbers",
                    "list": [
                        "foo"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::multiple dynamic paths to the ${'$'}dynamicRef keyword::number list with string values"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> string list with number values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::string list with number values"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "strings",
                    "list": [
                        1.1
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::multiple dynamic paths to the ${'$'}dynamicRef keyword::string list with number values"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "multiple dynamic paths to the $dynamicRef keyword -> string list with string values"
     *
     * Test ID: "dynamicRef::multiple dynamic paths to the $dynamicRef keyword::string list with string values"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "kindOfList": "strings",
                    "list": [
                        "foo"
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-with-multiple-paths/main",
                    "if": {
                        "properties": {
                            "kindOfList": {
                                "const": "numbers"
                            }
                        },
                        "required": [
                            "kindOfList"
                        ]
                    },
                    "then": {
                        "${'$'}ref": "numberList"
                    },
                    "else": {
                        "${'$'}ref": "stringList"
                    },
                    "${'$'}defs": {
                        "genericList": {
                            "${'$'}id": "genericList",
                            "properties": {
                                "list": {
                                    "items": {
                                        "${'$'}dynamicRef": "#itemType"
                                    }
                                }
                            },
                            "${'$'}defs": {
                                "defaultItemType": {
                                    "${'$'}comment": "Only needed to satisfy bookending requirement",
                                    "${'$'}dynamicAnchor": "itemType"
                                }
                            }
                        },
                        "numberList": {
                            "${'$'}id": "numberList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "number"
                                }
                            },
                            "${'$'}ref": "genericList"
                        },
                        "stringList": {
                            "${'$'}id": "stringList",
                            "${'$'}defs": {
                                "itemType": {
                                    "${'$'}dynamicAnchor": "itemType",
                                    "type": "string"
                                }
                            },
                            "${'$'}ref": "genericList"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::multiple dynamic paths to the ${'$'}dynamicRef keyword::string list with string values"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "after leaving a dynamic scope, it is not used by a $dynamicRef -> string matches /$defs/thingy, but the $dynamicRef does not stop here"
     *
     * Test ID: "dynamicRef::after leaving a dynamic scope, it is not used by a $dynamicRef::string matches /$defs/thingy, but the $dynamicRef does not stop here"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                "a string"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
                    "if": {
                        "${'$'}id": "first_scope",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is first_scope#thingy",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "number"
                            }
                        }
                    },
                    "then": {
                        "${'$'}id": "second_scope",
                        "${'$'}ref": "start",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is second_scope#thingy, the final destination of the ${'$'}dynamicRef",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "null"
                            }
                        }
                    },
                    "${'$'}defs": {
                        "start": {
                            "${'$'}comment": "this is the landing spot from ${'$'}ref",
                            "${'$'}id": "start",
                            "${'$'}dynamicRef": "inner_scope#thingy"
                        },
                        "thingy": {
                            "${'$'}comment": "this is the first stop for the ${'$'}dynamicRef",
                            "${'$'}id": "inner_scope",
                            "${'$'}dynamicAnchor": "thingy",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::after leaving a dynamic scope, it is not used by a ${'$'}dynamicRef::string matches /${'$'}defs/thingy, but the ${'$'}dynamicRef does not stop here"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "after leaving a dynamic scope, it is not used by a $dynamicRef -> first_scope is not in dynamic scope for the $dynamicRef"
     *
     * Test ID: "dynamicRef::after leaving a dynamic scope, it is not used by a $dynamicRef::first_scope is not in dynamic scope for the $dynamicRef"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                42
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
                    "if": {
                        "${'$'}id": "first_scope",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is first_scope#thingy",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "number"
                            }
                        }
                    },
                    "then": {
                        "${'$'}id": "second_scope",
                        "${'$'}ref": "start",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is second_scope#thingy, the final destination of the ${'$'}dynamicRef",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "null"
                            }
                        }
                    },
                    "${'$'}defs": {
                        "start": {
                            "${'$'}comment": "this is the landing spot from ${'$'}ref",
                            "${'$'}id": "start",
                            "${'$'}dynamicRef": "inner_scope#thingy"
                        },
                        "thingy": {
                            "${'$'}comment": "this is the first stop for the ${'$'}dynamicRef",
                            "${'$'}id": "inner_scope",
                            "${'$'}dynamicAnchor": "thingy",
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::after leaving a dynamic scope, it is not used by a ${'$'}dynamicRef::first_scope is not in dynamic scope for the ${'$'}dynamicRef"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "after leaving a dynamic scope, it is not used by a $dynamicRef -> /then/$defs/thingy is the final stop for the $dynamicRef"
     *
     * Test ID: "dynamicRef::after leaving a dynamic scope, it is not used by a $dynamicRef::/then/$defs/thingy is the final stop for the $dynamicRef"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-leaving-dynamic-scope/main",
                    "if": {
                        "${'$'}id": "first_scope",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is first_scope#thingy",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "number"
                            }
                        }
                    },
                    "then": {
                        "${'$'}id": "second_scope",
                        "${'$'}ref": "start",
                        "${'$'}defs": {
                            "thingy": {
                                "${'$'}comment": "this is second_scope#thingy, the final destination of the ${'$'}dynamicRef",
                                "${'$'}dynamicAnchor": "thingy",
                                "type": "null"
                            }
                        }
                    },
                    "${'$'}defs": {
                        "start": {
                            "${'$'}comment": "this is the landing spot from ${'$'}ref",
                            "${'$'}id": "start",
                            "${'$'}dynamicRef": "inner_scope#thingy"
                        },
                        "thingy": {
                            "${'$'}comment": "this is the first stop for the ${'$'}dynamicRef",
                            "${'$'}id": "inner_scope",
                            "${'$'}dynamicAnchor": "thingy",
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::after leaving a dynamic scope, it is not used by a ${'$'}dynamicRef::/then/${'$'}defs/thingy is the final stop for the ${'$'}dynamicRef"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "strict-tree schema, guards against misspelled properties -> instance with misspelled field"
     *
     * Test ID: "dynamicRef::strict-tree schema, guards against misspelled properties::instance with misspelled field"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "children": [
                        {
                            "daat": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-tree.json",
                    "${'$'}dynamicAnchor": "node",
                    "${'$'}ref": "tree.json",
                    "unevaluatedProperties": false
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::strict-tree schema, guards against misspelled properties::instance with misspelled field"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "strict-tree schema, guards against misspelled properties -> instance with correct field"
     *
     * Test ID: "dynamicRef::strict-tree schema, guards against misspelled properties::instance with correct field"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "children": [
                        {
                            "data": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-tree.json",
                    "${'$'}dynamicAnchor": "node",
                    "${'$'}ref": "tree.json",
                    "unevaluatedProperties": false
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::strict-tree schema, guards against misspelled properties::instance with correct field"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "tests for implementation dynamic anchor and reference link -> incorrect parent schema"
     *
     * Test ID: "dynamicRef::tests for implementation dynamic anchor and reference link::incorrect parent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible.json",
                    "${'$'}ref": "extendible-dynamic-ref.json",
                    "${'$'}defs": {
                        "elements": {
                            "${'$'}dynamicAnchor": "elements",
                            "properties": {
                                "a": true
                            },
                            "required": [
                                "a"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::tests for implementation dynamic anchor and reference link::incorrect parent schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "tests for implementation dynamic anchor and reference link -> incorrect extended schema"
     *
     * Test ID: "dynamicRef::tests for implementation dynamic anchor and reference link::incorrect extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_29() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "b": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible.json",
                    "${'$'}ref": "extendible-dynamic-ref.json",
                    "${'$'}defs": {
                        "elements": {
                            "${'$'}dynamicAnchor": "elements",
                            "properties": {
                                "a": true
                            },
                            "required": [
                                "a"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::tests for implementation dynamic anchor and reference link::incorrect extended schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "tests for implementation dynamic anchor and reference link -> correct extended schema"
     *
     * Test ID: "dynamicRef::tests for implementation dynamic anchor and reference link::correct extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_30() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "a": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible.json",
                    "${'$'}ref": "extendible-dynamic-ref.json",
                    "${'$'}defs": {
                        "elements": {
                            "${'$'}dynamicAnchor": "elements",
                            "properties": {
                                "a": true
                            },
                            "required": [
                                "a"
                            ],
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::tests for implementation dynamic anchor and reference link::correct extended schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $defs first -> incorrect parent schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $defs first::incorrect parent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_31() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-defs-first.json",
                    "allOf": [
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        },
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}defs first::incorrect parent schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $defs first -> incorrect extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $defs first::incorrect extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_32() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "b": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-defs-first.json",
                    "allOf": [
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        },
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}defs first::incorrect extended schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $defs first -> correct extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $defs first::correct extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_33() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "a": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-defs-first.json",
                    "allOf": [
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        },
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}defs first::correct extended schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $ref first -> incorrect parent schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $ref first::incorrect parent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_34() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": true
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-ref-first.json",
                    "allOf": [
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        },
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}ref first::incorrect parent schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $ref first -> incorrect extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $ref first::incorrect extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_35() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "b": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-ref-first.json",
                    "allOf": [
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        },
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        }
                    ]
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}ref first::incorrect extended schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref and $dynamicAnchor are independent of order - $ref first -> correct extended schema"
     *
     * Test ID: "dynamicRef::$ref and $dynamicAnchor are independent of order - $ref first::correct extended schema"
     */
    @Test
    fun jsonSchemaSuiteTest_36() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "elements": [
                        {
                            "a": 1
                        }
                    ]
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "http://localhost:1234/draft2020-12/strict-extendible-allof-ref-first.json",
                    "allOf": [
                        {
                            "${'$'}defs": {
                                "elements": {
                                    "${'$'}dynamicAnchor": "elements",
                                    "properties": {
                                        "a": true
                                    },
                                    "required": [
                                        "a"
                                    ],
                                    "additionalProperties": false
                                }
                            }
                        },
                        {
                            "${'$'}ref": "extendible-dynamic-ref.json"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::${'$'}ref and ${'$'}dynamicAnchor are independent of order - ${'$'}ref first::correct extended schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref to $dynamicRef finds detached $dynamicAnchor -> number is valid"
     *
     * Test ID: "dynamicRef::$ref to $dynamicRef finds detached $dynamicAnchor::number is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_37() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/draft2020-12/detached-dynamicref.json#/${'$'}defs/foo"
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::${'$'}ref to ${'$'}dynamicRef finds detached ${'$'}dynamicAnchor::number is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$ref to $dynamicRef finds detached $dynamicAnchor -> non-number is invalid"
     *
     * Test ID: "dynamicRef::$ref to $dynamicRef finds detached $dynamicAnchor::non-number is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_38() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {
                    "${'$'}ref": "http://localhost:1234/draft2020-12/detached-dynamicref.json#/${'$'}defs/foo"
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::${'$'}ref to ${'$'}dynamicRef finds detached ${'$'}dynamicAnchor::non-number is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef points to a boolean schema -> follow $dynamicRef to a true schema"
     *
     * Test ID: "dynamicRef::$dynamicRef points to a boolean schema::follow $dynamicRef to a true schema"
     */
    @Test
    fun jsonSchemaSuiteTest_39() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "true": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "true": true,
                        "false": false
                    },
                    "properties": {
                        "true": {
                            "${'$'}dynamicRef": "#/${'$'}defs/true"
                        },
                        "false": {
                            "${'$'}dynamicRef": "#/${'$'}defs/false"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::${'$'}dynamicRef points to a boolean schema::follow ${'$'}dynamicRef to a true schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef points to a boolean schema -> follow $dynamicRef to a false schema"
     *
     * Test ID: "dynamicRef::$dynamicRef points to a boolean schema::follow $dynamicRef to a false schema"
     */
    @Test
    fun jsonSchemaSuiteTest_40() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "false": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}defs": {
                        "true": true,
                        "false": false
                    },
                    "properties": {
                        "true": {
                            "${'$'}dynamicRef": "#/${'$'}defs/true"
                        },
                        "false": {
                            "${'$'}dynamicRef": "#/${'$'}defs/false"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::${'$'}dynamicRef points to a boolean schema::follow ${'$'}dynamicRef to a false schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef skips over intermediate resources - direct reference -> integer property passes"
     *
     * Test ID: "dynamicRef::$dynamicRef skips over intermediate resources - direct reference::integer property passes"
     */
    @Test
    fun jsonSchemaSuiteTest_41() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar-item": {
                        "content": 42
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-skips-intermediate-resource/main",
                    "type": "object",
                    "properties": {
                        "bar-item": {
                            "${'$'}ref": "item"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "item"
                            },
                            "${'$'}defs": {
                                "item": {
                                    "${'$'}id": "item",
                                    "type": "object",
                                    "properties": {
                                        "content": {
                                            "${'$'}dynamicRef": "#content"
                                        }
                                    },
                                    "${'$'}defs": {
                                        "defaultContent": {
                                            "${'$'}dynamicAnchor": "content",
                                            "type": "integer"
                                        }
                                    }
                                },
                                "content": {
                                    "${'$'}dynamicAnchor": "content",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dynamicRef::${'$'}dynamicRef skips over intermediate resources - direct reference::integer property passes"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dynamicRef.json`:
     *     "$dynamicRef skips over intermediate resources - direct reference -> string property fails"
     *
     * Test ID: "dynamicRef::$dynamicRef skips over intermediate resources - direct reference::string property fails"
     */
    @Test
    fun jsonSchemaSuiteTest_42() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar-item": {
                        "content": "value"
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "${'$'}id": "https://test.json-schema.org/dynamic-ref-skips-intermediate-resource/main",
                    "type": "object",
                    "properties": {
                        "bar-item": {
                            "${'$'}ref": "item"
                        }
                    },
                    "${'$'}defs": {
                        "bar": {
                            "${'$'}id": "bar",
                            "type": "array",
                            "items": {
                                "${'$'}ref": "item"
                            },
                            "${'$'}defs": {
                                "item": {
                                    "${'$'}id": "item",
                                    "type": "object",
                                    "properties": {
                                        "content": {
                                            "${'$'}dynamicRef": "#content"
                                        }
                                    },
                                    "${'$'}defs": {
                                        "defaultContent": {
                                            "${'$'}dynamicAnchor": "content",
                                            "type": "integer"
                                        }
                                    }
                                },
                                "content": {
                                    "${'$'}dynamicAnchor": "content",
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dynamicRef::${'$'}dynamicRef skips over intermediate resources - direct reference::string property fails"    """)
    }
}
