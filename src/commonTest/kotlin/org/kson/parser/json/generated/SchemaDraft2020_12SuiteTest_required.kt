package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_required : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> present required property is valid"
     *
     * Test ID: "required::required validation::present required property is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required validation::present required property is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> non-present required property is invalid"
     *
     * Test ID: "required::required validation::non-present required property is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            false,
            """    schemaTestId: "required::required validation::non-present required property is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> ignores arrays"
     *
     * Test ID: "required::required validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required validation::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> ignores strings"
     *
     * Test ID: "required::required validation::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required validation::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required validation -> ignores other non-objects"
     *
     * Test ID: "required::required validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        },
                        "bar": {
                        }
                    },
                    "required": [
                        "foo"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required validation::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required default validation -> not required by default"
     *
     * Test ID: "required::required default validation::not required by default"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "required::required default validation::not required by default"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required with empty array -> property not required"
     *
     * Test ID: "required::required with empty array::property not required"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "required": [
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required with empty array::property not required"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required with escaped characters -> object with all properties present is valid"
     *
     * Test ID: "required::required with escaped characters::object with all properties present is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": 1,
                    "foo\"bar": 1,
                    "foo\\bar": 1,
                    "foo\rbar": 1,
                    "foo\tbar": 1,
                    "foo\fbar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "foo\nbar",
                        "foo\"bar",
                        "foo\\bar",
                        "foo\rbar",
                        "foo\tbar",
                        "foo\fbar"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required with escaped characters::object with all properties present is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required with escaped characters -> object with some properties missing is invalid"
     *
     * Test ID: "required::required with escaped characters::object with some properties missing is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\nbar": "1",
                    "foo\"bar": "1"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "foo\nbar",
                        "foo\"bar",
                        "foo\\bar",
                        "foo\rbar",
                        "foo\tbar",
                        "foo\fbar"
                    ]
                }
            """,
            false,
            """    schemaTestId: "required::required with escaped characters::object with some properties missing is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> ignores arrays"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required properties whose names are Javascript object property names::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> ignores other non-objects"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required properties whose names are Javascript object property names::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> none of the properties mentioned"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::none of the properties mentioned"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """    schemaTestId: "required::required properties whose names are Javascript object property names::none of the properties mentioned"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> __proto__ present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::__proto__ present"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": "foo"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """    schemaTestId: "required::required properties whose names are Javascript object property names::__proto__ present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> toString present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::toString present"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "toString": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """    schemaTestId: "required::required properties whose names are Javascript object property names::toString present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> constructor present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::constructor present"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "constructor": {
                        "length": 37
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            false,
            """    schemaTestId: "required::required properties whose names are Javascript object property names::constructor present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/required.json`:
     *     "required properties whose names are Javascript object property names -> all present"
     *
     * Test ID: "required::required properties whose names are Javascript object property names::all present"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {
                    "__proto__": 12,
                    "toString": {
                        "length": "foo"
                    },
                    "constructor": 37
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "required": [
                        "__proto__",
                        "toString",
                        "constructor"
                    ]
                }
            """,
            true,
            """    schemaTestId: "required::required properties whose names are Javascript object property names::all present"    """)
    }
}
