package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_minContains : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains without contains is ignored -> one item valid against lone minContains"
     *
     * Test ID: "minContains::minContains without contains is ignored::one item valid against lone minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minContains": 1
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains without contains is ignored::one item valid against lone minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains without contains is ignored -> zero items still valid against lone minContains"
     *
     * Test ID: "minContains::minContains without contains is ignored::zero items still valid against lone minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "minContains": 1
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains without contains is ignored::zero items still valid against lone minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> empty data"
     *
     * Test ID: "minContains::minContains=1 with contains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            false,
            """    schemaTestId: "minContains::minContains=1 with contains::empty data"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> no elements match"
     *
     * Test ID: "minContains::minContains=1 with contains::no elements match"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            false,
            """    schemaTestId: "minContains::minContains=1 with contains::no elements match"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> single element matches, valid minContains"
     *
     * Test ID: "minContains::minContains=1 with contains::single element matches, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains=1 with contains::single element matches, valid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> some elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=1 with contains::some elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains=1 with contains::some elements match, valid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=1 with contains -> all elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=1 with contains::all elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 1
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains=1 with contains::all elements match, valid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> empty data"
     *
     * Test ID: "minContains::minContains=2 with contains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            false,
            """    schemaTestId: "minContains::minContains=2 with contains::empty data"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> all elements match, invalid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains::all elements match, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            false,
            """    schemaTestId: "minContains::minContains=2 with contains::all elements match, invalid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> some elements match, invalid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains::some elements match, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            false,
            """    schemaTestId: "minContains::minContains=2 with contains::some elements match, invalid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> all elements match, valid minContains (exactly as needed)"
     *
     * Test ID: "minContains::minContains=2 with contains::all elements match, valid minContains (exactly as needed)"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains=2 with contains::all elements match, valid minContains (exactly as needed)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> all elements match, valid minContains (more than needed)"
     *
     * Test ID: "minContains::minContains=2 with contains::all elements match, valid minContains (more than needed)"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains=2 with contains::all elements match, valid minContains (more than needed)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains -> some elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains::some elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains=2 with contains::some elements match, valid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains with a decimal value -> one element matches, invalid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains with a decimal value::one element matches, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2.0
                }
            """,
            false,
            """    schemaTestId: "minContains::minContains=2 with contains with a decimal value::one element matches, invalid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains=2 with contains with a decimal value -> both elements match, valid minContains"
     *
     * Test ID: "minContains::minContains=2 with contains with a decimal value::both elements match, valid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 2.0
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains=2 with contains with a decimal value::both elements match, valid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> empty data"
     *
     * Test ID: "minContains::maxContains = minContains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            false,
            """    schemaTestId: "minContains::maxContains = minContains::empty data"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> all elements match, invalid minContains"
     *
     * Test ID: "minContains::maxContains = minContains::all elements match, invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            false,
            """    schemaTestId: "minContains::maxContains = minContains::all elements match, invalid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> all elements match, invalid maxContains"
     *
     * Test ID: "minContains::maxContains = minContains::all elements match, invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            false,
            """    schemaTestId: "minContains::maxContains = minContains::all elements match, invalid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains = minContains -> all elements match, valid maxContains and minContains"
     *
     * Test ID: "minContains::maxContains = minContains::all elements match, valid maxContains and minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 2,
                    "minContains": 2
                }
            """,
            true,
            """    schemaTestId: "minContains::maxContains = minContains::all elements match, valid maxContains and minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> empty data"
     *
     * Test ID: "minContains::maxContains < minContains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """    schemaTestId: "minContains::maxContains < minContains::empty data"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> invalid minContains"
     *
     * Test ID: "minContains::maxContains < minContains::invalid minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """    schemaTestId: "minContains::maxContains < minContains::invalid minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> invalid maxContains"
     *
     * Test ID: "minContains::maxContains < minContains::invalid maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """    schemaTestId: "minContains::maxContains < minContains::invalid maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "maxContains < minContains -> invalid maxContains and minContains"
     *
     * Test ID: "minContains::maxContains < minContains::invalid maxContains and minContains"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "maxContains": 1,
                    "minContains": 3
                }
            """,
            false,
            """    schemaTestId: "minContains::maxContains < minContains::invalid maxContains and minContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 -> empty data"
     *
     * Test ID: "minContains::minContains = 0::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains = 0::empty data"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 -> minContains = 0 makes contains always pass"
     *
     * Test ID: "minContains::minContains = 0::minContains = 0 makes contains always pass"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                [
                    2
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains = 0::minContains = 0 makes contains always pass"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 with maxContains -> empty data"
     *
     * Test ID: "minContains::minContains = 0 with maxContains::empty data"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0,
                    "maxContains": 1
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains = 0 with maxContains::empty data"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 with maxContains -> not more than maxContains"
     *
     * Test ID: "minContains::minContains = 0 with maxContains::not more than maxContains"
     */
    @Test
    fun jsonSchemaSuiteTest_27() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0,
                    "maxContains": 1
                }
            """,
            true,
            """    schemaTestId: "minContains::minContains = 0 with maxContains::not more than maxContains"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/minContains.json`:
     *     "minContains = 0 with maxContains -> too many"
     *
     * Test ID: "minContains::minContains = 0 with maxContains::too many"
     */
    @Test
    fun jsonSchemaSuiteTest_28() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    1
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "contains": {
                        "const": 1
                    },
                    "minContains": 0,
                    "maxContains": 1
                }
            """,
            false,
            """    schemaTestId: "minContains::minContains = 0 with maxContains::too many"    """)
    }
}
