package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_dependentSchemas : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> valid"
     *
     * Test ID: "dependentSchemas::single dependency::valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::single dependency::valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> no dependency"
     *
     * Test ID: "dependentSchemas::single dependency::no dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::single dependency::no dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> wrong type"
     *
     * Test ID: "dependentSchemas::single dependency::wrong type"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::single dependency::wrong type" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::single dependency::wrong type"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> wrong type other"
     *
     * Test ID: "dependentSchemas::single dependency::wrong type other"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::single dependency::wrong type other" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 2,
                    "bar": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::single dependency::wrong type other"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> wrong type both"
     *
     * Test ID: "dependentSchemas::single dependency::wrong type both"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::single dependency::wrong type both" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "quux",
                    "bar": "quux"
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::single dependency::wrong type both"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> ignores arrays"
     *
     * Test ID: "dependentSchemas::single dependency::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "bar"
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::single dependency::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> ignores strings"
     *
     * Test ID: "dependentSchemas::single dependency::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::single dependency::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "single dependency -> ignores other non-objects"
     *
     * Test ID: "dependentSchemas::single dependency::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "bar": {
                            "properties": {
                                "foo": {
                                    "type": "integer"
                                },
                                "bar": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::single dependency::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> object with property having schema true is valid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::object with property having schema true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::boolean subschemas::object with property having schema true is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> object with property having schema false is invalid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::object with property having schema false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::boolean subschemas::object with property having schema false is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::boolean subschemas::object with property having schema false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> object with both properties is invalid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::object with both properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::boolean subschemas::object with both properties is invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::boolean subschemas::object with both properties is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "boolean subschemas -> empty object is valid"
     *
     * Test ID: "dependentSchemas::boolean subschemas::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo": true,
                        "bar": false
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::boolean subschemas::empty object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted tab"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted tab"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\tbar": 1,
                    "a": 2,
                    "b": 3,
                    "c": 4
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::dependencies with escaped characters::quoted tab"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted quote"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted quote"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::dependencies with escaped characters::quoted quote" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": {
                        "foo\"bar": 1
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::dependencies with escaped characters::quoted quote"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted tab invalid under dependent schema"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted tab invalid under dependent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::dependencies with escaped characters::quoted tab invalid under dependent schema" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo\tbar": 1,
                    "a": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::dependencies with escaped characters::quoted tab invalid under dependent schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependencies with escaped characters -> quoted quote invalid under dependent schema"
     *
     * Test ID: "dependentSchemas::dependencies with escaped characters::quoted quote invalid under dependent schema"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::dependencies with escaped characters::quoted quote invalid under dependent schema" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo'bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "dependentSchemas": {
                        "foo\tbar": {
                            "minProperties": 4
                        },
                        "foo'bar": {
                            "required": [
                                "foo\"bar"
                            ]
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::dependencies with escaped characters::quoted quote invalid under dependent schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> matches root"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::matches root"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::dependent subschema incompatible with root::matches root" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::dependent subschema incompatible with root::matches root"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> matches dependency"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::matches dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::dependent subschema incompatible with root::matches dependency"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> matches both"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::matches both"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
       /**
        * TODO implement the schema functionality under test here and remove the exclusion entry
        * "dependentSchemas::dependent subschema incompatible with root::matches both" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "dependentSchemas::dependent subschema incompatible with root::matches both"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/dependentSchemas.json`:
     *     "dependent subschema incompatible with root -> no dependency"
     *
     * Test ID: "dependentSchemas::dependent subschema incompatible with root::no dependency"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "baz": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "properties": {
                        "foo": {
                        }
                    },
                    "dependentSchemas": {
                        "foo": {
                            "properties": {
                                "bar": {
                                }
                            },
                            "additionalProperties": false
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "dependentSchemas::dependent subschema incompatible with root::no dependency"    """)
    }
}
