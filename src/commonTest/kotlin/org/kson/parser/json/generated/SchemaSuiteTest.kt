package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE") // unreachable code is okay here until we complete the above TODO
class SchemaSuiteTest : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as schema -> additional items match schema"
     */
    @Test
    fun additionalItems_additionalItemsAsSchema_additionalItemsMatchSchema() {
        
        assertKsonEnforcesSchema(
            """
                [null,2,3,4]
            """,
            """
                {"items":[{}],"additionalItems":{"type":"integer"}}
            """,
            true,
            """additionalItems as schema -> additional items match schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as schema -> additional items do not match schema"
     */
    @Test
    fun additionalItems_additionalItemsAsSchema_additionalItemsDoNotMatchSchema() {
        
        assertKsonEnforcesSchema(
            """
                [null,2,3,"foo"]
            """,
            """
                {"items":[{}],"additionalItems":{"type":"integer"}}
            """,
            false,
            """additionalItems as schema -> additional items do not match schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "when items is schema, additionalItems does nothing -> valid with a array of type integers"
     */
    @Test
    fun additionalItems_whenItemsIsSchema_AdditionalItemsDoesNothing_validWithAArrayOfTypeIntegers() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"items":{"type":"integer"},"additionalItems":{"type":"string"}}
            """,
            true,
            """when items is schema, additionalItems does nothing -> valid with a array of type integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "when items is schema, additionalItems does nothing -> invalid with a array of mixed types"
     */
    @Test
    fun additionalItems_whenItemsIsSchema_AdditionalItemsDoesNothing_invalidWithAArrayOfMixedTypes() {
        
        assertKsonEnforcesSchema(
            """
                [1,"2","3"]
            """,
            """
                {"items":{"type":"integer"},"additionalItems":{"type":"string"}}
            """,
            false,
            """when items is schema, additionalItems does nothing -> invalid with a array of mixed types""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "when items is schema, boolean additionalItems does nothing -> all items match schema"
     */
    @Test
    fun additionalItems_whenItemsIsSchema_BooleanAdditionalItemsDoesNothing_allItemsMatchSchema() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3,4,5]
            """,
            """
                {"items":{},"additionalItems":false}
            """,
            true,
            """when items is schema, boolean additionalItems does nothing -> all items match schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> empty array"
     */
    @Test
    fun additionalItems_arrayOfItemsWithNoAdditionalItemsPermitted_emptyArray() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"items":[{},{},{}],"additionalItems":false}
            """,
            true,
            """array of items with no additionalItems permitted -> empty array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> fewer number of items present (1)"
     */
    @Test
    fun additionalItems_arrayOfItemsWithNoAdditionalItemsPermitted_fewerNumberOfItemsPresent_1_() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"items":[{},{},{}],"additionalItems":false}
            """,
            true,
            """array of items with no additionalItems permitted -> fewer number of items present (1)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> fewer number of items present (2)"
     */
    @Test
    fun additionalItems_arrayOfItemsWithNoAdditionalItemsPermitted_fewerNumberOfItemsPresent_2_() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"items":[{},{},{}],"additionalItems":false}
            """,
            true,
            """array of items with no additionalItems permitted -> fewer number of items present (2)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> equal number of items present"
     */
    @Test
    fun additionalItems_arrayOfItemsWithNoAdditionalItemsPermitted_equalNumberOfItemsPresent() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"items":[{},{},{}],"additionalItems":false}
            """,
            true,
            """array of items with no additionalItems permitted -> equal number of items present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> additional items are not permitted"
     */
    @Test
    fun additionalItems_arrayOfItemsWithNoAdditionalItemsPermitted_additionalItemsAreNotPermitted() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3,4]
            """,
            """
                {"items":[{},{},{}],"additionalItems":false}
            """,
            false,
            """array of items with no additionalItems permitted -> additional items are not permitted""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as false without items -> items defaults to empty schema so everything is valid"
     */
    @Test
    fun additionalItems_additionalItemsAsFalseWithoutItems_itemsDefaultsToEmptySchemaSoEverythingIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3,4,5]
            """,
            """
                {"additionalItems":false}
            """,
            true,
            """additionalItems as false without items -> items defaults to empty schema so everything is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as false without items -> ignores non-arrays"
     */
    @Test
    fun additionalItems_additionalItemsAsFalseWithoutItems_ignoresNon_arrays() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"additionalItems":false}
            """,
            true,
            """additionalItems as false without items -> ignores non-arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems are allowed by default -> only the first item is validated"
     */
    @Test
    fun additionalItems_additionalItemsAreAllowedByDefault_onlyTheFirstItemIsValidated() {
        
        assertKsonEnforcesSchema(
            """
                [1,"foo",false]
            """,
            """
                {"items":[{"type":"integer"}]}
            """,
            true,
            """additionalItems are allowed by default -> only the first item is validated""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems does not look in applicators, valid case -> items defined in allOf are not examined"
     */
    @Test
    fun additionalItems_additionalItemsDoesNotLookInApplicators_ValidCase_itemsDefinedInAllOfAreNotExamined() {
        
        assertKsonEnforcesSchema(
            """
                [1,null]
            """,
            """
                {"allOf":[{"items":[{"type":"integer"}]}],"additionalItems":{"type":"boolean"}}
            """,
            true,
            """additionalItems does not look in applicators, valid case -> items defined in allOf are not examined""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems does not look in applicators, invalid case -> items defined in allOf are not examined"
     */
    @Test
    fun additionalItems_additionalItemsDoesNotLookInApplicators_InvalidCase_itemsDefinedInAllOfAreNotExamined() {
        
        assertKsonEnforcesSchema(
            """
                [1,"hello"]
            """,
            """
                {"allOf":[{"items":[{"type":"integer"},{"type":"string"}]}],"items":[{"type":"integer"}],"additionalItems":{"type":"boolean"}}
            """,
            false,
            """additionalItems does not look in applicators, invalid case -> items defined in allOf are not examined""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "items validation adjusts the starting index for additionalItems -> valid items"
     */
    @Test
    fun additionalItems_itemsValidationAdjustsTheStartingIndexForAdditionalItems_validItems() {
        
        assertKsonEnforcesSchema(
            """
                ["x",2,3]
            """,
            """
                {"items":[{"type":"string"}],"additionalItems":{"type":"integer"}}
            """,
            true,
            """items validation adjusts the starting index for additionalItems -> valid items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "items validation adjusts the starting index for additionalItems -> wrong type of second item"
     */
    @Test
    fun additionalItems_itemsValidationAdjustsTheStartingIndexForAdditionalItems_wrongTypeOfSecondItem() {
        
        assertKsonEnforcesSchema(
            """
                ["x","y"]
            """,
            """
                {"items":[{"type":"string"}],"additionalItems":{"type":"integer"}}
            """,
            false,
            """items validation adjusts the starting index for additionalItems -> wrong type of second item""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems with heterogeneous array -> heterogeneous invalid instance"
     */
    @Test
    fun additionalItems_additionalItemsWithHeterogeneousArray_heterogeneousInvalidInstance() {
        
        assertKsonEnforcesSchema(
            """
                ["foo","bar",37]
            """,
            """
                {"items":[{}],"additionalItems":false}
            """,
            false,
            """additionalItems with heterogeneous array -> heterogeneous invalid instance""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems with heterogeneous array -> valid instance"
     */
    @Test
    fun additionalItems_additionalItemsWithHeterogeneousArray_validInstance() {
        
        assertKsonEnforcesSchema(
            """
                [null]
            """,
            """
                {"items":[{}],"additionalItems":false}
            """,
            true,
            """additionalItems with heterogeneous array -> valid instance""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems with null instance elements -> allows null elements"
     */
    @Test
    fun additionalItems_additionalItemsWithNullInstanceElements_allowsNullElements() {
        
        assertKsonEnforcesSchema(
            """
                [null]
            """,
            """
                {"additionalItems":{"type":"null"}}
            """,
            true,
            """additionalItems with null instance elements -> allows null elements""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> no additional properties is valid"
     */
    @Test
    fun additionalProperties_additionalPropertiesBeingFalseDoesNotAllowOtherProperties_noAdditionalPropertiesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"patternProperties":{"^v":{}},"additionalProperties":false}
            """,
            true,
            """additionalProperties being false does not allow other properties -> no additional properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> an additional property is invalid"
     */
    @Test
    fun additionalProperties_additionalPropertiesBeingFalseDoesNotAllowOtherProperties_anAdditionalPropertyIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"quux":"boom"}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"patternProperties":{"^v":{}},"additionalProperties":false}
            """,
            false,
            """additionalProperties being false does not allow other properties -> an additional property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> ignores arrays"
     */
    @Test
    fun additionalProperties_additionalPropertiesBeingFalseDoesNotAllowOtherProperties_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"properties":{"foo":{},"bar":{}},"patternProperties":{"^v":{}},"additionalProperties":false}
            """,
            true,
            """additionalProperties being false does not allow other properties -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> ignores strings"
     */
    @Test
    fun additionalProperties_additionalPropertiesBeingFalseDoesNotAllowOtherProperties_ignoresStrings() {
        
        assertKsonEnforcesSchema(
            """
                "foobarbaz"
            """,
            """
                {"properties":{"foo":{},"bar":{}},"patternProperties":{"^v":{}},"additionalProperties":false}
            """,
            true,
            """additionalProperties being false does not allow other properties -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> ignores other non-objects"
     */
    @Test
    fun additionalProperties_additionalPropertiesBeingFalseDoesNotAllowOtherProperties_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"properties":{"foo":{},"bar":{}},"patternProperties":{"^v":{}},"additionalProperties":false}
            """,
            true,
            """additionalProperties being false does not allow other properties -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties being false does not allow other properties -> patternProperties are not additional properties"
     */
    @Test
    fun additionalProperties_additionalPropertiesBeingFalseDoesNotAllowOtherProperties_patternPropertiesAreNotAdditionalProperties() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"vroom":2}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"patternProperties":{"^v":{}},"additionalProperties":false}
            """,
            true,
            """additionalProperties being false does not allow other properties -> patternProperties are not additional properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "non-ASCII pattern with additionalProperties -> matching the pattern is valid"
     */
    @Test
    fun additionalProperties_non_ASCIIPatternWithAdditionalProperties_matchingThePatternIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"ármányos":2}
            """,
            """
                {"patternProperties":{"^á":{}},"additionalProperties":false}
            """,
            true,
            """non-ASCII pattern with additionalProperties -> matching the pattern is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "non-ASCII pattern with additionalProperties -> not matching the pattern is invalid"
     */
    @Test
    fun additionalProperties_non_ASCIIPatternWithAdditionalProperties_notMatchingThePatternIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"élmény":2}
            """,
            """
                {"patternProperties":{"^á":{}},"additionalProperties":false}
            """,
            false,
            """non-ASCII pattern with additionalProperties -> not matching the pattern is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties with schema -> no additional properties is valid"
     */
    @Test
    fun additionalProperties_additionalPropertiesWithSchema_noAdditionalPropertiesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"additionalProperties":{"type":"boolean"}}
            """,
            true,
            """additionalProperties with schema -> no additional properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties with schema -> an additional valid property is valid"
     */
    @Test
    fun additionalProperties_additionalPropertiesWithSchema_anAdditionalValidPropertyIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"quux":true}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"additionalProperties":{"type":"boolean"}}
            """,
            true,
            """additionalProperties with schema -> an additional valid property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties with schema -> an additional invalid property is invalid"
     */
    @Test
    fun additionalProperties_additionalPropertiesWithSchema_anAdditionalInvalidPropertyIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"quux":12}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"additionalProperties":{"type":"boolean"}}
            """,
            false,
            """additionalProperties with schema -> an additional invalid property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties can exist by itself -> an additional valid property is valid"
     */
    @Test
    fun additionalProperties_additionalPropertiesCanExistByItself_anAdditionalValidPropertyIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":true}
            """,
            """
                {"additionalProperties":{"type":"boolean"}}
            """,
            true,
            """additionalProperties can exist by itself -> an additional valid property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties can exist by itself -> an additional invalid property is invalid"
     */
    @Test
    fun additionalProperties_additionalPropertiesCanExistByItself_anAdditionalInvalidPropertyIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"additionalProperties":{"type":"boolean"}}
            """,
            false,
            """additionalProperties can exist by itself -> an additional invalid property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties are allowed by default -> additional properties are allowed"
     */
    @Test
    fun additionalProperties_additionalPropertiesAreAllowedByDefault_additionalPropertiesAreAllowed() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"quux":true}
            """,
            """
                {"properties":{"foo":{},"bar":{}}}
            """,
            true,
            """additionalProperties are allowed by default -> additional properties are allowed""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties does not look in applicators -> properties defined in allOf are not examined"
     */
    @Test
    fun additionalProperties_additionalPropertiesDoesNotLookInApplicators_propertiesDefinedInAllOfAreNotExamined() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":true}
            """,
            """
                {"allOf":[{"properties":{"foo":{}}}],"additionalProperties":{"type":"boolean"}}
            """,
            false,
            """additionalProperties does not look in applicators -> properties defined in allOf are not examined""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalProperties.json`:
     *     "additionalProperties with null valued instance properties -> allows null values"
     */
    @Test
    fun additionalProperties_additionalPropertiesWithNullValuedInstanceProperties_allowsNullValues() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":null}
            """,
            """
                {"additionalProperties":{"type":"null"}}
            """,
            true,
            """additionalProperties with null valued instance properties -> allows null values""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> allOf"
     */
    @Test
    fun allOf_allOf_allOf() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"baz","bar":2}
            """,
            """
                {"allOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            true,
            """allOf -> allOf""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> mismatch second"
     */
    @Test
    fun allOf_allOf_mismatchSecond() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"baz"}
            """,
            """
                {"allOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            false,
            """allOf -> mismatch second""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> mismatch first"
     */
    @Test
    fun allOf_allOf_mismatchFirst() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"allOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            false,
            """allOf -> mismatch first""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf -> wrong type"
     */
    @Test
    fun allOf_allOf_wrongType() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"baz","bar":"quux"}
            """,
            """
                {"allOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            false,
            """allOf -> wrong type""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> valid"
     */
    @Test
    fun allOf_allOfWithBaseSchema_valid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"quux","bar":2,"baz":null}
            """,
            """
                {"properties":{"bar":{"type":"integer"}},"required":["bar"],"allOf":[{"properties":{"foo":{"type":"string"}},"required":["foo"]},{"properties":{"baz":{"type":"null"}},"required":["baz"]}]}
            """,
            true,
            """allOf with base schema -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch base schema"
     */
    @Test
    fun allOf_allOfWithBaseSchema_mismatchBaseSchema() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"quux","baz":null}
            """,
            """
                {"properties":{"bar":{"type":"integer"}},"required":["bar"],"allOf":[{"properties":{"foo":{"type":"string"}},"required":["foo"]},{"properties":{"baz":{"type":"null"}},"required":["baz"]}]}
            """,
            false,
            """allOf with base schema -> mismatch base schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch first allOf"
     */
    @Test
    fun allOf_allOfWithBaseSchema_mismatchFirstAllOf() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2,"baz":null}
            """,
            """
                {"properties":{"bar":{"type":"integer"}},"required":["bar"],"allOf":[{"properties":{"foo":{"type":"string"}},"required":["foo"]},{"properties":{"baz":{"type":"null"}},"required":["baz"]}]}
            """,
            false,
            """allOf with base schema -> mismatch first allOf""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch second allOf"
     */
    @Test
    fun allOf_allOfWithBaseSchema_mismatchSecondAllOf() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"quux","bar":2}
            """,
            """
                {"properties":{"bar":{"type":"integer"}},"required":["bar"],"allOf":[{"properties":{"foo":{"type":"string"}},"required":["foo"]},{"properties":{"baz":{"type":"null"}},"required":["baz"]}]}
            """,
            false,
            """allOf with base schema -> mismatch second allOf""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with base schema -> mismatch both"
     */
    @Test
    fun allOf_allOfWithBaseSchema_mismatchBoth() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"properties":{"bar":{"type":"integer"}},"required":["bar"],"allOf":[{"properties":{"foo":{"type":"string"}},"required":["foo"]},{"properties":{"baz":{"type":"null"}},"required":["baz"]}]}
            """,
            false,
            """allOf with base schema -> mismatch both""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf simple types -> valid"
     */
    @Test
    fun allOf_allOfSimpleTypes_valid() {
        
        assertKsonEnforcesSchema(
            """
                25
            """,
            """
                {"allOf":[{"maximum":30},{"minimum":20}]}
            """,
            true,
            """allOf simple types -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf simple types -> mismatch one"
     */
    @Test
    fun allOf_allOfSimpleTypes_mismatchOne() {
        
        assertKsonEnforcesSchema(
            """
                35
            """,
            """
                {"allOf":[{"maximum":30},{"minimum":20}]}
            """,
            false,
            """allOf simple types -> mismatch one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with boolean schemas, all true -> any value is valid"
     */
    @Test
    fun allOf_allOfWithBooleanSchemas_AllTrue_anyValueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[true,true]}
            """,
            true,
            """allOf with boolean schemas, all true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with boolean schemas, some false -> any value is invalid"
     */
    @Test
    fun allOf_allOfWithBooleanSchemas_SomeFalse_anyValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[true,false]}
            """,
            false,
            """allOf with boolean schemas, some false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with boolean schemas, all false -> any value is invalid"
     */
    @Test
    fun allOf_allOfWithBooleanSchemas_AllFalse_anyValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[false,false]}
            """,
            false,
            """allOf with boolean schemas, all false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with one empty schema -> any data is valid"
     */
    @Test
    fun allOf_allOfWithOneEmptySchema_anyDataIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"allOf":[{}]}
            """,
            true,
            """allOf with one empty schema -> any data is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with two empty schemas -> any data is valid"
     */
    @Test
    fun allOf_allOfWithTwoEmptySchemas_anyDataIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"allOf":[{},{}]}
            """,
            true,
            """allOf with two empty schemas -> any data is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the first empty schema -> number is valid"
     */
    @Test
    fun allOf_allOfWithTheFirstEmptySchema_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"allOf":[{},{"type":"number"}]}
            """,
            true,
            """allOf with the first empty schema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the first empty schema -> string is invalid"
     */
    @Test
    fun allOf_allOfWithTheFirstEmptySchema_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[{},{"type":"number"}]}
            """,
            false,
            """allOf with the first empty schema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the last empty schema -> number is valid"
     */
    @Test
    fun allOf_allOfWithTheLastEmptySchema_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"allOf":[{"type":"number"},{}]}
            """,
            true,
            """allOf with the last empty schema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf with the last empty schema -> string is invalid"
     */
    @Test
    fun allOf_allOfWithTheLastEmptySchema_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[{"type":"number"},{}]}
            """,
            false,
            """allOf with the last empty schema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "nested allOf, to check validation semantics -> null is valid"
     */
    @Test
    fun allOf_nestedAllOf_ToCheckValidationSemantics_nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"allOf":[{"allOf":[{"type":"null"}]}]}
            """,
            true,
            """nested allOf, to check validation semantics -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "nested allOf, to check validation semantics -> anything non-null is invalid"
     */
    @Test
    fun allOf_nestedAllOf_ToCheckValidationSemantics_anythingNon_nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"allOf":[{"allOf":[{"type":"null"}]}]}
            """,
            false,
            """nested allOf, to check validation semantics -> anything non-null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: false"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_False_AnyOf_False_OneOf_False() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: true"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_False_AnyOf_False_OneOf_True() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: false, oneOf: true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: false"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_False_AnyOf_True_OneOf_False() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: true"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_False_AnyOf_True_OneOf_True() {
        
        assertKsonEnforcesSchema(
            """
                15
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: false, anyOf: true, oneOf: true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: false"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_True_AnyOf_False_OneOf_False() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: true"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_True_AnyOf_False_OneOf_True() {
        
        assertKsonEnforcesSchema(
            """
                10
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: false, oneOf: true""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: false"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_True_AnyOf_True_OneOf_False() {
        
        assertKsonEnforcesSchema(
            """
                6
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            false,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: false""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/allOf.json`:
     *     "allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: true"
     */
    @Test
    fun allOf_allOfCombinedWithAnyOf_OneOf_allOf_True_AnyOf_True_OneOf_True() {
        
        assertKsonEnforcesSchema(
            """
                30
            """,
            """
                {"allOf":[{"multipleOf":2}],"anyOf":[{"multipleOf":3}],"oneOf":[{"multipleOf":5}]}
            """,
            true,
            """allOf combined with anyOf, oneOf -> allOf: true, anyOf: true, oneOf: true""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> first anyOf valid"
     */
    @Test
    fun anyOf_anyOf_firstAnyOfValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"anyOf":[{"type":"integer"},{"minimum":2}]}
            """,
            true,
            """anyOf -> first anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> second anyOf valid"
     */
    @Test
    fun anyOf_anyOf_secondAnyOfValid() {
        
        assertKsonEnforcesSchema(
            """
                2.5
            """,
            """
                {"anyOf":[{"type":"integer"},{"minimum":2}]}
            """,
            true,
            """anyOf -> second anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> both anyOf valid"
     */
    @Test
    fun anyOf_anyOf_bothAnyOfValid() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"anyOf":[{"type":"integer"},{"minimum":2}]}
            """,
            true,
            """anyOf -> both anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf -> neither anyOf valid"
     */
    @Test
    fun anyOf_anyOf_neitherAnyOfValid() {
        
        assertKsonEnforcesSchema(
            """
                1.5
            """,
            """
                {"anyOf":[{"type":"integer"},{"minimum":2}]}
            """,
            false,
            """anyOf -> neither anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with base schema -> mismatch base schema"
     */
    @Test
    fun anyOf_anyOfWithBaseSchema_mismatchBaseSchema() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"type":"string","anyOf":[{"maxLength":2},{"minLength":4}]}
            """,
            false,
            """anyOf with base schema -> mismatch base schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with base schema -> one anyOf valid"
     */
    @Test
    fun anyOf_anyOfWithBaseSchema_oneAnyOfValid() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {"type":"string","anyOf":[{"maxLength":2},{"minLength":4}]}
            """,
            true,
            """anyOf with base schema -> one anyOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with base schema -> both anyOf invalid"
     */
    @Test
    fun anyOf_anyOfWithBaseSchema_bothAnyOfInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"string","anyOf":[{"maxLength":2},{"minLength":4}]}
            """,
            false,
            """anyOf with base schema -> both anyOf invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with boolean schemas, all true -> any value is valid"
     */
    @Test
    fun anyOf_anyOfWithBooleanSchemas_AllTrue_anyValueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"anyOf":[true,true]}
            """,
            true,
            """anyOf with boolean schemas, all true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with boolean schemas, some true -> any value is valid"
     */
    @Test
    fun anyOf_anyOfWithBooleanSchemas_SomeTrue_anyValueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"anyOf":[true,false]}
            """,
            true,
            """anyOf with boolean schemas, some true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with boolean schemas, all false -> any value is invalid"
     */
    @Test
    fun anyOf_anyOfWithBooleanSchemas_AllFalse_anyValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"anyOf":[false,false]}
            """,
            false,
            """anyOf with boolean schemas, all false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> first anyOf valid (complex)"
     */
    @Test
    fun anyOf_anyOfComplexTypes_firstAnyOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"anyOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            true,
            """anyOf complex types -> first anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> second anyOf valid (complex)"
     */
    @Test
    fun anyOf_anyOfComplexTypes_secondAnyOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"baz"}
            """,
            """
                {"anyOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            true,
            """anyOf complex types -> second anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> both anyOf valid (complex)"
     */
    @Test
    fun anyOf_anyOfComplexTypes_bothAnyOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"baz","bar":2}
            """,
            """
                {"anyOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            true,
            """anyOf complex types -> both anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf complex types -> neither anyOf valid (complex)"
     */
    @Test
    fun anyOf_anyOfComplexTypes_neitherAnyOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":2,"bar":"quux"}
            """,
            """
                {"anyOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            false,
            """anyOf complex types -> neither anyOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with one empty schema -> string is valid"
     */
    @Test
    fun anyOf_anyOfWithOneEmptySchema_stringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"anyOf":[{"type":"number"},{}]}
            """,
            true,
            """anyOf with one empty schema -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "anyOf with one empty schema -> number is valid"
     */
    @Test
    fun anyOf_anyOfWithOneEmptySchema_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"anyOf":[{"type":"number"},{}]}
            """,
            true,
            """anyOf with one empty schema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "nested anyOf, to check validation semantics -> null is valid"
     */
    @Test
    fun anyOf_nestedAnyOf_ToCheckValidationSemantics_nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"anyOf":[{"anyOf":[{"type":"null"}]}]}
            """,
            true,
            """nested anyOf, to check validation semantics -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/anyOf.json`:
     *     "nested anyOf, to check validation semantics -> anything non-null is invalid"
     */
    @Test
    fun anyOf_nestedAnyOf_ToCheckValidationSemantics_anythingNon_nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"anyOf":[{"anyOf":[{"type":"null"}]}]}
            """,
            false,
            """nested anyOf, to check validation semantics -> anything non-null is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> number is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> string is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__stringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> boolean true is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__booleanTrueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> boolean true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> boolean false is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__booleanFalseIsValid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> boolean false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> null is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> object is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__objectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> empty object is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__emptyObjectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> array is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__arrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'true' -> empty array is valid"
     */
    @Test
    fun boolean_schema_booleanSchema_true__emptyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                true
            """,
            true,
            """boolean schema 'true' -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> number is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> string is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> boolean true is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__booleanTrueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> boolean true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> boolean false is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__booleanFalseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> boolean false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> null is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> object is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__objectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> empty object is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__emptyObjectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> array is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__arrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/boolean_schema.json`:
     *     "boolean schema 'false' -> empty array is invalid"
     */
    @Test
    fun boolean_schema_booleanSchema_false__emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                false
            """,
            false,
            """boolean schema 'false' -> empty array is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const validation -> same value is valid"
     */
    @Test
    fun const_constValidation_sameValueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {"const":2}
            """,
            true,
            """const validation -> same value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const validation -> another value is invalid"
     */
    @Test
    fun const_constValidation_anotherValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {"const":2}
            """,
            false,
            """const validation -> another value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const validation -> another type is invalid"
     */
    @Test
    fun const_constValidation_anotherTypeIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"const":2}
            """,
            false,
            """const validation -> another type is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with object -> same object is valid"
     */
    @Test
    fun const_constWithObject_sameObjectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar","baz":"bax"}
            """,
            """
                {"const":{"foo":"bar","baz":"bax"}}
            """,
            true,
            """const with object -> same object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with object -> same object with different property order is valid"
     */
    @Test
    fun const_constWithObject_sameObjectWithDifferentPropertyOrderIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"baz":"bax","foo":"bar"}
            """,
            """
                {"const":{"foo":"bar","baz":"bax"}}
            """,
            true,
            """const with object -> same object with different property order is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with object -> another object is invalid"
     */
    @Test
    fun const_constWithObject_anotherObjectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"const":{"foo":"bar","baz":"bax"}}
            """,
            false,
            """const with object -> another object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with object -> another type is invalid"
     */
    @Test
    fun const_constWithObject_anotherTypeIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"const":{"foo":"bar","baz":"bax"}}
            """,
            false,
            """const with object -> another type is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with array -> same array is valid"
     */
    @Test
    fun const_constWithArray_sameArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":"bar"}]
            """,
            """
                {"const":[{"foo":"bar"}]}
            """,
            true,
            """const with array -> same array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with array -> another array item is invalid"
     */
    @Test
    fun const_constWithArray_anotherArrayItemIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [2]
            """,
            """
                {"const":[{"foo":"bar"}]}
            """,
            false,
            """const with array -> another array item is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with array -> array with additional items is invalid"
     */
    @Test
    fun const_constWithArray_arrayWithAdditionalItemsIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"const":[{"foo":"bar"}]}
            """,
            false,
            """const with array -> array with additional items is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with null -> null is valid"
     */
    @Test
    fun const_constWithNull_nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"const":null}
            """,
            true,
            """const with null -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with null -> not null is invalid"
     */
    @Test
    fun const_constWithNull_notNullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"const":null}
            """,
            false,
            """const with null -> not null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with false does not match 0 -> false is valid"
     */
    @Test
    fun const_constWithFalseDoesNotMatch0_falseIsValid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"const":false}
            """,
            true,
            """const with false does not match 0 -> false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with false does not match 0 -> integer zero is invalid"
     */
    @Test
    fun const_constWithFalseDoesNotMatch0_integerZeroIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"const":false}
            """,
            false,
            """const with false does not match 0 -> integer zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with false does not match 0 -> float zero is invalid"
     */
    @Test
    fun const_constWithFalseDoesNotMatch0_floatZeroIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {"const":false}
            """,
            false,
            """const with false does not match 0 -> float zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with true does not match 1 -> true is valid"
     */
    @Test
    fun const_constWithTrueDoesNotMatch1_trueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"const":true}
            """,
            true,
            """const with true does not match 1 -> true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with true does not match 1 -> integer one is invalid"
     */
    @Test
    fun const_constWithTrueDoesNotMatch1_integerOneIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"const":true}
            """,
            false,
            """const with true does not match 1 -> integer one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with true does not match 1 -> float one is invalid"
     */
    @Test
    fun const_constWithTrueDoesNotMatch1_floatOneIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {"const":true}
            """,
            false,
            """const with true does not match 1 -> float one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with [false] does not match [0] -> [false] is valid"
     */
    @Test
    fun const_constWith_false_DoesNotMatch_0___false_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false]
            """,
            """
                {"const":[false]}
            """,
            true,
            """const with [false] does not match [0] -> [false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with [false] does not match [0] -> [0] is invalid"
     */
    @Test
    fun const_constWith_false_DoesNotMatch_0___0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [0]
            """,
            """
                {"const":[false]}
            """,
            false,
            """const with [false] does not match [0] -> [0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with [false] does not match [0] -> [0.0] is invalid"
     */
    @Test
    fun const_constWith_false_DoesNotMatch_0___0_0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [0.0]
            """,
            """
                {"const":[false]}
            """,
            false,
            """const with [false] does not match [0] -> [0.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with [true] does not match [1] -> [true] is valid"
     */
    @Test
    fun const_constWith_true_DoesNotMatch_1___true_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true]
            """,
            """
                {"const":[true]}
            """,
            true,
            """const with [true] does not match [1] -> [true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with [true] does not match [1] -> [1] is invalid"
     */
    @Test
    fun const_constWith_true_DoesNotMatch_1___1_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"const":[true]}
            """,
            false,
            """const with [true] does not match [1] -> [1] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with [true] does not match [1] -> [1.0] is invalid"
     */
    @Test
    fun const_constWith_true_DoesNotMatch_1___1_0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1.0]
            """,
            """
                {"const":[true]}
            """,
            false,
            """const with [true] does not match [1] -> [1.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": false} is valid"
     */
    @Test
    fun const_constWith__a__False_DoesNotMatch__a__0____a__False_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":false}
            """,
            """
                {"const":{"a":false}}
            """,
            true,
            """const with {"a": false} does not match {"a": 0} -> {"a": false} is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": 0} is invalid"
     */
    @Test
    fun const_constWith__a__False_DoesNotMatch__a__0____a__0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":0}
            """,
            """
                {"const":{"a":false}}
            """,
            false,
            """const with {"a": false} does not match {"a": 0} -> {"a": 0} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with {"a": false} does not match {"a": 0} -> {"a": 0.0} is invalid"
     */
    @Test
    fun const_constWith__a__False_DoesNotMatch__a__0____a__0_0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":0.0}
            """,
            """
                {"const":{"a":false}}
            """,
            false,
            """const with {"a": false} does not match {"a": 0} -> {"a": 0.0} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": true} is valid"
     */
    @Test
    fun const_constWith__a__True_DoesNotMatch__a__1____a__True_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":true}
            """,
            """
                {"const":{"a":true}}
            """,
            true,
            """const with {"a": true} does not match {"a": 1} -> {"a": true} is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": 1} is invalid"
     */
    @Test
    fun const_constWith__a__True_DoesNotMatch__a__1____a__1_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":1}
            """,
            """
                {"const":{"a":true}}
            """,
            false,
            """const with {"a": true} does not match {"a": 1} -> {"a": 1} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with {"a": true} does not match {"a": 1} -> {"a": 1.0} is invalid"
     */
    @Test
    fun const_constWith__a__True_DoesNotMatch__a__1____a__1_0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":1.0}
            """,
            """
                {"const":{"a":true}}
            """,
            false,
            """const with {"a": true} does not match {"a": 1} -> {"a": 1.0} is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 0 does not match other zero-like types -> false is invalid"
     */
    @Test
    fun const_constWith0DoesNotMatchOtherZero_likeTypes_falseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"const":0}
            """,
            false,
            """const with 0 does not match other zero-like types -> false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 0 does not match other zero-like types -> integer zero is valid"
     */
    @Test
    fun const_constWith0DoesNotMatchOtherZero_likeTypes_integerZeroIsValid() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"const":0}
            """,
            true,
            """const with 0 does not match other zero-like types -> integer zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 0 does not match other zero-like types -> float zero is valid"
     */
    @Test
    fun const_constWith0DoesNotMatchOtherZero_likeTypes_floatZeroIsValid() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {"const":0}
            """,
            true,
            """const with 0 does not match other zero-like types -> float zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 0 does not match other zero-like types -> empty object is invalid"
     */
    @Test
    fun const_constWith0DoesNotMatchOtherZero_likeTypes_emptyObjectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"const":0}
            """,
            false,
            """const with 0 does not match other zero-like types -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 0 does not match other zero-like types -> empty array is invalid"
     */
    @Test
    fun const_constWith0DoesNotMatchOtherZero_likeTypes_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"const":0}
            """,
            false,
            """const with 0 does not match other zero-like types -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 0 does not match other zero-like types -> empty string is invalid"
     */
    @Test
    fun const_constWith0DoesNotMatchOtherZero_likeTypes_emptyStringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {"const":0}
            """,
            false,
            """const with 0 does not match other zero-like types -> empty string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 1 does not match true -> true is invalid"
     */
    @Test
    fun const_constWith1DoesNotMatchTrue_trueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"const":1}
            """,
            false,
            """const with 1 does not match true -> true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 1 does not match true -> integer one is valid"
     */
    @Test
    fun const_constWith1DoesNotMatchTrue_integerOneIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"const":1}
            """,
            true,
            """const with 1 does not match true -> integer one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with 1 does not match true -> float one is valid"
     */
    @Test
    fun const_constWith1DoesNotMatchTrue_floatOneIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {"const":1}
            """,
            true,
            """const with 1 does not match true -> float one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with -2.0 matches integer and float types -> integer -2 is valid"
     */
    @Test
    fun const_constWith_2_0MatchesIntegerAndFloatTypes_integer_2IsValid() {
        
        assertKsonEnforcesSchema(
            """
                -2
            """,
            """
                {"const":-2.0}
            """,
            true,
            """const with -2.0 matches integer and float types -> integer -2 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with -2.0 matches integer and float types -> integer 2 is invalid"
     */
    @Test
    fun const_constWith_2_0MatchesIntegerAndFloatTypes_integer2IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                2
            """,
            """
                {"const":-2.0}
            """,
            false,
            """const with -2.0 matches integer and float types -> integer 2 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with -2.0 matches integer and float types -> float -2.0 is valid"
     */
    @Test
    fun const_constWith_2_0MatchesIntegerAndFloatTypes_float_2_0IsValid() {
        
        assertKsonEnforcesSchema(
            """
                -2.0
            """,
            """
                {"const":-2.0}
            """,
            true,
            """const with -2.0 matches integer and float types -> float -2.0 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with -2.0 matches integer and float types -> float 2.0 is invalid"
     */
    @Test
    fun const_constWith_2_0MatchesIntegerAndFloatTypes_float2_0IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                2.0
            """,
            """
                {"const":-2.0}
            """,
            false,
            """const with -2.0 matches integer and float types -> float 2.0 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "const with -2.0 matches integer and float types -> float -2.00001 is invalid"
     */
    @Test
    fun const_constWith_2_0MatchesIntegerAndFloatTypes_float_2_00001IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                -2.00001
            """,
            """
                {"const":-2.0}
            """,
            false,
            """const with -2.0 matches integer and float types -> float -2.00001 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> integer is valid"
     */
    @Test
    fun const_floatAndIntegersAreEqualUpTo64_bitRepresentationLimits_integerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740992
            """,
            """
                {"const":9007199254740992}
            """,
            true,
            """float and integers are equal up to 64-bit representation limits -> integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> integer minus one is invalid"
     */
    @Test
    fun const_floatAndIntegersAreEqualUpTo64_bitRepresentationLimits_integerMinusOneIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740991
            """,
            """
                {"const":9007199254740992}
            """,
            false,
            """float and integers are equal up to 64-bit representation limits -> integer minus one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> float is valid"
     */
    @Test
    fun const_floatAndIntegersAreEqualUpTo64_bitRepresentationLimits_floatIsValid() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740992.0
            """,
            """
                {"const":9007199254740992}
            """,
            true,
            """float and integers are equal up to 64-bit representation limits -> float is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "float and integers are equal up to 64-bit representation limits -> float minus one is invalid"
     */
    @Test
    fun const_floatAndIntegersAreEqualUpTo64_bitRepresentationLimits_floatMinusOneIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                9007199254740991.0
            """,
            """
                {"const":9007199254740992}
            """,
            false,
            """float and integers are equal up to 64-bit representation limits -> float minus one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "nul characters in strings -> match string with nul"
     */
    @Test
    fun const_nulCharactersInStrings_matchStringWithNul() {
        
        assertKsonEnforcesSchema(
            """
                "hello\u0000there"
            """,
            """
                {"const":"hello\u0000there"}
            """,
            true,
            """nul characters in strings -> match string with nul""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/const.json`:
     *     "nul characters in strings -> do not match string lacking nul"
     */
    @Test
    fun const_nulCharactersInStrings_doNotMatchStringLackingNul() {
        
        assertKsonEnforcesSchema(
            """
                "hellothere"
            """,
            """
                {"const":"hello\u0000there"}
            """,
            false,
            """nul characters in strings -> do not match string lacking nul""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array with item matching schema (5) is valid"
     */
    @Test
    fun contains_containsKeywordValidation_arrayWithItemMatchingSchema_5_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [3,4,5]
            """,
            """
                {"contains":{"minimum":5}}
            """,
            true,
            """contains keyword validation -> array with item matching schema (5) is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array with item matching schema (6) is valid"
     */
    @Test
    fun contains_containsKeywordValidation_arrayWithItemMatchingSchema_6_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [3,4,6]
            """,
            """
                {"contains":{"minimum":5}}
            """,
            true,
            """contains keyword validation -> array with item matching schema (6) is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array with two items matching schema (5, 6) is valid"
     */
    @Test
    fun contains_containsKeywordValidation_arrayWithTwoItemsMatchingSchema_5_6_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [3,4,5,6]
            """,
            """
                {"contains":{"minimum":5}}
            """,
            true,
            """contains keyword validation -> array with two items matching schema (5, 6) is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> array without items matching schema is invalid"
     */
    @Test
    fun contains_containsKeywordValidation_arrayWithoutItemsMatchingSchemaIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [2,3,4]
            """,
            """
                {"contains":{"minimum":5}}
            """,
            false,
            """contains keyword validation -> array without items matching schema is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> empty array is invalid"
     */
    @Test
    fun contains_containsKeywordValidation_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"contains":{"minimum":5}}
            """,
            false,
            """contains keyword validation -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword validation -> not array is valid"
     */
    @Test
    fun contains_containsKeywordValidation_notArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"contains":{"minimum":5}}
            """,
            true,
            """contains keyword validation -> not array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with const keyword -> array with item 5 is valid"
     */
    @Test
    fun contains_containsKeywordWithConstKeyword_arrayWithItem5IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [3,4,5]
            """,
            """
                {"contains":{"const":5}}
            """,
            true,
            """contains keyword with const keyword -> array with item 5 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with const keyword -> array with two items 5 is valid"
     */
    @Test
    fun contains_containsKeywordWithConstKeyword_arrayWithTwoItems5IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [3,4,5,5]
            """,
            """
                {"contains":{"const":5}}
            """,
            true,
            """contains keyword with const keyword -> array with two items 5 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with const keyword -> array without item 5 is invalid"
     */
    @Test
    fun contains_containsKeywordWithConstKeyword_arrayWithoutItem5IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3,4]
            """,
            """
                {"contains":{"const":5}}
            """,
            false,
            """contains keyword with const keyword -> array without item 5 is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema true -> any non-empty array is valid"
     */
    @Test
    fun contains_containsKeywordWithBooleanSchemaTrue_anyNon_emptyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                {"contains":true}
            """,
            true,
            """contains keyword with boolean schema true -> any non-empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema true -> empty array is invalid"
     */
    @Test
    fun contains_containsKeywordWithBooleanSchemaTrue_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"contains":true}
            """,
            false,
            """contains keyword with boolean schema true -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema false -> any non-empty array is invalid"
     */
    @Test
    fun contains_containsKeywordWithBooleanSchemaFalse_anyNon_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                {"contains":false}
            """,
            false,
            """contains keyword with boolean schema false -> any non-empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema false -> empty array is invalid"
     */
    @Test
    fun contains_containsKeywordWithBooleanSchemaFalse_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"contains":false}
            """,
            false,
            """contains keyword with boolean schema false -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains keyword with boolean schema false -> non-arrays are valid"
     */
    @Test
    fun contains_containsKeywordWithBooleanSchemaFalse_non_arraysAreValid() {
        
        assertKsonEnforcesSchema(
            """
                "contains does not apply to strings"
            """,
            """
                {"contains":false}
            """,
            true,
            """contains keyword with boolean schema false -> non-arrays are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> matches items, does not match contains"
     */
    @Test
    fun contains_items_Contains_matchesItems_DoesNotMatchContains() {
        
        assertKsonEnforcesSchema(
            """
                [2,4,8]
            """,
            """
                {"items":{"multipleOf":2},"contains":{"multipleOf":3}}
            """,
            false,
            """items + contains -> matches items, does not match contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> does not match items, matches contains"
     */
    @Test
    fun contains_items_Contains_doesNotMatchItems_MatchesContains() {
        
        assertKsonEnforcesSchema(
            """
                [3,6,9]
            """,
            """
                {"items":{"multipleOf":2},"contains":{"multipleOf":3}}
            """,
            false,
            """items + contains -> does not match items, matches contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> matches both items and contains"
     */
    @Test
    fun contains_items_Contains_matchesBothItemsAndContains() {
        
        assertKsonEnforcesSchema(
            """
                [6,12]
            """,
            """
                {"items":{"multipleOf":2},"contains":{"multipleOf":3}}
            """,
            true,
            """items + contains -> matches both items and contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "items + contains -> matches neither items nor contains"
     */
    @Test
    fun contains_items_Contains_matchesNeitherItemsNorContains() {
        
        assertKsonEnforcesSchema(
            """
                [1,5]
            """,
            """
                {"items":{"multipleOf":2},"contains":{"multipleOf":3}}
            """,
            false,
            """items + contains -> matches neither items nor contains""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains with false if subschema -> any non-empty array is valid"
     */
    @Test
    fun contains_containsWithFalseIfSubschema_anyNon_emptyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                {"contains":{"if":false,"else":true}}
            """,
            true,
            """contains with false if subschema -> any non-empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains with false if subschema -> empty array is invalid"
     */
    @Test
    fun contains_containsWithFalseIfSubschema_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"contains":{"if":false,"else":true}}
            """,
            false,
            """contains with false if subschema -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/contains.json`:
     *     "contains with null instance elements -> allows null items"
     */
    @Test
    fun contains_containsWithNullInstanceElements_allowsNullItems() {
        
        assertKsonEnforcesSchema(
            """
                [null]
            """,
            """
                {"contains":{"type":"null"}}
            """,
            true,
            """contains with null instance elements -> allows null items""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid type for default -> valid when property is specified"
     */
    @Test
    fun default_invalidTypeForDefault_validWhenPropertyIsSpecified() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":13}
            """,
            """
                {"properties":{"foo":{"type":"integer","default":[]}}}
            """,
            true,
            """invalid type for default -> valid when property is specified""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid type for default -> still valid when the invalid default is used"
     */
    @Test
    fun default_invalidTypeForDefault_stillValidWhenTheInvalidDefaultIsUsed() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"properties":{"foo":{"type":"integer","default":[]}}}
            """,
            true,
            """invalid type for default -> still valid when the invalid default is used""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid string value for default -> valid when property is specified"
     */
    @Test
    fun default_invalidStringValueForDefault_validWhenPropertyIsSpecified() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":"good"}
            """,
            """
                {"properties":{"bar":{"type":"string","minLength":4,"default":"bad"}}}
            """,
            true,
            """invalid string value for default -> valid when property is specified""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "invalid string value for default -> still valid when the invalid default is used"
     */
    @Test
    fun default_invalidStringValueForDefault_stillValidWhenTheInvalidDefaultIsUsed() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"properties":{"bar":{"type":"string","minLength":4,"default":"bad"}}}
            """,
            true,
            """invalid string value for default -> still valid when the invalid default is used""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (passing)"
     */
    @Test
    fun default_theDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing_anExplicitPropertyValueIsCheckedAgainstMaximum_passing_() {
        
        assertKsonEnforcesSchema(
            """
                {"alpha":1}
            """,
            """
                {"type":"object","properties":{"alpha":{"type":"number","maximum":3,"default":5}}}
            """,
            true,
            """the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (passing)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (failing)"
     */
    @Test
    fun default_theDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing_anExplicitPropertyValueIsCheckedAgainstMaximum_failing_() {
        
        assertKsonEnforcesSchema(
            """
                {"alpha":5}
            """,
            """
                {"type":"object","properties":{"alpha":{"type":"number","maximum":3,"default":5}}}
            """,
            false,
            """the default keyword does not do anything if the property is missing -> an explicit property value is checked against maximum (failing)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/default.json`:
     *     "the default keyword does not do anything if the property is missing -> missing properties are not filled in with the default"
     */
    @Test
    fun default_theDefaultKeywordDoesNotDoAnythingIfThePropertyIsMissing_missingPropertiesAreNotFilledInWithTheDefault() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"object","properties":{"alpha":{"type":"number","maximum":3,"default":5}}}
            """,
            true,
            """the default keyword does not do anything if the property is missing -> missing properties are not filled in with the default""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/definitions.json`:
     *     "validate definition against metaschema -> valid definition schema"
     */
    @Test
    fun definitions_validateDefinitionAgainstMetaschema_validDefinitionSchema() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "definitions_validateDefinitionAgainstMetaschema_validDefinitionSchema" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"definitions":{"foo":{"type":"integer"}}}
            """,
            """
                {"${'$'}ref":"http://json-schema.org/draft-07/schema#"}
            """,
            true,
            """validate definition against metaschema -> valid definition schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/definitions.json`:
     *     "validate definition against metaschema -> invalid definition schema"
     */
    @Test
    fun definitions_validateDefinitionAgainstMetaschema_invalidDefinitionSchema() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "definitions_validateDefinitionAgainstMetaschema_invalidDefinitionSchema" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"definitions":{"foo":{"type":1}}}
            """,
            """
                {"${'$'}ref":"http://json-schema.org/draft-07/schema#"}
            """,
            false,
            """validate definition against metaschema -> invalid definition schema""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> neither"
     */
    @Test
    fun dependencies_dependencies_neither() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"dependencies":{"bar":["foo"]}}
            """,
            true,
            """dependencies -> neither""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> nondependant"
     */
    @Test
    fun dependencies_dependencies_nondependant() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"dependencies":{"bar":["foo"]}}
            """,
            true,
            """dependencies -> nondependant""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> with dependency"
     */
    @Test
    fun dependencies_dependencies_withDependency() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"dependencies":{"bar":["foo"]}}
            """,
            true,
            """dependencies -> with dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> missing dependency"
     */
    @Test
    fun dependencies_dependencies_missingDependency() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"dependencies":{"bar":["foo"]}}
            """,
            false,
            """dependencies -> missing dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> ignores arrays"
     */
    @Test
    fun dependencies_dependencies_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                ["bar"]
            """,
            """
                {"dependencies":{"bar":["foo"]}}
            """,
            true,
            """dependencies -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> ignores strings"
     */
    @Test
    fun dependencies_dependencies_ignoresStrings() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {"dependencies":{"bar":["foo"]}}
            """,
            true,
            """dependencies -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies -> ignores other non-objects"
     */
    @Test
    fun dependencies_dependencies_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"dependencies":{"bar":["foo"]}}
            """,
            true,
            """dependencies -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with empty array -> empty object"
     */
    @Test
    fun dependencies_dependenciesWithEmptyArray_emptyObject() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"dependencies":{"bar":[]}}
            """,
            true,
            """dependencies with empty array -> empty object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with empty array -> object with one property"
     */
    @Test
    fun dependencies_dependenciesWithEmptyArray_objectWithOneProperty() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"dependencies":{"bar":[]}}
            """,
            true,
            """dependencies with empty array -> object with one property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with empty array -> non-object is valid"
     */
    @Test
    fun dependencies_dependenciesWithEmptyArray_non_objectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"dependencies":{"bar":[]}}
            """,
            true,
            """dependencies with empty array -> non-object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> neither"
     */
    @Test
    fun dependencies_multipleDependencies_neither() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"dependencies":{"quux":["foo","bar"]}}
            """,
            true,
            """multiple dependencies -> neither""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> nondependants"
     */
    @Test
    fun dependencies_multipleDependencies_nondependants() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"dependencies":{"quux":["foo","bar"]}}
            """,
            true,
            """multiple dependencies -> nondependants""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> with dependencies"
     */
    @Test
    fun dependencies_multipleDependencies_withDependencies() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"quux":3}
            """,
            """
                {"dependencies":{"quux":["foo","bar"]}}
            """,
            true,
            """multiple dependencies -> with dependencies""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> missing dependency"
     */
    @Test
    fun dependencies_multipleDependencies_missingDependency() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"quux":2}
            """,
            """
                {"dependencies":{"quux":["foo","bar"]}}
            """,
            false,
            """multiple dependencies -> missing dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> missing other dependency"
     */
    @Test
    fun dependencies_multipleDependencies_missingOtherDependency() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":1,"quux":2}
            """,
            """
                {"dependencies":{"quux":["foo","bar"]}}
            """,
            false,
            """multiple dependencies -> missing other dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies -> missing both dependencies"
     */
    @Test
    fun dependencies_multipleDependencies_missingBothDependencies() {
        
        assertKsonEnforcesSchema(
            """
                {"quux":1}
            """,
            """
                {"dependencies":{"quux":["foo","bar"]}}
            """,
            false,
            """multiple dependencies -> missing both dependencies""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> valid"
     */
    @Test
    fun dependencies_multipleDependenciesSubschema_valid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"dependencies":{"bar":{"properties":{"foo":{"type":"integer"},"bar":{"type":"integer"}}}}}
            """,
            true,
            """multiple dependencies subschema -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> no dependency"
     */
    @Test
    fun dependencies_multipleDependenciesSubschema_noDependency() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"quux"}
            """,
            """
                {"dependencies":{"bar":{"properties":{"foo":{"type":"integer"},"bar":{"type":"integer"}}}}}
            """,
            true,
            """multiple dependencies subschema -> no dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> wrong type"
     */
    @Test
    fun dependencies_multipleDependenciesSubschema_wrongType() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"quux","bar":2}
            """,
            """
                {"dependencies":{"bar":{"properties":{"foo":{"type":"integer"},"bar":{"type":"integer"}}}}}
            """,
            false,
            """multiple dependencies subschema -> wrong type""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> wrong type other"
     */
    @Test
    fun dependencies_multipleDependenciesSubschema_wrongTypeOther() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":2,"bar":"quux"}
            """,
            """
                {"dependencies":{"bar":{"properties":{"foo":{"type":"integer"},"bar":{"type":"integer"}}}}}
            """,
            false,
            """multiple dependencies subschema -> wrong type other""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "multiple dependencies subschema -> wrong type both"
     */
    @Test
    fun dependencies_multipleDependenciesSubschema_wrongTypeBoth() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"quux","bar":"quux"}
            """,
            """
                {"dependencies":{"bar":{"properties":{"foo":{"type":"integer"},"bar":{"type":"integer"}}}}}
            """,
            false,
            """multiple dependencies subschema -> wrong type both""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> object with property having schema true is valid"
     */
    @Test
    fun dependencies_dependenciesWithBooleanSubschemas_objectWithPropertyHavingSchemaTrueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"dependencies":{"foo":true,"bar":false}}
            """,
            true,
            """dependencies with boolean subschemas -> object with property having schema true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> object with property having schema false is invalid"
     */
    @Test
    fun dependencies_dependenciesWithBooleanSubschemas_objectWithPropertyHavingSchemaFalseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"dependencies":{"foo":true,"bar":false}}
            """,
            false,
            """dependencies with boolean subschemas -> object with property having schema false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> object with both properties is invalid"
     */
    @Test
    fun dependencies_dependenciesWithBooleanSubschemas_objectWithBothPropertiesIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"dependencies":{"foo":true,"bar":false}}
            """,
            false,
            """dependencies with boolean subschemas -> object with both properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with boolean subschemas -> empty object is valid"
     */
    @Test
    fun dependencies_dependenciesWithBooleanSubschemas_emptyObjectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"dependencies":{"foo":true,"bar":false}}
            """,
            true,
            """dependencies with boolean subschemas -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> valid object 1"
     */
    @Test
    fun dependencies_dependenciesWithEscapedCharacters_validObject1() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\nbar":1,"foo\rbar":2}
            """,
            """
                {"dependencies":{"foo\nbar":["foo\rbar"],"foo\tbar":{"minProperties":4},"foo'bar":{"required":["foo\"bar"]},"foo\"bar":["foo'bar"]}}
            """,
            true,
            """dependencies with escaped characters -> valid object 1""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> valid object 2"
     */
    @Test
    fun dependencies_dependenciesWithEscapedCharacters_validObject2() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\tbar":1,"a":2,"b":3,"c":4}
            """,
            """
                {"dependencies":{"foo\nbar":["foo\rbar"],"foo\tbar":{"minProperties":4},"foo'bar":{"required":["foo\"bar"]},"foo\"bar":["foo'bar"]}}
            """,
            true,
            """dependencies with escaped characters -> valid object 2""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> valid object 3"
     */
    @Test
    fun dependencies_dependenciesWithEscapedCharacters_validObject3() {
        
        assertKsonEnforcesSchema(
            """
                {"foo'bar":1,"foo\"bar":2}
            """,
            """
                {"dependencies":{"foo\nbar":["foo\rbar"],"foo\tbar":{"minProperties":4},"foo'bar":{"required":["foo\"bar"]},"foo\"bar":["foo'bar"]}}
            """,
            true,
            """dependencies with escaped characters -> valid object 3""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 1"
     */
    @Test
    fun dependencies_dependenciesWithEscapedCharacters_invalidObject1() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\nbar":1,"foo":2}
            """,
            """
                {"dependencies":{"foo\nbar":["foo\rbar"],"foo\tbar":{"minProperties":4},"foo'bar":{"required":["foo\"bar"]},"foo\"bar":["foo'bar"]}}
            """,
            false,
            """dependencies with escaped characters -> invalid object 1""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 2"
     */
    @Test
    fun dependencies_dependenciesWithEscapedCharacters_invalidObject2() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\tbar":1,"a":2}
            """,
            """
                {"dependencies":{"foo\nbar":["foo\rbar"],"foo\tbar":{"minProperties":4},"foo'bar":{"required":["foo\"bar"]},"foo\"bar":["foo'bar"]}}
            """,
            false,
            """dependencies with escaped characters -> invalid object 2""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 3"
     */
    @Test
    fun dependencies_dependenciesWithEscapedCharacters_invalidObject3() {
        
        assertKsonEnforcesSchema(
            """
                {"foo'bar":1}
            """,
            """
                {"dependencies":{"foo\nbar":["foo\rbar"],"foo\tbar":{"minProperties":4},"foo'bar":{"required":["foo\"bar"]},"foo\"bar":["foo'bar"]}}
            """,
            false,
            """dependencies with escaped characters -> invalid object 3""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependencies with escaped characters -> invalid object 4"
     */
    @Test
    fun dependencies_dependenciesWithEscapedCharacters_invalidObject4() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\"bar":2}
            """,
            """
                {"dependencies":{"foo\nbar":["foo\rbar"],"foo\tbar":{"minProperties":4},"foo'bar":{"required":["foo\"bar"]},"foo\"bar":["foo'bar"]}}
            """,
            false,
            """dependencies with escaped characters -> invalid object 4""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> matches root"
     */
    @Test
    fun dependencies_dependentSubschemaIncompatibleWithRoot_matchesRoot() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"properties":{"foo":{}},"dependencies":{"foo":{"properties":{"bar":{}},"additionalProperties":false}}}
            """,
            false,
            """dependent subschema incompatible with root -> matches root""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> matches dependency"
     */
    @Test
    fun dependencies_dependentSubschemaIncompatibleWithRoot_matchesDependency() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":1}
            """,
            """
                {"properties":{"foo":{}},"dependencies":{"foo":{"properties":{"bar":{}},"additionalProperties":false}}}
            """,
            true,
            """dependent subschema incompatible with root -> matches dependency""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> matches both"
     */
    @Test
    fun dependencies_dependentSubschemaIncompatibleWithRoot_matchesBoth() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"properties":{"foo":{}},"dependencies":{"foo":{"properties":{"bar":{}},"additionalProperties":false}}}
            """,
            false,
            """dependent subschema incompatible with root -> matches both""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/dependencies.json`:
     *     "dependent subschema incompatible with root -> no dependency"
     */
    @Test
    fun dependencies_dependentSubschemaIncompatibleWithRoot_noDependency() {
        
        assertKsonEnforcesSchema(
            """
                {"baz":1}
            """,
            """
                {"properties":{"foo":{}},"dependencies":{"foo":{"properties":{"bar":{}},"additionalProperties":false}}}
            """,
            true,
            """dependent subschema incompatible with root -> no dependency""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "simple enum validation -> one of the enum is valid"
     */
    @Test
    fun enum_simpleEnumValidation_oneOfTheEnumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"enum":[1,2,3]}
            """,
            true,
            """simple enum validation -> one of the enum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "simple enum validation -> something else is invalid"
     */
    @Test
    fun enum_simpleEnumValidation_somethingElseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {"enum":[1,2,3]}
            """,
            false,
            """simple enum validation -> something else is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum validation -> one of the enum is valid"
     */
    @Test
    fun enum_heterogeneousEnumValidation_oneOfTheEnumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"enum":[6,"foo",[],true,{"foo":12}]}
            """,
            true,
            """heterogeneous enum validation -> one of the enum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum validation -> something else is invalid"
     */
    @Test
    fun enum_heterogeneousEnumValidation_somethingElseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"enum":[6,"foo",[],true,{"foo":12}]}
            """,
            false,
            """heterogeneous enum validation -> something else is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum validation -> objects are deep compared"
     */
    @Test
    fun enum_heterogeneousEnumValidation_objectsAreDeepCompared() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":false}
            """,
            """
                {"enum":[6,"foo",[],true,{"foo":12}]}
            """,
            false,
            """heterogeneous enum validation -> objects are deep compared""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum validation -> valid object matches"
     */
    @Test
    fun enum_heterogeneousEnumValidation_validObjectMatches() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"enum":[6,"foo",[],true,{"foo":12}]}
            """,
            true,
            """heterogeneous enum validation -> valid object matches""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum validation -> extra properties in object is invalid"
     */
    @Test
    fun enum_heterogeneousEnumValidation_extraPropertiesInObjectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":12,"boo":42}
            """,
            """
                {"enum":[6,"foo",[],true,{"foo":12}]}
            """,
            false,
            """heterogeneous enum validation -> extra properties in object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum-with-null validation -> null is valid"
     */
    @Test
    fun enum_heterogeneousEnum_with_nullValidation_nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"enum":[6,null]}
            """,
            true,
            """heterogeneous enum-with-null validation -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum-with-null validation -> number is valid"
     */
    @Test
    fun enum_heterogeneousEnum_with_nullValidation_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                6
            """,
            """
                {"enum":[6,null]}
            """,
            true,
            """heterogeneous enum-with-null validation -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "heterogeneous enum-with-null validation -> something else is invalid"
     */
    @Test
    fun enum_heterogeneousEnum_with_nullValidation_somethingElseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "test"
            """,
            """
                {"enum":[6,null]}
            """,
            false,
            """heterogeneous enum-with-null validation -> something else is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enums in properties -> both properties are valid"
     */
    @Test
    fun enum_enumsInProperties_bothPropertiesAreValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"foo","bar":"bar"}
            """,
            """
                {"type":"object","properties":{"foo":{"enum":["foo"]},"bar":{"enum":["bar"]}},"required":["bar"]}
            """,
            true,
            """enums in properties -> both properties are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enums in properties -> wrong foo value"
     */
    @Test
    fun enum_enumsInProperties_wrongFooValue() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"foot","bar":"bar"}
            """,
            """
                {"type":"object","properties":{"foo":{"enum":["foo"]},"bar":{"enum":["bar"]}},"required":["bar"]}
            """,
            false,
            """enums in properties -> wrong foo value""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enums in properties -> wrong bar value"
     */
    @Test
    fun enum_enumsInProperties_wrongBarValue() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"foo","bar":"bart"}
            """,
            """
                {"type":"object","properties":{"foo":{"enum":["foo"]},"bar":{"enum":["bar"]}},"required":["bar"]}
            """,
            false,
            """enums in properties -> wrong bar value""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enums in properties -> missing optional property is valid"
     */
    @Test
    fun enum_enumsInProperties_missingOptionalPropertyIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":"bar"}
            """,
            """
                {"type":"object","properties":{"foo":{"enum":["foo"]},"bar":{"enum":["bar"]}},"required":["bar"]}
            """,
            true,
            """enums in properties -> missing optional property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enums in properties -> missing required property is invalid"
     */
    @Test
    fun enum_enumsInProperties_missingRequiredPropertyIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"foo"}
            """,
            """
                {"type":"object","properties":{"foo":{"enum":["foo"]},"bar":{"enum":["bar"]}},"required":["bar"]}
            """,
            false,
            """enums in properties -> missing required property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enums in properties -> missing all properties is invalid"
     */
    @Test
    fun enum_enumsInProperties_missingAllPropertiesIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"object","properties":{"foo":{"enum":["foo"]},"bar":{"enum":["bar"]}},"required":["bar"]}
            """,
            false,
            """enums in properties -> missing all properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with escaped characters -> member 1 is valid"
     */
    @Test
    fun enum_enumWithEscapedCharacters_member1IsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo\nbar"
            """,
            """
                {"enum":["foo\nbar","foo\rbar"]}
            """,
            true,
            """enum with escaped characters -> member 1 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with escaped characters -> member 2 is valid"
     */
    @Test
    fun enum_enumWithEscapedCharacters_member2IsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo\rbar"
            """,
            """
                {"enum":["foo\nbar","foo\rbar"]}
            """,
            true,
            """enum with escaped characters -> member 2 is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with escaped characters -> another string is invalid"
     */
    @Test
    fun enum_enumWithEscapedCharacters_anotherStringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "abc"
            """,
            """
                {"enum":["foo\nbar","foo\rbar"]}
            """,
            false,
            """enum with escaped characters -> another string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with false does not match 0 -> false is valid"
     */
    @Test
    fun enum_enumWithFalseDoesNotMatch0_falseIsValid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"enum":[false]}
            """,
            true,
            """enum with false does not match 0 -> false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with false does not match 0 -> integer zero is invalid"
     */
    @Test
    fun enum_enumWithFalseDoesNotMatch0_integerZeroIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"enum":[false]}
            """,
            false,
            """enum with false does not match 0 -> integer zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with false does not match 0 -> float zero is invalid"
     */
    @Test
    fun enum_enumWithFalseDoesNotMatch0_floatZeroIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {"enum":[false]}
            """,
            false,
            """enum with false does not match 0 -> float zero is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [false] does not match [0] -> [false] is valid"
     */
    @Test
    fun enum_enumWith_false_DoesNotMatch_0___false_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false]
            """,
            """
                {"enum":[[false]]}
            """,
            true,
            """enum with [false] does not match [0] -> [false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [false] does not match [0] -> [0] is invalid"
     */
    @Test
    fun enum_enumWith_false_DoesNotMatch_0___0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [0]
            """,
            """
                {"enum":[[false]]}
            """,
            false,
            """enum with [false] does not match [0] -> [0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [false] does not match [0] -> [0.0] is invalid"
     */
    @Test
    fun enum_enumWith_false_DoesNotMatch_0___0_0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [0.0]
            """,
            """
                {"enum":[[false]]}
            """,
            false,
            """enum with [false] does not match [0] -> [0.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with true does not match 1 -> true is valid"
     */
    @Test
    fun enum_enumWithTrueDoesNotMatch1_trueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"enum":[true]}
            """,
            true,
            """enum with true does not match 1 -> true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with true does not match 1 -> integer one is invalid"
     */
    @Test
    fun enum_enumWithTrueDoesNotMatch1_integerOneIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"enum":[true]}
            """,
            false,
            """enum with true does not match 1 -> integer one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with true does not match 1 -> float one is invalid"
     */
    @Test
    fun enum_enumWithTrueDoesNotMatch1_floatOneIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {"enum":[true]}
            """,
            false,
            """enum with true does not match 1 -> float one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [true] does not match [1] -> [true] is valid"
     */
    @Test
    fun enum_enumWith_true_DoesNotMatch_1___true_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true]
            """,
            """
                {"enum":[[true]]}
            """,
            true,
            """enum with [true] does not match [1] -> [true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [true] does not match [1] -> [1] is invalid"
     */
    @Test
    fun enum_enumWith_true_DoesNotMatch_1___1_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"enum":[[true]]}
            """,
            false,
            """enum with [true] does not match [1] -> [1] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [true] does not match [1] -> [1.0] is invalid"
     */
    @Test
    fun enum_enumWith_true_DoesNotMatch_1___1_0_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1.0]
            """,
            """
                {"enum":[[true]]}
            """,
            false,
            """enum with [true] does not match [1] -> [1.0] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with 0 does not match false -> false is invalid"
     */
    @Test
    fun enum_enumWith0DoesNotMatchFalse_falseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"enum":[0]}
            """,
            false,
            """enum with 0 does not match false -> false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with 0 does not match false -> integer zero is valid"
     */
    @Test
    fun enum_enumWith0DoesNotMatchFalse_integerZeroIsValid() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"enum":[0]}
            """,
            true,
            """enum with 0 does not match false -> integer zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with 0 does not match false -> float zero is valid"
     */
    @Test
    fun enum_enumWith0DoesNotMatchFalse_floatZeroIsValid() {
        
        assertKsonEnforcesSchema(
            """
                0.0
            """,
            """
                {"enum":[0]}
            """,
            true,
            """enum with 0 does not match false -> float zero is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [0] does not match [false] -> [false] is invalid"
     */
    @Test
    fun enum_enumWith_0_DoesNotMatch_false___false_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [false]
            """,
            """
                {"enum":[[0]]}
            """,
            false,
            """enum with [0] does not match [false] -> [false] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [0] does not match [false] -> [0] is valid"
     */
    @Test
    fun enum_enumWith_0_DoesNotMatch_false___0_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [0]
            """,
            """
                {"enum":[[0]]}
            """,
            true,
            """enum with [0] does not match [false] -> [0] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [0] does not match [false] -> [0.0] is valid"
     */
    @Test
    fun enum_enumWith_0_DoesNotMatch_false___0_0_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [0.0]
            """,
            """
                {"enum":[[0]]}
            """,
            true,
            """enum with [0] does not match [false] -> [0.0] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with 1 does not match true -> true is invalid"
     */
    @Test
    fun enum_enumWith1DoesNotMatchTrue_trueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"enum":[1]}
            """,
            false,
            """enum with 1 does not match true -> true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with 1 does not match true -> integer one is valid"
     */
    @Test
    fun enum_enumWith1DoesNotMatchTrue_integerOneIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"enum":[1]}
            """,
            true,
            """enum with 1 does not match true -> integer one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with 1 does not match true -> float one is valid"
     */
    @Test
    fun enum_enumWith1DoesNotMatchTrue_floatOneIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {"enum":[1]}
            """,
            true,
            """enum with 1 does not match true -> float one is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [1] does not match [true] -> [true] is invalid"
     */
    @Test
    fun enum_enumWith_1_DoesNotMatch_true___true_IsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [true]
            """,
            """
                {"enum":[[1]]}
            """,
            false,
            """enum with [1] does not match [true] -> [true] is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [1] does not match [true] -> [1] is valid"
     */
    @Test
    fun enum_enumWith_1_DoesNotMatch_true___1_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"enum":[[1]]}
            """,
            true,
            """enum with [1] does not match [true] -> [1] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "enum with [1] does not match [true] -> [1.0] is valid"
     */
    @Test
    fun enum_enumWith_1_DoesNotMatch_true___1_0_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1.0]
            """,
            """
                {"enum":[[1]]}
            """,
            true,
            """enum with [1] does not match [true] -> [1.0] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "nul characters in strings -> match string with nul"
     */
    @Test
    fun enum_nulCharactersInStrings_matchStringWithNul() {
        
        assertKsonEnforcesSchema(
            """
                "hello\u0000there"
            """,
            """
                {"enum":["hello\u0000there"]}
            """,
            true,
            """nul characters in strings -> match string with nul""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/enum.json`:
     *     "nul characters in strings -> do not match string lacking nul"
     */
    @Test
    fun enum_nulCharactersInStrings_doNotMatchStringLackingNul() {
        
        assertKsonEnforcesSchema(
            """
                "hellothere"
            """,
            """
                {"enum":["hello\u0000there"]}
            """,
            false,
            """nul characters in strings -> do not match string lacking nul""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> below the exclusiveMaximum is valid"
     */
    @Test
    fun exclusiveMaximum_exclusiveMaximumValidation_belowTheExclusiveMaximumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                2.2
            """,
            """
                {"exclusiveMaximum":3.0}
            """,
            true,
            """exclusiveMaximum validation -> below the exclusiveMaximum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> boundary point is invalid"
     */
    @Test
    fun exclusiveMaximum_exclusiveMaximumValidation_boundaryPointIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                3.0
            """,
            """
                {"exclusiveMaximum":3.0}
            """,
            false,
            """exclusiveMaximum validation -> boundary point is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> above the exclusiveMaximum is invalid"
     */
    @Test
    fun exclusiveMaximum_exclusiveMaximumValidation_aboveTheExclusiveMaximumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                3.5
            """,
            """
                {"exclusiveMaximum":3.0}
            """,
            false,
            """exclusiveMaximum validation -> above the exclusiveMaximum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMaximum.json`:
     *     "exclusiveMaximum validation -> ignores non-numbers"
     */
    @Test
    fun exclusiveMaximum_exclusiveMaximumValidation_ignoresNon_numbers() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {"exclusiveMaximum":3.0}
            """,
            true,
            """exclusiveMaximum validation -> ignores non-numbers""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> above the exclusiveMinimum is valid"
     */
    @Test
    fun exclusiveMinimum_exclusiveMinimumValidation_aboveTheExclusiveMinimumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1.2
            """,
            """
                {"exclusiveMinimum":1.1}
            """,
            true,
            """exclusiveMinimum validation -> above the exclusiveMinimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> boundary point is invalid"
     */
    @Test
    fun exclusiveMinimum_exclusiveMinimumValidation_boundaryPointIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"exclusiveMinimum":1.1}
            """,
            false,
            """exclusiveMinimum validation -> boundary point is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> below the exclusiveMinimum is invalid"
     */
    @Test
    fun exclusiveMinimum_exclusiveMinimumValidation_belowTheExclusiveMinimumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                0.6
            """,
            """
                {"exclusiveMinimum":1.1}
            """,
            false,
            """exclusiveMinimum validation -> below the exclusiveMinimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/exclusiveMinimum.json`:
     *     "exclusiveMinimum validation -> ignores non-numbers"
     */
    @Test
    fun exclusiveMinimum_exclusiveMinimumValidation_ignoresNon_numbers() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {"exclusiveMinimum":1.1}
            """,
            true,
            """exclusiveMinimum validation -> ignores non-numbers""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore integers"
     */
    @Test
    fun format_emailFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"email"}
            """,
            true,
            """email format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore floats"
     */
    @Test
    fun format_emailFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"email"}
            """,
            true,
            """email format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore objects"
     */
    @Test
    fun format_emailFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"email"}
            """,
            true,
            """email format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore arrays"
     */
    @Test
    fun format_emailFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"email"}
            """,
            true,
            """email format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore booleans"
     */
    @Test
    fun format_emailFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"email"}
            """,
            true,
            """email format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "email format -> all string formats ignore nulls"
     */
    @Test
    fun format_emailFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"email"}
            """,
            true,
            """email format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore integers"
     */
    @Test
    fun format_idn_emailFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"idn-email"}
            """,
            true,
            """idn-email format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore floats"
     */
    @Test
    fun format_idn_emailFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"idn-email"}
            """,
            true,
            """idn-email format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore objects"
     */
    @Test
    fun format_idn_emailFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"idn-email"}
            """,
            true,
            """idn-email format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore arrays"
     */
    @Test
    fun format_idn_emailFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"idn-email"}
            """,
            true,
            """idn-email format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore booleans"
     */
    @Test
    fun format_idn_emailFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"idn-email"}
            """,
            true,
            """idn-email format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-email format -> all string formats ignore nulls"
     */
    @Test
    fun format_idn_emailFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"idn-email"}
            """,
            true,
            """idn-email format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore integers"
     */
    @Test
    fun format_regexFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"regex"}
            """,
            true,
            """regex format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore floats"
     */
    @Test
    fun format_regexFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"regex"}
            """,
            true,
            """regex format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore objects"
     */
    @Test
    fun format_regexFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"regex"}
            """,
            true,
            """regex format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore arrays"
     */
    @Test
    fun format_regexFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"regex"}
            """,
            true,
            """regex format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore booleans"
     */
    @Test
    fun format_regexFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"regex"}
            """,
            true,
            """regex format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "regex format -> all string formats ignore nulls"
     */
    @Test
    fun format_regexFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"regex"}
            """,
            true,
            """regex format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore integers"
     */
    @Test
    fun format_ipv4Format_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"ipv4"}
            """,
            true,
            """ipv4 format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore floats"
     */
    @Test
    fun format_ipv4Format_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"ipv4"}
            """,
            true,
            """ipv4 format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore objects"
     */
    @Test
    fun format_ipv4Format_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"ipv4"}
            """,
            true,
            """ipv4 format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore arrays"
     */
    @Test
    fun format_ipv4Format_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"ipv4"}
            """,
            true,
            """ipv4 format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore booleans"
     */
    @Test
    fun format_ipv4Format_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"ipv4"}
            """,
            true,
            """ipv4 format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv4 format -> all string formats ignore nulls"
     */
    @Test
    fun format_ipv4Format_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"ipv4"}
            """,
            true,
            """ipv4 format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore integers"
     */
    @Test
    fun format_ipv6Format_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"ipv6"}
            """,
            true,
            """ipv6 format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore floats"
     */
    @Test
    fun format_ipv6Format_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"ipv6"}
            """,
            true,
            """ipv6 format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore objects"
     */
    @Test
    fun format_ipv6Format_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"ipv6"}
            """,
            true,
            """ipv6 format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore arrays"
     */
    @Test
    fun format_ipv6Format_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"ipv6"}
            """,
            true,
            """ipv6 format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore booleans"
     */
    @Test
    fun format_ipv6Format_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"ipv6"}
            """,
            true,
            """ipv6 format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "ipv6 format -> all string formats ignore nulls"
     */
    @Test
    fun format_ipv6Format_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"ipv6"}
            """,
            true,
            """ipv6 format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore integers"
     */
    @Test
    fun format_idn_hostnameFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"idn-hostname"}
            """,
            true,
            """idn-hostname format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore floats"
     */
    @Test
    fun format_idn_hostnameFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"idn-hostname"}
            """,
            true,
            """idn-hostname format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore objects"
     */
    @Test
    fun format_idn_hostnameFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"idn-hostname"}
            """,
            true,
            """idn-hostname format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore arrays"
     */
    @Test
    fun format_idn_hostnameFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"idn-hostname"}
            """,
            true,
            """idn-hostname format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore booleans"
     */
    @Test
    fun format_idn_hostnameFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"idn-hostname"}
            """,
            true,
            """idn-hostname format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "idn-hostname format -> all string formats ignore nulls"
     */
    @Test
    fun format_idn_hostnameFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"idn-hostname"}
            """,
            true,
            """idn-hostname format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore integers"
     */
    @Test
    fun format_hostnameFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"hostname"}
            """,
            true,
            """hostname format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore floats"
     */
    @Test
    fun format_hostnameFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"hostname"}
            """,
            true,
            """hostname format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore objects"
     */
    @Test
    fun format_hostnameFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"hostname"}
            """,
            true,
            """hostname format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore arrays"
     */
    @Test
    fun format_hostnameFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"hostname"}
            """,
            true,
            """hostname format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore booleans"
     */
    @Test
    fun format_hostnameFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"hostname"}
            """,
            true,
            """hostname format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "hostname format -> all string formats ignore nulls"
     */
    @Test
    fun format_hostnameFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"hostname"}
            """,
            true,
            """hostname format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore integers"
     */
    @Test
    fun format_dateFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"date"}
            """,
            true,
            """date format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore floats"
     */
    @Test
    fun format_dateFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"date"}
            """,
            true,
            """date format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore objects"
     */
    @Test
    fun format_dateFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"date"}
            """,
            true,
            """date format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore arrays"
     */
    @Test
    fun format_dateFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"date"}
            """,
            true,
            """date format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore booleans"
     */
    @Test
    fun format_dateFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"date"}
            """,
            true,
            """date format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date format -> all string formats ignore nulls"
     */
    @Test
    fun format_dateFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"date"}
            """,
            true,
            """date format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore integers"
     */
    @Test
    fun format_date_timeFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"date-time"}
            """,
            true,
            """date-time format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore floats"
     */
    @Test
    fun format_date_timeFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"date-time"}
            """,
            true,
            """date-time format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore objects"
     */
    @Test
    fun format_date_timeFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"date-time"}
            """,
            true,
            """date-time format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore arrays"
     */
    @Test
    fun format_date_timeFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"date-time"}
            """,
            true,
            """date-time format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore booleans"
     */
    @Test
    fun format_date_timeFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"date-time"}
            """,
            true,
            """date-time format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "date-time format -> all string formats ignore nulls"
     */
    @Test
    fun format_date_timeFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"date-time"}
            """,
            true,
            """date-time format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore integers"
     */
    @Test
    fun format_timeFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"time"}
            """,
            true,
            """time format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore floats"
     */
    @Test
    fun format_timeFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"time"}
            """,
            true,
            """time format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore objects"
     */
    @Test
    fun format_timeFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"time"}
            """,
            true,
            """time format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore arrays"
     */
    @Test
    fun format_timeFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"time"}
            """,
            true,
            """time format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore booleans"
     */
    @Test
    fun format_timeFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"time"}
            """,
            true,
            """time format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "time format -> all string formats ignore nulls"
     */
    @Test
    fun format_timeFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"time"}
            """,
            true,
            """time format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore integers"
     */
    @Test
    fun format_json_pointerFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"json-pointer"}
            """,
            true,
            """json-pointer format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore floats"
     */
    @Test
    fun format_json_pointerFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"json-pointer"}
            """,
            true,
            """json-pointer format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore objects"
     */
    @Test
    fun format_json_pointerFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"json-pointer"}
            """,
            true,
            """json-pointer format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore arrays"
     */
    @Test
    fun format_json_pointerFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"json-pointer"}
            """,
            true,
            """json-pointer format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore booleans"
     */
    @Test
    fun format_json_pointerFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"json-pointer"}
            """,
            true,
            """json-pointer format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "json-pointer format -> all string formats ignore nulls"
     */
    @Test
    fun format_json_pointerFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"json-pointer"}
            """,
            true,
            """json-pointer format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore integers"
     */
    @Test
    fun format_relative_json_pointerFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"relative-json-pointer"}
            """,
            true,
            """relative-json-pointer format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore floats"
     */
    @Test
    fun format_relative_json_pointerFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"relative-json-pointer"}
            """,
            true,
            """relative-json-pointer format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore objects"
     */
    @Test
    fun format_relative_json_pointerFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"relative-json-pointer"}
            """,
            true,
            """relative-json-pointer format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore arrays"
     */
    @Test
    fun format_relative_json_pointerFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"relative-json-pointer"}
            """,
            true,
            """relative-json-pointer format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore booleans"
     */
    @Test
    fun format_relative_json_pointerFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"relative-json-pointer"}
            """,
            true,
            """relative-json-pointer format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "relative-json-pointer format -> all string formats ignore nulls"
     */
    @Test
    fun format_relative_json_pointerFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"relative-json-pointer"}
            """,
            true,
            """relative-json-pointer format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore integers"
     */
    @Test
    fun format_iriFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"iri"}
            """,
            true,
            """iri format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore floats"
     */
    @Test
    fun format_iriFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"iri"}
            """,
            true,
            """iri format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore objects"
     */
    @Test
    fun format_iriFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"iri"}
            """,
            true,
            """iri format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore arrays"
     */
    @Test
    fun format_iriFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"iri"}
            """,
            true,
            """iri format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore booleans"
     */
    @Test
    fun format_iriFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"iri"}
            """,
            true,
            """iri format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri format -> all string formats ignore nulls"
     */
    @Test
    fun format_iriFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"iri"}
            """,
            true,
            """iri format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore integers"
     */
    @Test
    fun format_iri_referenceFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"iri-reference"}
            """,
            true,
            """iri-reference format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore floats"
     */
    @Test
    fun format_iri_referenceFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"iri-reference"}
            """,
            true,
            """iri-reference format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore objects"
     */
    @Test
    fun format_iri_referenceFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"iri-reference"}
            """,
            true,
            """iri-reference format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore arrays"
     */
    @Test
    fun format_iri_referenceFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"iri-reference"}
            """,
            true,
            """iri-reference format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore booleans"
     */
    @Test
    fun format_iri_referenceFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"iri-reference"}
            """,
            true,
            """iri-reference format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "iri-reference format -> all string formats ignore nulls"
     */
    @Test
    fun format_iri_referenceFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"iri-reference"}
            """,
            true,
            """iri-reference format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore integers"
     */
    @Test
    fun format_uriFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"uri"}
            """,
            true,
            """uri format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore floats"
     */
    @Test
    fun format_uriFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"uri"}
            """,
            true,
            """uri format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore objects"
     */
    @Test
    fun format_uriFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"uri"}
            """,
            true,
            """uri format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore arrays"
     */
    @Test
    fun format_uriFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"uri"}
            """,
            true,
            """uri format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore booleans"
     */
    @Test
    fun format_uriFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"uri"}
            """,
            true,
            """uri format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri format -> all string formats ignore nulls"
     */
    @Test
    fun format_uriFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"uri"}
            """,
            true,
            """uri format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore integers"
     */
    @Test
    fun format_uri_referenceFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"uri-reference"}
            """,
            true,
            """uri-reference format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore floats"
     */
    @Test
    fun format_uri_referenceFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"uri-reference"}
            """,
            true,
            """uri-reference format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore objects"
     */
    @Test
    fun format_uri_referenceFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"uri-reference"}
            """,
            true,
            """uri-reference format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore arrays"
     */
    @Test
    fun format_uri_referenceFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"uri-reference"}
            """,
            true,
            """uri-reference format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore booleans"
     */
    @Test
    fun format_uri_referenceFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"uri-reference"}
            """,
            true,
            """uri-reference format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-reference format -> all string formats ignore nulls"
     */
    @Test
    fun format_uri_referenceFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"uri-reference"}
            """,
            true,
            """uri-reference format -> all string formats ignore nulls""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore integers"
     */
    @Test
    fun format_uri_templateFormat_allStringFormatsIgnoreIntegers() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"format":"uri-template"}
            """,
            true,
            """uri-template format -> all string formats ignore integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore floats"
     */
    @Test
    fun format_uri_templateFormat_allStringFormatsIgnoreFloats() {
        
        assertKsonEnforcesSchema(
            """
                13.7
            """,
            """
                {"format":"uri-template"}
            """,
            true,
            """uri-template format -> all string formats ignore floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore objects"
     */
    @Test
    fun format_uri_templateFormat_allStringFormatsIgnoreObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"format":"uri-template"}
            """,
            true,
            """uri-template format -> all string formats ignore objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore arrays"
     */
    @Test
    fun format_uri_templateFormat_allStringFormatsIgnoreArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"format":"uri-template"}
            """,
            true,
            """uri-template format -> all string formats ignore arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore booleans"
     */
    @Test
    fun format_uri_templateFormat_allStringFormatsIgnoreBooleans() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"format":"uri-template"}
            """,
            true,
            """uri-template format -> all string formats ignore booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/format.json`:
     *     "uri-template format -> all string formats ignore nulls"
     */
    @Test
    fun format_uri_templateFormat_allStringFormatsIgnoreNulls() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"format":"uri-template"}
            """,
            true,
            """uri-template format -> all string formats ignore nulls""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore if without then or else -> valid when valid against lone if"
     */
    @Test
    fun if_then_else_ignoreIfWithoutThenOrElse_validWhenValidAgainstLoneIf() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"if":{"const":0}}
            """,
            true,
            """ignore if without then or else -> valid when valid against lone if""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore if without then or else -> valid when invalid against lone if"
     */
    @Test
    fun if_then_else_ignoreIfWithoutThenOrElse_validWhenInvalidAgainstLoneIf() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {"if":{"const":0}}
            """,
            true,
            """ignore if without then or else -> valid when invalid against lone if""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore then without if -> valid when valid against lone then"
     */
    @Test
    fun if_then_else_ignoreThenWithoutIf_validWhenValidAgainstLoneThen() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"then":{"const":0}}
            """,
            true,
            """ignore then without if -> valid when valid against lone then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore then without if -> valid when invalid against lone then"
     */
    @Test
    fun if_then_else_ignoreThenWithoutIf_validWhenInvalidAgainstLoneThen() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {"then":{"const":0}}
            """,
            true,
            """ignore then without if -> valid when invalid against lone then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore else without if -> valid when valid against lone else"
     */
    @Test
    fun if_then_else_ignoreElseWithoutIf_validWhenValidAgainstLoneElse() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"else":{"const":0}}
            """,
            true,
            """ignore else without if -> valid when valid against lone else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore else without if -> valid when invalid against lone else"
     */
    @Test
    fun if_then_else_ignoreElseWithoutIf_validWhenInvalidAgainstLoneElse() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {"else":{"const":0}}
            """,
            true,
            """ignore else without if -> valid when invalid against lone else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and then without else -> valid through then"
     */
    @Test
    fun if_then_else_ifAndThenWithoutElse_validThroughThen() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {"if":{"exclusiveMaximum":0},"then":{"minimum":-10}}
            """,
            true,
            """if and then without else -> valid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and then without else -> invalid through then"
     */
    @Test
    fun if_then_else_ifAndThenWithoutElse_invalidThroughThen() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {"if":{"exclusiveMaximum":0},"then":{"minimum":-10}}
            """,
            false,
            """if and then without else -> invalid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and then without else -> valid when if test fails"
     */
    @Test
    fun if_then_else_ifAndThenWithoutElse_validWhenIfTestFails() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"if":{"exclusiveMaximum":0},"then":{"minimum":-10}}
            """,
            true,
            """if and then without else -> valid when if test fails""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and else without then -> valid when if test passes"
     */
    @Test
    fun if_then_else_ifAndElseWithoutThen_validWhenIfTestPasses() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {"if":{"exclusiveMaximum":0},"else":{"multipleOf":2}}
            """,
            true,
            """if and else without then -> valid when if test passes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and else without then -> valid through else"
     */
    @Test
    fun if_then_else_ifAndElseWithoutThen_validThroughElse() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {"if":{"exclusiveMaximum":0},"else":{"multipleOf":2}}
            """,
            true,
            """if and else without then -> valid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and else without then -> invalid through else"
     */
    @Test
    fun if_then_else_ifAndElseWithoutThen_invalidThroughElse() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"if":{"exclusiveMaximum":0},"else":{"multipleOf":2}}
            """,
            false,
            """if and else without then -> invalid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> valid through then"
     */
    @Test
    fun if_then_else_validateAgainstCorrectBranch_ThenVsElse_validThroughThen() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {"if":{"exclusiveMaximum":0},"then":{"minimum":-10},"else":{"multipleOf":2}}
            """,
            true,
            """validate against correct branch, then vs else -> valid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> invalid through then"
     */
    @Test
    fun if_then_else_validateAgainstCorrectBranch_ThenVsElse_invalidThroughThen() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {"if":{"exclusiveMaximum":0},"then":{"minimum":-10},"else":{"multipleOf":2}}
            """,
            false,
            """validate against correct branch, then vs else -> invalid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> valid through else"
     */
    @Test
    fun if_then_else_validateAgainstCorrectBranch_ThenVsElse_validThroughElse() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {"if":{"exclusiveMaximum":0},"then":{"minimum":-10},"else":{"multipleOf":2}}
            """,
            true,
            """validate against correct branch, then vs else -> valid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> invalid through else"
     */
    @Test
    fun if_then_else_validateAgainstCorrectBranch_ThenVsElse_invalidThroughElse() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"if":{"exclusiveMaximum":0},"then":{"minimum":-10},"else":{"multipleOf":2}}
            """,
            false,
            """validate against correct branch, then vs else -> invalid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "non-interference across combined schemas -> valid, but would have been invalid through then"
     */
    @Test
    fun if_then_else_non_interferenceAcrossCombinedSchemas_valid_ButWouldHaveBeenInvalidThroughThen() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {"allOf":[{"if":{"exclusiveMaximum":0}},{"then":{"minimum":-10}},{"else":{"multipleOf":2}}]}
            """,
            true,
            """non-interference across combined schemas -> valid, but would have been invalid through then""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "non-interference across combined schemas -> valid, but would have been invalid through else"
     */
    @Test
    fun if_then_else_non_interferenceAcrossCombinedSchemas_valid_ButWouldHaveBeenInvalidThroughElse() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"allOf":[{"if":{"exclusiveMaximum":0}},{"then":{"minimum":-10}},{"else":{"multipleOf":2}}]}
            """,
            true,
            """non-interference across combined schemas -> valid, but would have been invalid through else""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema true -> boolean schema true in if always chooses the then path (valid)"
     */
    @Test
    fun if_then_else_ifWithBooleanSchemaTrue_booleanSchemaTrueInIfAlwaysChoosesTheThenPath_valid_() {
        
        assertKsonEnforcesSchema(
            """
                "then"
            """,
            """
                {"if":true,"then":{"const":"then"},"else":{"const":"else"}}
            """,
            true,
            """if with boolean schema true -> boolean schema true in if always chooses the then path (valid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema true -> boolean schema true in if always chooses the then path (invalid)"
     */
    @Test
    fun if_then_else_ifWithBooleanSchemaTrue_booleanSchemaTrueInIfAlwaysChoosesTheThenPath_invalid_() {
        
        assertKsonEnforcesSchema(
            """
                "else"
            """,
            """
                {"if":true,"then":{"const":"then"},"else":{"const":"else"}}
            """,
            false,
            """if with boolean schema true -> boolean schema true in if always chooses the then path (invalid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema false -> boolean schema false in if always chooses the else path (invalid)"
     */
    @Test
    fun if_then_else_ifWithBooleanSchemaFalse_booleanSchemaFalseInIfAlwaysChoosesTheElsePath_invalid_() {
        
        assertKsonEnforcesSchema(
            """
                "then"
            """,
            """
                {"if":false,"then":{"const":"then"},"else":{"const":"else"}}
            """,
            false,
            """if with boolean schema false -> boolean schema false in if always chooses the else path (invalid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema false -> boolean schema false in if always chooses the else path (valid)"
     */
    @Test
    fun if_then_else_ifWithBooleanSchemaFalse_booleanSchemaFalseInIfAlwaysChoosesTheElsePath_valid_() {
        
        assertKsonEnforcesSchema(
            """
                "else"
            """,
            """
                {"if":false,"then":{"const":"then"},"else":{"const":"else"}}
            """,
            true,
            """if with boolean schema false -> boolean schema false in if always chooses the else path (valid)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> yes redirects to then and passes"
     */
    @Test
    fun if_then_else_ifAppearsAtTheEndWhenSerialized_keywordProcessingSequence__yesRedirectsToThenAndPasses() {
        
        assertKsonEnforcesSchema(
            """
                "yes"
            """,
            """
                {"then":{"const":"yes"},"else":{"const":"other"},"if":{"maxLength":4}}
            """,
            true,
            """if appears at the end when serialized (keyword processing sequence) -> yes redirects to then and passes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> other redirects to else and passes"
     */
    @Test
    fun if_then_else_ifAppearsAtTheEndWhenSerialized_keywordProcessingSequence__otherRedirectsToElseAndPasses() {
        
        assertKsonEnforcesSchema(
            """
                "other"
            """,
            """
                {"then":{"const":"yes"},"else":{"const":"other"},"if":{"maxLength":4}}
            """,
            true,
            """if appears at the end when serialized (keyword processing sequence) -> other redirects to else and passes""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> no redirects to then and fails"
     */
    @Test
    fun if_then_else_ifAppearsAtTheEndWhenSerialized_keywordProcessingSequence__noRedirectsToThenAndFails() {
        
        assertKsonEnforcesSchema(
            """
                "no"
            """,
            """
                {"then":{"const":"yes"},"else":{"const":"other"},"if":{"maxLength":4}}
            """,
            false,
            """if appears at the end when serialized (keyword processing sequence) -> no redirects to then and fails""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> invalid redirects to else and fails"
     */
    @Test
    fun if_then_else_ifAppearsAtTheEndWhenSerialized_keywordProcessingSequence__invalidRedirectsToElseAndFails() {
        
        assertKsonEnforcesSchema(
            """
                "invalid"
            """,
            """
                {"then":{"const":"yes"},"else":{"const":"other"},"if":{"maxLength":4}}
            """,
            false,
            """if appears at the end when serialized (keyword processing sequence) -> invalid redirects to else and fails""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/infinite-loop-detection.json`:
     *     "evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> passing case"
     */
    @Test
    fun infinite_loop_detection_evaluatingTheSameSchemaLocationAgainstTheSameDataLocationTwiceIsNotASignOfAnInfiniteLoop_passingCase() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"definitions":{"int":{"type":"integer"}},"allOf":[{"properties":{"foo":{"${'$'}ref":"#/definitions/int"}}},{"additionalProperties":{"${'$'}ref":"#/definitions/int"}}]}
            """,
            true,
            """evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> passing case""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/infinite-loop-detection.json`:
     *     "evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> failing case"
     */
    @Test
    fun infinite_loop_detection_evaluatingTheSameSchemaLocationAgainstTheSameDataLocationTwiceIsNotASignOfAnInfiniteLoop_failingCase() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"a string"}
            """,
            """
                {"definitions":{"int":{"type":"integer"}},"allOf":[{"properties":{"foo":{"${'$'}ref":"#/definitions/int"}}},{"additionalProperties":{"${'$'}ref":"#/definitions/int"}}]}
            """,
            false,
            """evaluating the same schema location against the same data location twice is not a sign of an infinite loop -> failing case""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> valid items"
     */
    @Test
    fun items_aSchemaGivenForItems_validItems() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"items":{"type":"integer"}}
            """,
            true,
            """a schema given for items -> valid items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> wrong type of items"
     */
    @Test
    fun items_aSchemaGivenForItems_wrongTypeOfItems() {
        
        assertKsonEnforcesSchema(
            """
                [1,"x"]
            """,
            """
                {"items":{"type":"integer"}}
            """,
            false,
            """a schema given for items -> wrong type of items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> ignores non-arrays"
     */
    @Test
    fun items_aSchemaGivenForItems_ignoresNon_arrays() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"items":{"type":"integer"}}
            """,
            true,
            """a schema given for items -> ignores non-arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "a schema given for items -> JavaScript pseudo-array is valid"
     */
    @Test
    fun items_aSchemaGivenForItems_javaScriptPseudo_arrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"0":"invalid","length":1}
            """,
            """
                {"items":{"type":"integer"}}
            """,
            true,
            """a schema given for items -> JavaScript pseudo-array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> correct types"
     */
    @Test
    fun items_anArrayOfSchemasForItems_correctTypes() {
        
        assertKsonEnforcesSchema(
            """
                [1,"foo"]
            """,
            """
                {"items":[{"type":"integer"},{"type":"string"}]}
            """,
            true,
            """an array of schemas for items -> correct types""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> wrong types"
     */
    @Test
    fun items_anArrayOfSchemasForItems_wrongTypes() {
        
        assertKsonEnforcesSchema(
            """
                ["foo",1]
            """,
            """
                {"items":[{"type":"integer"},{"type":"string"}]}
            """,
            false,
            """an array of schemas for items -> wrong types""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> incomplete array of items"
     */
    @Test
    fun items_anArrayOfSchemasForItems_incompleteArrayOfItems() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"items":[{"type":"integer"},{"type":"string"}]}
            """,
            true,
            """an array of schemas for items -> incomplete array of items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> array with additional items"
     */
    @Test
    fun items_anArrayOfSchemasForItems_arrayWithAdditionalItems() {
        
        assertKsonEnforcesSchema(
            """
                [1,"foo",true]
            """,
            """
                {"items":[{"type":"integer"},{"type":"string"}]}
            """,
            true,
            """an array of schemas for items -> array with additional items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> empty array"
     */
    @Test
    fun items_anArrayOfSchemasForItems_emptyArray() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"items":[{"type":"integer"},{"type":"string"}]}
            """,
            true,
            """an array of schemas for items -> empty array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "an array of schemas for items -> JavaScript pseudo-array is valid"
     */
    @Test
    fun items_anArrayOfSchemasForItems_javaScriptPseudo_arrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"0":"invalid","1":"valid","length":2}
            """,
            """
                {"items":[{"type":"integer"},{"type":"string"}]}
            """,
            true,
            """an array of schemas for items -> JavaScript pseudo-array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (true) -> any array is valid"
     */
    @Test
    fun items_itemsWithBooleanSchema_true__anyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,"foo",true]
            """,
            """
                {"items":true}
            """,
            true,
            """items with boolean schema (true) -> any array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (true) -> empty array is valid"
     */
    @Test
    fun items_itemsWithBooleanSchema_true__emptyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"items":true}
            """,
            true,
            """items with boolean schema (true) -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (false) -> any non-empty array is invalid"
     */
    @Test
    fun items_itemsWithBooleanSchema_false__anyNon_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,"foo",true]
            """,
            """
                {"items":false}
            """,
            false,
            """items with boolean schema (false) -> any non-empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schema (false) -> empty array is valid"
     */
    @Test
    fun items_itemsWithBooleanSchema_false__emptyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"items":false}
            """,
            true,
            """items with boolean schema (false) -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schemas -> array with one item is valid"
     */
    @Test
    fun items_itemsWithBooleanSchemas_arrayWithOneItemIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"items":[true,false]}
            """,
            true,
            """items with boolean schemas -> array with one item is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schemas -> array with two items is invalid"
     */
    @Test
    fun items_itemsWithBooleanSchemas_arrayWithTwoItemsIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,"foo"]
            """,
            """
                {"items":[true,false]}
            """,
            false,
            """items with boolean schemas -> array with two items is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items with boolean schemas -> empty array is valid"
     */
    @Test
    fun items_itemsWithBooleanSchemas_emptyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"items":[true,false]}
            """,
            true,
            """items with boolean schemas -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> valid items"
     */
    @Test
    fun items_itemsAndSubitems_validItems() {
        
        assertKsonEnforcesSchema(
            """
                [[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}]]
            """,
            """
                {"definitions":{"item":{"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/sub-item"},{"${'$'}ref":"#/definitions/sub-item"}]},"sub-item":{"type":"object","required":["foo"]}},"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"}]}
            """,
            true,
            """items and subitems -> valid items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> too many items"
     */
    @Test
    fun items_itemsAndSubitems_tooManyItems() {
        
        assertKsonEnforcesSchema(
            """
                [[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}]]
            """,
            """
                {"definitions":{"item":{"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/sub-item"},{"${'$'}ref":"#/definitions/sub-item"}]},"sub-item":{"type":"object","required":["foo"]}},"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"}]}
            """,
            false,
            """items and subitems -> too many items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> too many sub-items"
     */
    @Test
    fun items_itemsAndSubitems_tooManySub_items() {
        
        assertKsonEnforcesSchema(
            """
                [[{"foo":null},{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}]]
            """,
            """
                {"definitions":{"item":{"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/sub-item"},{"${'$'}ref":"#/definitions/sub-item"}]},"sub-item":{"type":"object","required":["foo"]}},"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"}]}
            """,
            false,
            """items and subitems -> too many sub-items""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> wrong item"
     */
    @Test
    fun items_itemsAndSubitems_wrongItem() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":null},[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}]]
            """,
            """
                {"definitions":{"item":{"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/sub-item"},{"${'$'}ref":"#/definitions/sub-item"}]},"sub-item":{"type":"object","required":["foo"]}},"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"}]}
            """,
            false,
            """items and subitems -> wrong item""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> wrong sub-item"
     */
    @Test
    fun items_itemsAndSubitems_wrongSub_item() {
        
        assertKsonEnforcesSchema(
            """
                [[{},{"foo":null}],[{"foo":null},{"foo":null}],[{"foo":null},{"foo":null}]]
            """,
            """
                {"definitions":{"item":{"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/sub-item"},{"${'$'}ref":"#/definitions/sub-item"}]},"sub-item":{"type":"object","required":["foo"]}},"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"}]}
            """,
            false,
            """items and subitems -> wrong sub-item""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "items and subitems -> fewer items is valid"
     */
    @Test
    fun items_itemsAndSubitems_fewerItemsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [[{"foo":null}],[{"foo":null}]]
            """,
            """
                {"definitions":{"item":{"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/sub-item"},{"${'$'}ref":"#/definitions/sub-item"}]},"sub-item":{"type":"object","required":["foo"]}},"type":"array","additionalItems":false,"items":[{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"},{"${'$'}ref":"#/definitions/item"}]}
            """,
            true,
            """items and subitems -> fewer items is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "nested items -> valid nested array"
     */
    @Test
    fun items_nestedItems_validNestedArray() {
        
        assertKsonEnforcesSchema(
            """
                [[[[1]],[[2],[3]]],[[[4],[5],[6]]]]
            """,
            """
                {"type":"array","items":{"type":"array","items":{"type":"array","items":{"type":"array","items":{"type":"number"}}}}}
            """,
            true,
            """nested items -> valid nested array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "nested items -> nested array with invalid type"
     */
    @Test
    fun items_nestedItems_nestedArrayWithInvalidType() {
        
        assertKsonEnforcesSchema(
            """
                [[[["1"]],[[2],[3]]],[[[4],[5],[6]]]]
            """,
            """
                {"type":"array","items":{"type":"array","items":{"type":"array","items":{"type":"array","items":{"type":"number"}}}}}
            """,
            false,
            """nested items -> nested array with invalid type""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "nested items -> not deep enough"
     */
    @Test
    fun items_nestedItems_notDeepEnough() {
        
        assertKsonEnforcesSchema(
            """
                [[[1],[2],[3]],[[4],[5],[6]]]
            """,
            """
                {"type":"array","items":{"type":"array","items":{"type":"array","items":{"type":"array","items":{"type":"number"}}}}}
            """,
            false,
            """nested items -> not deep enough""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "single-form items with null instance elements -> allows null elements"
     */
    @Test
    fun items_single_formItemsWithNullInstanceElements_allowsNullElements() {
        
        assertKsonEnforcesSchema(
            """
                [null]
            """,
            """
                {"items":{"type":"null"}}
            """,
            true,
            """single-form items with null instance elements -> allows null elements""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/items.json`:
     *     "array-form items with null instance elements -> allows null elements"
     */
    @Test
    fun items_array_formItemsWithNullInstanceElements_allowsNullElements() {
        
        assertKsonEnforcesSchema(
            """
                [null]
            """,
            """
                {"items":[{"type":"null"}]}
            """,
            true,
            """array-form items with null instance elements -> allows null elements""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxItems.json`:
     *     "maxItems validation -> shorter is valid"
     */
    @Test
    fun maxItems_maxItemsValidation_shorterIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"maxItems":2}
            """,
            true,
            """maxItems validation -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxItems.json`:
     *     "maxItems validation -> exact length is valid"
     */
    @Test
    fun maxItems_maxItemsValidation_exactLengthIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"maxItems":2}
            """,
            true,
            """maxItems validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxItems.json`:
     *     "maxItems validation -> too long is invalid"
     */
    @Test
    fun maxItems_maxItemsValidation_tooLongIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"maxItems":2}
            """,
            false,
            """maxItems validation -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxItems.json`:
     *     "maxItems validation -> ignores non-arrays"
     */
    @Test
    fun maxItems_maxItemsValidation_ignoresNon_arrays() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {"maxItems":2}
            """,
            true,
            """maxItems validation -> ignores non-arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxItems.json`:
     *     "maxItems validation with a decimal -> shorter is valid"
     */
    @Test
    fun maxItems_maxItemsValidationWithADecimal_shorterIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"maxItems":2.0}
            """,
            true,
            """maxItems validation with a decimal -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxItems.json`:
     *     "maxItems validation with a decimal -> too long is invalid"
     */
    @Test
    fun maxItems_maxItemsValidationWithADecimal_tooLongIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"maxItems":2.0}
            """,
            false,
            """maxItems validation with a decimal -> too long is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxLength.json`:
     *     "maxLength validation -> shorter is valid"
     */
    @Test
    fun maxLength_maxLengthValidation_shorterIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {"maxLength":2}
            """,
            true,
            """maxLength validation -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxLength.json`:
     *     "maxLength validation -> exact length is valid"
     */
    @Test
    fun maxLength_maxLengthValidation_exactLengthIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "fo"
            """,
            """
                {"maxLength":2}
            """,
            true,
            """maxLength validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxLength.json`:
     *     "maxLength validation -> too long is invalid"
     */
    @Test
    fun maxLength_maxLengthValidation_tooLongIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"maxLength":2}
            """,
            false,
            """maxLength validation -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxLength.json`:
     *     "maxLength validation -> ignores non-strings"
     */
    @Test
    fun maxLength_maxLengthValidation_ignoresNon_strings() {
        
        assertKsonEnforcesSchema(
            """
                100
            """,
            """
                {"maxLength":2}
            """,
            true,
            """maxLength validation -> ignores non-strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxLength.json`:
     *     "maxLength validation -> two graphemes is long enough"
     */
    @Test
    fun maxLength_maxLengthValidation_twoGraphemesIsLongEnough() {
        
        assertKsonEnforcesSchema(
            """
                "💩💩"
            """,
            """
                {"maxLength":2}
            """,
            true,
            """maxLength validation -> two graphemes is long enough""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxLength.json`:
     *     "maxLength validation with a decimal -> shorter is valid"
     */
    @Test
    fun maxLength_maxLengthValidationWithADecimal_shorterIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {"maxLength":2.0}
            """,
            true,
            """maxLength validation with a decimal -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxLength.json`:
     *     "maxLength validation with a decimal -> too long is invalid"
     */
    @Test
    fun maxLength_maxLengthValidationWithADecimal_tooLongIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"maxLength":2.0}
            """,
            false,
            """maxLength validation with a decimal -> too long is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> shorter is valid"
     */
    @Test
    fun maxProperties_maxPropertiesValidation_shorterIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"maxProperties":2}
            """,
            true,
            """maxProperties validation -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> exact length is valid"
     */
    @Test
    fun maxProperties_maxPropertiesValidation_exactLengthIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"maxProperties":2}
            """,
            true,
            """maxProperties validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> too long is invalid"
     */
    @Test
    fun maxProperties_maxPropertiesValidation_tooLongIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"baz":3}
            """,
            """
                {"maxProperties":2}
            """,
            false,
            """maxProperties validation -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> ignores arrays"
     */
    @Test
    fun maxProperties_maxPropertiesValidation_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"maxProperties":2}
            """,
            true,
            """maxProperties validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> ignores strings"
     */
    @Test
    fun maxProperties_maxPropertiesValidation_ignoresStrings() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {"maxProperties":2}
            """,
            true,
            """maxProperties validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation -> ignores other non-objects"
     */
    @Test
    fun maxProperties_maxPropertiesValidation_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"maxProperties":2}
            """,
            true,
            """maxProperties validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation with a decimal -> shorter is valid"
     */
    @Test
    fun maxProperties_maxPropertiesValidationWithADecimal_shorterIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"maxProperties":2.0}
            """,
            true,
            """maxProperties validation with a decimal -> shorter is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties validation with a decimal -> too long is invalid"
     */
    @Test
    fun maxProperties_maxPropertiesValidationWithADecimal_tooLongIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"baz":3}
            """,
            """
                {"maxProperties":2.0}
            """,
            false,
            """maxProperties validation with a decimal -> too long is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties = 0 means the object is empty -> no properties is valid"
     */
    @Test
    fun maxProperties_maxProperties_0MeansTheObjectIsEmpty_noPropertiesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"maxProperties":0}
            """,
            true,
            """maxProperties = 0 means the object is empty -> no properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maxProperties.json`:
     *     "maxProperties = 0 means the object is empty -> one property is invalid"
     */
    @Test
    fun maxProperties_maxProperties_0MeansTheObjectIsEmpty_onePropertyIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"maxProperties":0}
            """,
            false,
            """maxProperties = 0 means the object is empty -> one property is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation -> below the maximum is valid"
     */
    @Test
    fun maximum_maximumValidation_belowTheMaximumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                2.6
            """,
            """
                {"maximum":3.0}
            """,
            true,
            """maximum validation -> below the maximum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation -> boundary point is valid"
     */
    @Test
    fun maximum_maximumValidation_boundaryPointIsValid() {
        
        assertKsonEnforcesSchema(
            """
                3.0
            """,
            """
                {"maximum":3.0}
            """,
            true,
            """maximum validation -> boundary point is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation -> above the maximum is invalid"
     */
    @Test
    fun maximum_maximumValidation_aboveTheMaximumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                3.5
            """,
            """
                {"maximum":3.0}
            """,
            false,
            """maximum validation -> above the maximum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation -> ignores non-numbers"
     */
    @Test
    fun maximum_maximumValidation_ignoresNon_numbers() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {"maximum":3.0}
            """,
            true,
            """maximum validation -> ignores non-numbers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation with unsigned integer -> below the maximum is invalid"
     */
    @Test
    fun maximum_maximumValidationWithUnsignedInteger_belowTheMaximumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                299.97
            """,
            """
                {"maximum":300}
            """,
            true,
            """maximum validation with unsigned integer -> below the maximum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation with unsigned integer -> boundary point integer is valid"
     */
    @Test
    fun maximum_maximumValidationWithUnsignedInteger_boundaryPointIntegerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                300
            """,
            """
                {"maximum":300}
            """,
            true,
            """maximum validation with unsigned integer -> boundary point integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation with unsigned integer -> boundary point float is valid"
     */
    @Test
    fun maximum_maximumValidationWithUnsignedInteger_boundaryPointFloatIsValid() {
        
        assertKsonEnforcesSchema(
            """
                300.00
            """,
            """
                {"maximum":300}
            """,
            true,
            """maximum validation with unsigned integer -> boundary point float is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/maximum.json`:
     *     "maximum validation with unsigned integer -> above the maximum is invalid"
     */
    @Test
    fun maximum_maximumValidationWithUnsignedInteger_aboveTheMaximumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                300.5
            """,
            """
                {"maximum":300}
            """,
            false,
            """maximum validation with unsigned integer -> above the maximum is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minItems.json`:
     *     "minItems validation -> longer is valid"
     */
    @Test
    fun minItems_minItemsValidation_longerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"minItems":1}
            """,
            true,
            """minItems validation -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minItems.json`:
     *     "minItems validation -> exact length is valid"
     */
    @Test
    fun minItems_minItemsValidation_exactLengthIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1]
            """,
            """
                {"minItems":1}
            """,
            true,
            """minItems validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minItems.json`:
     *     "minItems validation -> too short is invalid"
     */
    @Test
    fun minItems_minItemsValidation_tooShortIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"minItems":1}
            """,
            false,
            """minItems validation -> too short is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minItems.json`:
     *     "minItems validation -> ignores non-arrays"
     */
    @Test
    fun minItems_minItemsValidation_ignoresNon_arrays() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {"minItems":1}
            """,
            true,
            """minItems validation -> ignores non-arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minItems.json`:
     *     "minItems validation with a decimal -> longer is valid"
     */
    @Test
    fun minItems_minItemsValidationWithADecimal_longerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"minItems":1.0}
            """,
            true,
            """minItems validation with a decimal -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minItems.json`:
     *     "minItems validation with a decimal -> too short is invalid"
     */
    @Test
    fun minItems_minItemsValidationWithADecimal_tooShortIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"minItems":1.0}
            """,
            false,
            """minItems validation with a decimal -> too short is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minLength.json`:
     *     "minLength validation -> longer is valid"
     */
    @Test
    fun minLength_minLengthValidation_longerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"minLength":2}
            """,
            true,
            """minLength validation -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minLength.json`:
     *     "minLength validation -> exact length is valid"
     */
    @Test
    fun minLength_minLengthValidation_exactLengthIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "fo"
            """,
            """
                {"minLength":2}
            """,
            true,
            """minLength validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minLength.json`:
     *     "minLength validation -> too short is invalid"
     */
    @Test
    fun minLength_minLengthValidation_tooShortIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {"minLength":2}
            """,
            false,
            """minLength validation -> too short is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minLength.json`:
     *     "minLength validation -> ignores non-strings"
     */
    @Test
    fun minLength_minLengthValidation_ignoresNon_strings() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"minLength":2}
            """,
            true,
            """minLength validation -> ignores non-strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minLength.json`:
     *     "minLength validation -> one grapheme is not long enough"
     */
    @Test
    fun minLength_minLengthValidation_oneGraphemeIsNotLongEnough() {
        
        assertKsonEnforcesSchema(
            """
                "💩"
            """,
            """
                {"minLength":2}
            """,
            false,
            """minLength validation -> one grapheme is not long enough""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minLength.json`:
     *     "minLength validation with a decimal -> longer is valid"
     */
    @Test
    fun minLength_minLengthValidationWithADecimal_longerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"minLength":2.0}
            """,
            true,
            """minLength validation with a decimal -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minLength.json`:
     *     "minLength validation with a decimal -> too short is invalid"
     */
    @Test
    fun minLength_minLengthValidationWithADecimal_tooShortIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "f"
            """,
            """
                {"minLength":2.0}
            """,
            false,
            """minLength validation with a decimal -> too short is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation -> longer is valid"
     */
    @Test
    fun minProperties_minPropertiesValidation_longerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"minProperties":1}
            """,
            true,
            """minProperties validation -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation -> exact length is valid"
     */
    @Test
    fun minProperties_minPropertiesValidation_exactLengthIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"minProperties":1}
            """,
            true,
            """minProperties validation -> exact length is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation -> too short is invalid"
     */
    @Test
    fun minProperties_minPropertiesValidation_tooShortIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"minProperties":1}
            """,
            false,
            """minProperties validation -> too short is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation -> ignores arrays"
     */
    @Test
    fun minProperties_minPropertiesValidation_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"minProperties":1}
            """,
            true,
            """minProperties validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation -> ignores strings"
     */
    @Test
    fun minProperties_minPropertiesValidation_ignoresStrings() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {"minProperties":1}
            """,
            true,
            """minProperties validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation -> ignores other non-objects"
     */
    @Test
    fun minProperties_minPropertiesValidation_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"minProperties":1}
            """,
            true,
            """minProperties validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation with a decimal -> longer is valid"
     */
    @Test
    fun minProperties_minPropertiesValidationWithADecimal_longerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"minProperties":1.0}
            """,
            true,
            """minProperties validation with a decimal -> longer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minProperties.json`:
     *     "minProperties validation with a decimal -> too short is invalid"
     */
    @Test
    fun minProperties_minPropertiesValidationWithADecimal_tooShortIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"minProperties":1.0}
            """,
            false,
            """minProperties validation with a decimal -> too short is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> above the minimum is valid"
     */
    @Test
    fun minimum_minimumValidation_aboveTheMinimumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                2.6
            """,
            """
                {"minimum":1.1}
            """,
            true,
            """minimum validation -> above the minimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> boundary point is valid"
     */
    @Test
    fun minimum_minimumValidation_boundaryPointIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"minimum":1.1}
            """,
            true,
            """minimum validation -> boundary point is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> below the minimum is invalid"
     */
    @Test
    fun minimum_minimumValidation_belowTheMinimumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                0.6
            """,
            """
                {"minimum":1.1}
            """,
            false,
            """minimum validation -> below the minimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation -> ignores non-numbers"
     */
    @Test
    fun minimum_minimumValidation_ignoresNon_numbers() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {"minimum":1.1}
            """,
            true,
            """minimum validation -> ignores non-numbers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> negative above the minimum is valid"
     */
    @Test
    fun minimum_minimumValidationWithSignedInteger_negativeAboveTheMinimumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {"minimum":-2}
            """,
            true,
            """minimum validation with signed integer -> negative above the minimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> positive above the minimum is valid"
     */
    @Test
    fun minimum_minimumValidationWithSignedInteger_positiveAboveTheMinimumIsValid() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"minimum":-2}
            """,
            true,
            """minimum validation with signed integer -> positive above the minimum is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> boundary point is valid"
     */
    @Test
    fun minimum_minimumValidationWithSignedInteger_boundaryPointIsValid() {
        
        assertKsonEnforcesSchema(
            """
                -2
            """,
            """
                {"minimum":-2}
            """,
            true,
            """minimum validation with signed integer -> boundary point is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> boundary point with float is valid"
     */
    @Test
    fun minimum_minimumValidationWithSignedInteger_boundaryPointWithFloatIsValid() {
        
        assertKsonEnforcesSchema(
            """
                -2.0
            """,
            """
                {"minimum":-2}
            """,
            true,
            """minimum validation with signed integer -> boundary point with float is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> float below the minimum is invalid"
     */
    @Test
    fun minimum_minimumValidationWithSignedInteger_floatBelowTheMinimumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                -2.0001
            """,
            """
                {"minimum":-2}
            """,
            false,
            """minimum validation with signed integer -> float below the minimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> int below the minimum is invalid"
     */
    @Test
    fun minimum_minimumValidationWithSignedInteger_intBelowTheMinimumIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                -3
            """,
            """
                {"minimum":-2}
            """,
            false,
            """minimum validation with signed integer -> int below the minimum is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/minimum.json`:
     *     "minimum validation with signed integer -> ignores non-numbers"
     */
    @Test
    fun minimum_minimumValidationWithSignedInteger_ignoresNon_numbers() {
        
        assertKsonEnforcesSchema(
            """
                "x"
            """,
            """
                {"minimum":-2}
            """,
            true,
            """minimum validation with signed integer -> ignores non-numbers""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by int -> int by int"
     */
    @Test
    fun multipleOf_byInt_intByInt() {
        
        assertKsonEnforcesSchema(
            """
                10
            """,
            """
                {"multipleOf":2}
            """,
            true,
            """by int -> int by int""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by int -> int by int fail"
     */
    @Test
    fun multipleOf_byInt_intByIntFail() {
        
        assertKsonEnforcesSchema(
            """
                7
            """,
            """
                {"multipleOf":2}
            """,
            false,
            """by int -> int by int fail""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by int -> ignores non-numbers"
     */
    @Test
    fun multipleOf_byInt_ignoresNon_numbers() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"multipleOf":2}
            """,
            true,
            """by int -> ignores non-numbers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by number -> zero is multiple of anything"
     */
    @Test
    fun multipleOf_byNumber_zeroIsMultipleOfAnything() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"multipleOf":1.5}
            """,
            true,
            """by number -> zero is multiple of anything""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by number -> 4.5 is multiple of 1.5"
     */
    @Test
    fun multipleOf_byNumber_4_5IsMultipleOf1_5() {
        
        assertKsonEnforcesSchema(
            """
                4.5
            """,
            """
                {"multipleOf":1.5}
            """,
            true,
            """by number -> 4.5 is multiple of 1.5""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by number -> 35 is not multiple of 1.5"
     */
    @Test
    fun multipleOf_byNumber_35IsNotMultipleOf1_5() {
        
        assertKsonEnforcesSchema(
            """
                35
            """,
            """
                {"multipleOf":1.5}
            """,
            false,
            """by number -> 35 is not multiple of 1.5""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by small number -> 0.0075 is multiple of 0.0001"
     */
    @Test
    fun multipleOf_bySmallNumber_0_0075IsMultipleOf0_0001() {
        
        assertKsonEnforcesSchema(
            """
                0.0075
            """,
            """
                {"multipleOf":0.0001}
            """,
            true,
            """by small number -> 0.0075 is multiple of 0.0001""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "by small number -> 0.00751 is not multiple of 0.0001"
     */
    @Test
    fun multipleOf_bySmallNumber_0_00751IsNotMultipleOf0_0001() {
        
        assertKsonEnforcesSchema(
            """
                0.00751
            """,
            """
                {"multipleOf":0.0001}
            """,
            false,
            """by small number -> 0.00751 is not multiple of 0.0001""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "float division = inf -> always invalid, but naive implementations may raise an overflow error"
     */
    @Test
    fun multipleOf_floatDivision_Inf_alwaysInvalid_ButNaiveImplementationsMayRaiseAnOverflowError() {
        
        assertKsonEnforcesSchema(
            """
                1e308
            """,
            """
                {"type":"integer","multipleOf":0.123456789}
            """,
            false,
            """float division = inf -> always invalid, but naive implementations may raise an overflow error""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/multipleOf.json`:
     *     "small multiple of large integer -> any integer is a multiple of 1e-8"
     */
    @Test
    fun multipleOf_smallMultipleOfLargeInteger_anyIntegerIsAMultipleOf1e_8() {
        
        assertKsonEnforcesSchema(
            """
                12391239123
            """,
            """
                {"type":"integer","multipleOf":1e-8}
            """,
            true,
            """small multiple of large integer -> any integer is a multiple of 1e-8""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not -> allowed"
     */
    @Test
    fun not_not_allowed() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"not":{"type":"integer"}}
            """,
            true,
            """not -> allowed""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not -> disallowed"
     */
    @Test
    fun not_not_disallowed() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"not":{"type":"integer"}}
            """,
            false,
            """not -> disallowed""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not multiple types -> valid"
     */
    @Test
    fun not_notMultipleTypes_valid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"not":{"type":["integer","boolean"]}}
            """,
            true,
            """not multiple types -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not multiple types -> mismatch"
     */
    @Test
    fun not_notMultipleTypes_mismatch() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"not":{"type":["integer","boolean"]}}
            """,
            false,
            """not multiple types -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not multiple types -> other mismatch"
     */
    @Test
    fun not_notMultipleTypes_otherMismatch() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"not":{"type":["integer","boolean"]}}
            """,
            false,
            """not multiple types -> other mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not more complex schema -> match"
     */
    @Test
    fun not_notMoreComplexSchema_match() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"not":{"type":"object","properties":{"foo":{"type":"string"}}}}
            """,
            true,
            """not more complex schema -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not more complex schema -> other match"
     */
    @Test
    fun not_notMoreComplexSchema_otherMatch() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"not":{"type":"object","properties":{"foo":{"type":"string"}}}}
            """,
            true,
            """not more complex schema -> other match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "not more complex schema -> mismatch"
     */
    @Test
    fun not_notMoreComplexSchema_mismatch() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"not":{"type":"object","properties":{"foo":{"type":"string"}}}}
            """,
            false,
            """not more complex schema -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbidden property -> property present"
     */
    @Test
    fun not_forbiddenProperty_propertyPresent() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"properties":{"foo":{"not":{}}}}
            """,
            false,
            """forbidden property -> property present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbidden property -> property absent"
     */
    @Test
    fun not_forbiddenProperty_propertyAbsent() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":1,"baz":2}
            """,
            """
                {"properties":{"foo":{"not":{}}}}
            """,
            true,
            """forbidden property -> property absent""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> number is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> string is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> boolean true is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_booleanTrueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> boolean true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> boolean false is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_booleanFalseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> boolean false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> null is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> object is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_objectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> empty object is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_emptyObjectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> array is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_arrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with empty schema -> empty array is invalid"
     */
    @Test
    fun not_forbidEverythingWithEmptySchema_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"not":{}}
            """,
            false,
            """forbid everything with empty schema -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> number is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> string is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> boolean true is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_booleanTrueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> boolean true is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> boolean false is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_booleanFalseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> boolean false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> null is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> object is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_objectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> empty object is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_emptyObjectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> empty object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> array is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_arrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "forbid everything with boolean schema true -> empty array is invalid"
     */
    @Test
    fun not_forbidEverythingWithBooleanSchemaTrue_emptyArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"not":true}
            """,
            false,
            """forbid everything with boolean schema true -> empty array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> number is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> string is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_stringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> boolean true is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_booleanTrueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> boolean true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> boolean false is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_booleanFalseIsValid() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> boolean false is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> null is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> object is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_objectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> empty object is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_emptyObjectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> array is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_arrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "allow everything with boolean schema false -> empty array is valid"
     */
    @Test
    fun not_allowEverythingWithBooleanSchemaFalse_emptyArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"not":false}
            """,
            true,
            """allow everything with boolean schema false -> empty array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/not.json`:
     *     "double negation -> any value is valid"
     */
    @Test
    fun not_doubleNegation_anyValueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"not":{"not":{}}}
            """,
            true,
            """double negation -> any value is valid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf -> first oneOf valid"
     */
    @Test
    fun oneOf_oneOf_firstOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"oneOf":[{"type":"integer"},{"minimum":2}]}
            """,
            true,
            """oneOf -> first oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf -> second oneOf valid"
     */
    @Test
    fun oneOf_oneOf_secondOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                2.5
            """,
            """
                {"oneOf":[{"type":"integer"},{"minimum":2}]}
            """,
            true,
            """oneOf -> second oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf -> both oneOf valid"
     */
    @Test
    fun oneOf_oneOf_bothOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"oneOf":[{"type":"integer"},{"minimum":2}]}
            """,
            false,
            """oneOf -> both oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf -> neither oneOf valid"
     */
    @Test
    fun oneOf_oneOf_neitherOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                1.5
            """,
            """
                {"oneOf":[{"type":"integer"},{"minimum":2}]}
            """,
            false,
            """oneOf -> neither oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with base schema -> mismatch base schema"
     */
    @Test
    fun oneOf_oneOfWithBaseSchema_mismatchBaseSchema() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {"type":"string","oneOf":[{"minLength":2},{"maxLength":4}]}
            """,
            false,
            """oneOf with base schema -> mismatch base schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with base schema -> one oneOf valid"
     */
    @Test
    fun oneOf_oneOfWithBaseSchema_oneOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {"type":"string","oneOf":[{"minLength":2},{"maxLength":4}]}
            """,
            true,
            """oneOf with base schema -> one oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with base schema -> both oneOf valid"
     */
    @Test
    fun oneOf_oneOfWithBaseSchema_bothOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"string","oneOf":[{"minLength":2},{"maxLength":4}]}
            """,
            false,
            """oneOf with base schema -> both oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with boolean schemas, all true -> any value is invalid"
     */
    @Test
    fun oneOf_oneOfWithBooleanSchemas_AllTrue_anyValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"oneOf":[true,true,true]}
            """,
            false,
            """oneOf with boolean schemas, all true -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with boolean schemas, one true -> any value is valid"
     */
    @Test
    fun oneOf_oneOfWithBooleanSchemas_OneTrue_anyValueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"oneOf":[true,false,false]}
            """,
            true,
            """oneOf with boolean schemas, one true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with boolean schemas, more than one true -> any value is invalid"
     */
    @Test
    fun oneOf_oneOfWithBooleanSchemas_MoreThanOneTrue_anyValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"oneOf":[true,true,false]}
            """,
            false,
            """oneOf with boolean schemas, more than one true -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with boolean schemas, all false -> any value is invalid"
     */
    @Test
    fun oneOf_oneOfWithBooleanSchemas_AllFalse_anyValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"oneOf":[false,false,false]}
            """,
            false,
            """oneOf with boolean schemas, all false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf complex types -> first oneOf valid (complex)"
     */
    @Test
    fun oneOf_oneOfComplexTypes_firstOneOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"oneOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            true,
            """oneOf complex types -> first oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf complex types -> second oneOf valid (complex)"
     */
    @Test
    fun oneOf_oneOfComplexTypes_secondOneOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"baz"}
            """,
            """
                {"oneOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            true,
            """oneOf complex types -> second oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf complex types -> both oneOf valid (complex)"
     */
    @Test
    fun oneOf_oneOfComplexTypes_bothOneOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"baz","bar":2}
            """,
            """
                {"oneOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            false,
            """oneOf complex types -> both oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf complex types -> neither oneOf valid (complex)"
     */
    @Test
    fun oneOf_oneOfComplexTypes_neitherOneOfValid_complex_() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":2,"bar":"quux"}
            """,
            """
                {"oneOf":[{"properties":{"bar":{"type":"integer"}},"required":["bar"]},{"properties":{"foo":{"type":"string"}},"required":["foo"]}]}
            """,
            false,
            """oneOf complex types -> neither oneOf valid (complex)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with empty schema -> one valid - valid"
     */
    @Test
    fun oneOf_oneOfWithEmptySchema_oneValid_Valid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"oneOf":[{"type":"number"},{}]}
            """,
            true,
            """oneOf with empty schema -> one valid - valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with empty schema -> both valid - invalid"
     */
    @Test
    fun oneOf_oneOfWithEmptySchema_bothValid_Invalid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"oneOf":[{"type":"number"},{}]}
            """,
            false,
            """oneOf with empty schema -> both valid - invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with required -> both invalid - invalid"
     */
    @Test
    fun oneOf_oneOfWithRequired_bothInvalid_Invalid() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"type":"object","oneOf":[{"required":["foo","bar"]},{"required":["foo","baz"]}]}
            """,
            false,
            """oneOf with required -> both invalid - invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with required -> first valid - valid"
     */
    @Test
    fun oneOf_oneOfWithRequired_firstValid_Valid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"type":"object","oneOf":[{"required":["foo","bar"]},{"required":["foo","baz"]}]}
            """,
            true,
            """oneOf with required -> first valid - valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with required -> second valid - valid"
     */
    @Test
    fun oneOf_oneOfWithRequired_secondValid_Valid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"baz":3}
            """,
            """
                {"type":"object","oneOf":[{"required":["foo","bar"]},{"required":["foo","baz"]}]}
            """,
            true,
            """oneOf with required -> second valid - valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with required -> both valid - invalid"
     */
    @Test
    fun oneOf_oneOfWithRequired_bothValid_Invalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2,"baz":3}
            """,
            """
                {"type":"object","oneOf":[{"required":["foo","bar"]},{"required":["foo","baz"]}]}
            """,
            false,
            """oneOf with required -> both valid - invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with missing optional property -> first oneOf valid"
     */
    @Test
    fun oneOf_oneOfWithMissingOptionalProperty_firstOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":8}
            """,
            """
                {"oneOf":[{"properties":{"bar":true,"baz":true},"required":["bar"]},{"properties":{"foo":true},"required":["foo"]}]}
            """,
            true,
            """oneOf with missing optional property -> first oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with missing optional property -> second oneOf valid"
     */
    @Test
    fun oneOf_oneOfWithMissingOptionalProperty_secondOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"foo"}
            """,
            """
                {"oneOf":[{"properties":{"bar":true,"baz":true},"required":["bar"]},{"properties":{"foo":true},"required":["foo"]}]}
            """,
            true,
            """oneOf with missing optional property -> second oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with missing optional property -> both oneOf valid"
     */
    @Test
    fun oneOf_oneOfWithMissingOptionalProperty_bothOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"foo","bar":8}
            """,
            """
                {"oneOf":[{"properties":{"bar":true,"baz":true},"required":["bar"]},{"properties":{"foo":true},"required":["foo"]}]}
            """,
            false,
            """oneOf with missing optional property -> both oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "oneOf with missing optional property -> neither oneOf valid"
     */
    @Test
    fun oneOf_oneOfWithMissingOptionalProperty_neitherOneOfValid() {
        
        assertKsonEnforcesSchema(
            """
                {"baz":"quux"}
            """,
            """
                {"oneOf":[{"properties":{"bar":true,"baz":true},"required":["bar"]},{"properties":{"foo":true},"required":["foo"]}]}
            """,
            false,
            """oneOf with missing optional property -> neither oneOf valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "nested oneOf, to check validation semantics -> null is valid"
     */
    @Test
    fun oneOf_nestedOneOf_ToCheckValidationSemantics_nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"oneOf":[{"oneOf":[{"type":"null"}]}]}
            """,
            true,
            """nested oneOf, to check validation semantics -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/oneOf.json`:
     *     "nested oneOf, to check validation semantics -> anything non-null is invalid"
     */
    @Test
    fun oneOf_nestedOneOf_ToCheckValidationSemantics_anythingNon_nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"oneOf":[{"oneOf":[{"type":"null"}]}]}
            """,
            false,
            """nested oneOf, to check validation semantics -> anything non-null is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> a matching pattern is valid"
     */
    @Test
    fun pattern_patternValidation_aMatchingPatternIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "aaa"
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            true,
            """pattern validation -> a matching pattern is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> a non-matching pattern is invalid"
     */
    @Test
    fun pattern_patternValidation_aNon_matchingPatternIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "abc"
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            false,
            """pattern validation -> a non-matching pattern is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores booleans"
     */
    @Test
    fun pattern_patternValidation_ignoresBooleans() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            true,
            """pattern validation -> ignores booleans""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores integers"
     */
    @Test
    fun pattern_patternValidation_ignoresIntegers() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            true,
            """pattern validation -> ignores integers""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores floats"
     */
    @Test
    fun pattern_patternValidation_ignoresFloats() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            true,
            """pattern validation -> ignores floats""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores objects"
     */
    @Test
    fun pattern_patternValidation_ignoresObjects() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            true,
            """pattern validation -> ignores objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores arrays"
     */
    @Test
    fun pattern_patternValidation_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            true,
            """pattern validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern validation -> ignores null"
     */
    @Test
    fun pattern_patternValidation_ignoresNull() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"pattern":"^a*${'$'}"}
            """,
            true,
            """pattern validation -> ignores null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/pattern.json`:
     *     "pattern is not anchored -> matches a substring"
     */
    @Test
    fun pattern_patternIsNotAnchored_matchesASubstring() {
        
        assertKsonEnforcesSchema(
            """
                "xxaayy"
            """,
            """
                {"pattern":"a+"}
            """,
            true,
            """pattern is not anchored -> matches a substring""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> a single valid match is valid"
     */
    @Test
    fun patternProperties_patternPropertiesValidatesPropertiesMatchingARegex_aSingleValidMatchIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"patternProperties":{"f.*o":{"type":"integer"}}}
            """,
            true,
            """patternProperties validates properties matching a regex -> a single valid match is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> multiple valid matches is valid"
     */
    @Test
    fun patternProperties_patternPropertiesValidatesPropertiesMatchingARegex_multipleValidMatchesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"foooooo":2}
            """,
            """
                {"patternProperties":{"f.*o":{"type":"integer"}}}
            """,
            true,
            """patternProperties validates properties matching a regex -> multiple valid matches is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> a single invalid match is invalid"
     */
    @Test
    fun patternProperties_patternPropertiesValidatesPropertiesMatchingARegex_aSingleInvalidMatchIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar","fooooo":2}
            """,
            """
                {"patternProperties":{"f.*o":{"type":"integer"}}}
            """,
            false,
            """patternProperties validates properties matching a regex -> a single invalid match is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> multiple invalid matches is invalid"
     */
    @Test
    fun patternProperties_patternPropertiesValidatesPropertiesMatchingARegex_multipleInvalidMatchesIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar","foooooo":"baz"}
            """,
            """
                {"patternProperties":{"f.*o":{"type":"integer"}}}
            """,
            false,
            """patternProperties validates properties matching a regex -> multiple invalid matches is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores arrays"
     */
    @Test
    fun patternProperties_patternPropertiesValidatesPropertiesMatchingARegex_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                ["foo"]
            """,
            """
                {"patternProperties":{"f.*o":{"type":"integer"}}}
            """,
            true,
            """patternProperties validates properties matching a regex -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores strings"
     */
    @Test
    fun patternProperties_patternPropertiesValidatesPropertiesMatchingARegex_ignoresStrings() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"patternProperties":{"f.*o":{"type":"integer"}}}
            """,
            true,
            """patternProperties validates properties matching a regex -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores other non-objects"
     */
    @Test
    fun patternProperties_patternPropertiesValidatesPropertiesMatchingARegex_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"patternProperties":{"f.*o":{"type":"integer"}}}
            """,
            true,
            """patternProperties validates properties matching a regex -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> a single valid match is valid"
     */
    @Test
    fun patternProperties_multipleSimultaneousPatternPropertiesAreValidated_aSingleValidMatchIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":21}
            """,
            """
                {"patternProperties":{"a*":{"type":"integer"},"aaa*":{"maximum":20}}}
            """,
            true,
            """multiple simultaneous patternProperties are validated -> a single valid match is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> a simultaneous match is valid"
     */
    @Test
    fun patternProperties_multipleSimultaneousPatternPropertiesAreValidated_aSimultaneousMatchIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"aaaa":18}
            """,
            """
                {"patternProperties":{"a*":{"type":"integer"},"aaa*":{"maximum":20}}}
            """,
            true,
            """multiple simultaneous patternProperties are validated -> a simultaneous match is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> multiple matches is valid"
     */
    @Test
    fun patternProperties_multipleSimultaneousPatternPropertiesAreValidated_multipleMatchesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":21,"aaaa":18}
            """,
            """
                {"patternProperties":{"a*":{"type":"integer"},"aaa*":{"maximum":20}}}
            """,
            true,
            """multiple simultaneous patternProperties are validated -> multiple matches is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to one is invalid"
     */
    @Test
    fun patternProperties_multipleSimultaneousPatternPropertiesAreValidated_anInvalidDueToOneIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":"bar"}
            """,
            """
                {"patternProperties":{"a*":{"type":"integer"},"aaa*":{"maximum":20}}}
            """,
            false,
            """multiple simultaneous patternProperties are validated -> an invalid due to one is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to the other is invalid"
     */
    @Test
    fun patternProperties_multipleSimultaneousPatternPropertiesAreValidated_anInvalidDueToTheOtherIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"aaaa":31}
            """,
            """
                {"patternProperties":{"a*":{"type":"integer"},"aaa*":{"maximum":20}}}
            """,
            false,
            """multiple simultaneous patternProperties are validated -> an invalid due to the other is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to both is invalid"
     */
    @Test
    fun patternProperties_multipleSimultaneousPatternPropertiesAreValidated_anInvalidDueToBothIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"aaa":"foo","aaaa":31}
            """,
            """
                {"patternProperties":{"a*":{"type":"integer"},"aaa*":{"maximum":20}}}
            """,
            false,
            """multiple simultaneous patternProperties are validated -> an invalid due to both is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> non recognized members are ignored"
     */
    @Test
    fun patternProperties_regexesAreNotAnchoredByDefaultAndAreCaseSensitive_nonRecognizedMembersAreIgnored() {
        
        assertKsonEnforcesSchema(
            """
                {"answer 1":"42"}
            """,
            """
                {"patternProperties":{"[0-9]{2,}":{"type":"boolean"},"X_":{"type":"string"}}}
            """,
            true,
            """regexes are not anchored by default and are case sensitive -> non recognized members are ignored""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> recognized members are accounted for"
     */
    @Test
    fun patternProperties_regexesAreNotAnchoredByDefaultAndAreCaseSensitive_recognizedMembersAreAccountedFor() {
        
        assertKsonEnforcesSchema(
            """
                {"a31b":null}
            """,
            """
                {"patternProperties":{"[0-9]{2,}":{"type":"boolean"},"X_":{"type":"string"}}}
            """,
            false,
            """regexes are not anchored by default and are case sensitive -> recognized members are accounted for""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> regexes are case sensitive"
     */
    @Test
    fun patternProperties_regexesAreNotAnchoredByDefaultAndAreCaseSensitive_regexesAreCaseSensitive() {
        
        assertKsonEnforcesSchema(
            """
                {"a_x_3":3}
            """,
            """
                {"patternProperties":{"[0-9]{2,}":{"type":"boolean"},"X_":{"type":"string"}}}
            """,
            true,
            """regexes are not anchored by default and are case sensitive -> regexes are case sensitive""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> regexes are case sensitive, 2"
     */
    @Test
    fun patternProperties_regexesAreNotAnchoredByDefaultAndAreCaseSensitive_regexesAreCaseSensitive_2() {
        
        assertKsonEnforcesSchema(
            """
                {"a_X_3":3}
            """,
            """
                {"patternProperties":{"[0-9]{2,}":{"type":"boolean"},"X_":{"type":"string"}}}
            """,
            false,
            """regexes are not anchored by default and are case sensitive -> regexes are case sensitive, 2""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with property matching schema true is valid"
     */
    @Test
    fun patternProperties_patternPropertiesWithBooleanSchemas_objectWithPropertyMatchingSchemaTrueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"patternProperties":{"f.*":true,"b.*":false}}
            """,
            true,
            """patternProperties with boolean schemas -> object with property matching schema true is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with property matching schema false is invalid"
     */
    @Test
    fun patternProperties_patternPropertiesWithBooleanSchemas_objectWithPropertyMatchingSchemaFalseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"patternProperties":{"f.*":true,"b.*":false}}
            """,
            false,
            """patternProperties with boolean schemas -> object with property matching schema false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with both properties is invalid"
     */
    @Test
    fun patternProperties_patternPropertiesWithBooleanSchemas_objectWithBothPropertiesIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"patternProperties":{"f.*":true,"b.*":false}}
            """,
            false,
            """patternProperties with boolean schemas -> object with both properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with a property matching both true and false is invalid"
     */
    @Test
    fun patternProperties_patternPropertiesWithBooleanSchemas_objectWithAPropertyMatchingBothTrueAndFalseIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foobar":1}
            """,
            """
                {"patternProperties":{"f.*":true,"b.*":false}}
            """,
            false,
            """patternProperties with boolean schemas -> object with a property matching both true and false is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> empty object is valid"
     */
    @Test
    fun patternProperties_patternPropertiesWithBooleanSchemas_emptyObjectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"patternProperties":{"f.*":true,"b.*":false}}
            """,
            true,
            """patternProperties with boolean schemas -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with null valued instance properties -> allows null values"
     */
    @Test
    fun patternProperties_patternPropertiesWithNullValuedInstanceProperties_allowsNullValues() {
        
        assertKsonEnforcesSchema(
            """
                {"foobar":null}
            """,
            """
                {"patternProperties":{"^.*bar${'$'}":{"type":"null"}}}
            """,
            true,
            """patternProperties with null valued instance properties -> allows null values""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> both properties present and valid is valid"
     */
    @Test
    fun properties_objectPropertiesValidation_bothPropertiesPresentAndValidIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":"baz"}
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"type":"string"}}}
            """,
            true,
            """object properties validation -> both properties present and valid is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> one property invalid is invalid"
     */
    @Test
    fun properties_objectPropertiesValidation_onePropertyInvalidIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":{}}
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"type":"string"}}}
            """,
            false,
            """object properties validation -> one property invalid is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> both properties invalid is invalid"
     */
    @Test
    fun properties_objectPropertiesValidation_bothPropertiesInvalidIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":[],"bar":{}}
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"type":"string"}}}
            """,
            false,
            """object properties validation -> both properties invalid is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> doesn't invalidate other properties"
     */
    @Test
    fun properties_objectPropertiesValidation_doesn_tInvalidateOtherProperties() {
        
        assertKsonEnforcesSchema(
            """
                {"quux":[]}
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"type":"string"}}}
            """,
            true,
            """object properties validation -> doesn't invalidate other properties""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> ignores arrays"
     */
    @Test
    fun properties_objectPropertiesValidation_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"type":"string"}}}
            """,
            true,
            """object properties validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "object properties validation -> ignores other non-objects"
     */
    @Test
    fun properties_objectPropertiesValidation_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"type":"string"}}}
            """,
            true,
            """object properties validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> property validates property"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_propertyValidatesProperty() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":[1,2]}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> property validates property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> property invalidates property"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_propertyInvalidatesProperty() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":[1,2,3,4]}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> property invalidates property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty invalidates property"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_patternPropertyInvalidatesProperty() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":[]}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> patternProperty invalidates property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty validates nonproperty"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_patternPropertyValidatesNonproperty() {
        
        assertKsonEnforcesSchema(
            """
                {"fxo":[1,2]}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> patternProperty validates nonproperty""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> patternProperty invalidates nonproperty"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_patternPropertyInvalidatesNonproperty() {
        
        assertKsonEnforcesSchema(
            """
                {"fxo":[]}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> patternProperty invalidates nonproperty""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty ignores property"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_additionalPropertyIgnoresProperty() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":[]}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> additionalProperty ignores property""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty validates others"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_additionalPropertyValidatesOthers() {
        
        assertKsonEnforcesSchema(
            """
                {"quux":3}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            true,
            """properties, patternProperties, additionalProperties interaction -> additionalProperty validates others""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties, patternProperties, additionalProperties interaction -> additionalProperty invalidates others"
     */
    @Test
    fun properties_properties_PatternProperties_AdditionalPropertiesInteraction_additionalPropertyInvalidatesOthers() {
        
        assertKsonEnforcesSchema(
            """
                {"quux":"foo"}
            """,
            """
                {"properties":{"foo":{"type":"array","maxItems":3},"bar":{"type":"array"}},"patternProperties":{"f.o":{"minItems":2}},"additionalProperties":{"type":"integer"}}
            """,
            false,
            """properties, patternProperties, additionalProperties interaction -> additionalProperty invalidates others""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> no property present is valid"
     */
    @Test
    fun properties_propertiesWithBooleanSchema_noPropertyPresentIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"properties":{"foo":true,"bar":false}}
            """,
            true,
            """properties with boolean schema -> no property present is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> only 'true' property present is valid"
     */
    @Test
    fun properties_propertiesWithBooleanSchema_only_true_PropertyPresentIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"properties":{"foo":true,"bar":false}}
            """,
            true,
            """properties with boolean schema -> only 'true' property present is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> only 'false' property present is invalid"
     */
    @Test
    fun properties_propertiesWithBooleanSchema_only_false_PropertyPresentIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":2}
            """,
            """
                {"properties":{"foo":true,"bar":false}}
            """,
            false,
            """properties with boolean schema -> only 'false' property present is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with boolean schema -> both properties present is invalid"
     */
    @Test
    fun properties_propertiesWithBooleanSchema_bothPropertiesPresentIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1,"bar":2}
            """,
            """
                {"properties":{"foo":true,"bar":false}}
            """,
            false,
            """properties with boolean schema -> both properties present is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with escaped characters -> object with all numbers is valid"
     */
    @Test
    fun properties_propertiesWithEscapedCharacters_objectWithAllNumbersIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\nbar":1,"foo\"bar":1,"foo\\bar":1,"foo\rbar":1,"foo\tbar":1,"foo\fbar":1}
            """,
            """
                {"properties":{"foo\nbar":{"type":"number"},"foo\"bar":{"type":"number"},"foo\\bar":{"type":"number"},"foo\rbar":{"type":"number"},"foo\tbar":{"type":"number"},"foo\fbar":{"type":"number"}}}
            """,
            true,
            """properties with escaped characters -> object with all numbers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with escaped characters -> object with strings is invalid"
     */
    @Test
    fun properties_propertiesWithEscapedCharacters_objectWithStringsIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\nbar":"1","foo\"bar":"1","foo\\bar":"1","foo\rbar":"1","foo\tbar":"1","foo\fbar":"1"}
            """,
            """
                {"properties":{"foo\nbar":{"type":"number"},"foo\"bar":{"type":"number"},"foo\\bar":{"type":"number"},"foo\rbar":{"type":"number"},"foo\tbar":{"type":"number"},"foo\fbar":{"type":"number"}}}
            """,
            false,
            """properties with escaped characters -> object with strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties with null valued instance properties -> allows null values"
     */
    @Test
    fun properties_propertiesWithNullValuedInstanceProperties_allowsNullValues() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":null}
            """,
            """
                {"properties":{"foo":{"type":"null"}}}
            """,
            true,
            """properties with null valued instance properties -> allows null values""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> ignores arrays"
     */
    @Test
    fun properties_propertiesWhoseNamesAreJavascriptObjectPropertyNames_ignoresArrays() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"properties":{"__proto__":{"type":"number"},"toString":{"properties":{"length":{"type":"string"}}},"constructor":{"type":"number"}}}
            """,
            true,
            """properties whose names are Javascript object property names -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> ignores other non-objects"
     */
    @Test
    fun properties_propertiesWhoseNamesAreJavascriptObjectPropertyNames_ignoresOtherNon_objects() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"properties":{"__proto__":{"type":"number"},"toString":{"properties":{"length":{"type":"string"}}},"constructor":{"type":"number"}}}
            """,
            true,
            """properties whose names are Javascript object property names -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> none of the properties mentioned"
     */
    @Test
    fun properties_propertiesWhoseNamesAreJavascriptObjectPropertyNames_noneOfThePropertiesMentioned() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"properties":{"__proto__":{"type":"number"},"toString":{"properties":{"length":{"type":"string"}}},"constructor":{"type":"number"}}}
            """,
            true,
            """properties whose names are Javascript object property names -> none of the properties mentioned""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> __proto__ not valid"
     */
    @Test
    fun properties_propertiesWhoseNamesAreJavascriptObjectPropertyNames___proto__NotValid() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"__proto__":"foo"}
            """,
            """
                {"properties":{"__proto__":{"type":"number"},"toString":{"properties":{"length":{"type":"string"}}},"constructor":{"type":"number"}}}
            """,
            false,
            """properties whose names are Javascript object property names -> __proto__ not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> toString not valid"
     */
    @Test
    fun properties_propertiesWhoseNamesAreJavascriptObjectPropertyNames_toStringNotValid() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"toString":{"length":37}}
            """,
            """
                {"properties":{"__proto__":{"type":"number"},"toString":{"properties":{"length":{"type":"string"}}},"constructor":{"type":"number"}}}
            """,
            false,
            """properties whose names are Javascript object property names -> toString not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> constructor not valid"
     */
    @Test
    fun properties_propertiesWhoseNamesAreJavascriptObjectPropertyNames_constructorNotValid() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"constructor":{"length":37}}
            """,
            """
                {"properties":{"__proto__":{"type":"number"},"toString":{"properties":{"length":{"type":"string"}}},"constructor":{"type":"number"}}}
            """,
            false,
            """properties whose names are Javascript object property names -> constructor not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/properties.json`:
     *     "properties whose names are Javascript object property names -> all present and valid"
     */
    @Test
    fun properties_propertiesWhoseNamesAreJavascriptObjectPropertyNames_allPresentAndValid() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"__proto__":12,"toString":{"length":"foo"},"constructor":37}
            """,
            """
                {"properties":{"__proto__":{"type":"number"},"toString":{"properties":{"length":{"type":"string"}}},"constructor":{"type":"number"}}}
            """,
            true,
            """properties whose names are Javascript object property names -> all present and valid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation -> all property names valid"
     */
    @Test
    fun propertyNames_propertyNamesValidation_allPropertyNamesValid() {
        
        assertKsonEnforcesSchema(
            """
                {"f":{},"foo":{}}
            """,
            """
                {"propertyNames":{"maxLength":3}}
            """,
            true,
            """propertyNames validation -> all property names valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation -> some property names invalid"
     */
    @Test
    fun propertyNames_propertyNamesValidation_somePropertyNamesInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":{},"foobar":{}}
            """,
            """
                {"propertyNames":{"maxLength":3}}
            """,
            false,
            """propertyNames validation -> some property names invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation -> object without properties is valid"
     */
    @Test
    fun propertyNames_propertyNamesValidation_objectWithoutPropertiesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"propertyNames":{"maxLength":3}}
            """,
            true,
            """propertyNames validation -> object without properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation -> ignores arrays"
     */
    @Test
    fun propertyNames_propertyNamesValidation_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3,4]
            """,
            """
                {"propertyNames":{"maxLength":3}}
            """,
            true,
            """propertyNames validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation -> ignores strings"
     */
    @Test
    fun propertyNames_propertyNamesValidation_ignoresStrings() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {"propertyNames":{"maxLength":3}}
            """,
            true,
            """propertyNames validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation -> ignores other non-objects"
     */
    @Test
    fun propertyNames_propertyNamesValidation_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"propertyNames":{"maxLength":3}}
            """,
            true,
            """propertyNames validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation with pattern -> matching property names valid"
     */
    @Test
    fun propertyNames_propertyNamesValidationWithPattern_matchingPropertyNamesValid() {
        
        assertKsonEnforcesSchema(
            """
                {"a":{},"aa":{},"aaa":{}}
            """,
            """
                {"propertyNames":{"pattern":"^a+${'$'}"}}
            """,
            true,
            """propertyNames validation with pattern -> matching property names valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation with pattern -> non-matching property name is invalid"
     */
    @Test
    fun propertyNames_propertyNamesValidationWithPattern_non_matchingPropertyNameIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"aaA":{}}
            """,
            """
                {"propertyNames":{"pattern":"^a+${'$'}"}}
            """,
            false,
            """propertyNames validation with pattern -> non-matching property name is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames validation with pattern -> object without properties is valid"
     */
    @Test
    fun propertyNames_propertyNamesValidationWithPattern_objectWithoutPropertiesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"propertyNames":{"pattern":"^a+${'$'}"}}
            """,
            true,
            """propertyNames validation with pattern -> object without properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames with boolean schema true -> object with any properties is valid"
     */
    @Test
    fun propertyNames_propertyNamesWithBooleanSchemaTrue_objectWithAnyPropertiesIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"propertyNames":true}
            """,
            true,
            """propertyNames with boolean schema true -> object with any properties is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames with boolean schema true -> empty object is valid"
     */
    @Test
    fun propertyNames_propertyNamesWithBooleanSchemaTrue_emptyObjectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"propertyNames":true}
            """,
            true,
            """propertyNames with boolean schema true -> empty object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames with boolean schema false -> object with any properties is invalid"
     */
    @Test
    fun propertyNames_propertyNamesWithBooleanSchemaFalse_objectWithAnyPropertiesIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"propertyNames":false}
            """,
            false,
            """propertyNames with boolean schema false -> object with any properties is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/propertyNames.json`:
     *     "propertyNames with boolean schema false -> empty object is valid"
     */
    @Test
    fun propertyNames_propertyNamesWithBooleanSchemaFalse_emptyObjectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"propertyNames":false}
            """,
            true,
            """propertyNames with boolean schema false -> empty object is valid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "root pointer ref -> match"
     */
    @Test
    fun ref_rootPointerRef_match() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":false}
            """,
            """
                {"properties":{"foo":{"${'$'}ref":"#"}},"additionalProperties":false}
            """,
            true,
            """root pointer ref -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "root pointer ref -> recursive match"
     */
    @Test
    fun ref_rootPointerRef_recursiveMatch() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"foo":false}}
            """,
            """
                {"properties":{"foo":{"${'$'}ref":"#"}},"additionalProperties":false}
            """,
            true,
            """root pointer ref -> recursive match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "root pointer ref -> mismatch"
     */
    @Test
    fun ref_rootPointerRef_mismatch() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":false}
            """,
            """
                {"properties":{"foo":{"${'$'}ref":"#"}},"additionalProperties":false}
            """,
            false,
            """root pointer ref -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "root pointer ref -> recursive mismatch"
     */
    @Test
    fun ref_rootPointerRef_recursiveMismatch() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"bar":false}}
            """,
            """
                {"properties":{"foo":{"${'$'}ref":"#"}},"additionalProperties":false}
            """,
            false,
            """root pointer ref -> recursive mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "relative pointer ref to object -> match"
     */
    @Test
    fun ref_relativePointerRefToObject_match() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":3}
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"${'$'}ref":"#/properties/foo"}}}
            """,
            true,
            """relative pointer ref to object -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "relative pointer ref to object -> mismatch"
     */
    @Test
    fun ref_relativePointerRefToObject_mismatch() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":true}
            """,
            """
                {"properties":{"foo":{"type":"integer"},"bar":{"${'$'}ref":"#/properties/foo"}}}
            """,
            false,
            """relative pointer ref to object -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "relative pointer ref to array -> match array"
     */
    @Test
    fun ref_relativePointerRefToArray_matchArray() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"items":[{"type":"integer"},{"${'$'}ref":"#/items/0"}]}
            """,
            true,
            """relative pointer ref to array -> match array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "relative pointer ref to array -> mismatch array"
     */
    @Test
    fun ref_relativePointerRefToArray_mismatchArray() {
        
        assertKsonEnforcesSchema(
            """
                [1,"foo"]
            """,
            """
                {"items":[{"type":"integer"},{"${'$'}ref":"#/items/0"}]}
            """,
            false,
            """relative pointer ref to array -> mismatch array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "escaped pointer ref -> slash invalid"
     */
    @Test
    fun ref_escapedPointerRef_slashInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_escapedPointerRef_slashInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"slash":"aoeu"}
            """,
            """
                {"definitions":{"tilde~field":{"type":"integer"},"slash/field":{"type":"integer"},"percent%field":{"type":"integer"}},"properties":{"tilde":{"${'$'}ref":"#/definitions/tilde~0field"},"slash":{"${'$'}ref":"#/definitions/slash~1field"},"percent":{"${'$'}ref":"#/definitions/percent%25field"}}}
            """,
            false,
            """escaped pointer ref -> slash invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "escaped pointer ref -> tilde invalid"
     */
    @Test
    fun ref_escapedPointerRef_tildeInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_escapedPointerRef_tildeInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"tilde":"aoeu"}
            """,
            """
                {"definitions":{"tilde~field":{"type":"integer"},"slash/field":{"type":"integer"},"percent%field":{"type":"integer"}},"properties":{"tilde":{"${'$'}ref":"#/definitions/tilde~0field"},"slash":{"${'$'}ref":"#/definitions/slash~1field"},"percent":{"${'$'}ref":"#/definitions/percent%25field"}}}
            """,
            false,
            """escaped pointer ref -> tilde invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "escaped pointer ref -> percent invalid"
     */
    @Test
    fun ref_escapedPointerRef_percentInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_escapedPointerRef_percentInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"percent":"aoeu"}
            """,
            """
                {"definitions":{"tilde~field":{"type":"integer"},"slash/field":{"type":"integer"},"percent%field":{"type":"integer"}},"properties":{"tilde":{"${'$'}ref":"#/definitions/tilde~0field"},"slash":{"${'$'}ref":"#/definitions/slash~1field"},"percent":{"${'$'}ref":"#/definitions/percent%25field"}}}
            """,
            false,
            """escaped pointer ref -> percent invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "escaped pointer ref -> slash valid"
     */
    @Test
    fun ref_escapedPointerRef_slashValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_escapedPointerRef_slashValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"slash":123}
            """,
            """
                {"definitions":{"tilde~field":{"type":"integer"},"slash/field":{"type":"integer"},"percent%field":{"type":"integer"}},"properties":{"tilde":{"${'$'}ref":"#/definitions/tilde~0field"},"slash":{"${'$'}ref":"#/definitions/slash~1field"},"percent":{"${'$'}ref":"#/definitions/percent%25field"}}}
            """,
            true,
            """escaped pointer ref -> slash valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "escaped pointer ref -> tilde valid"
     */
    @Test
    fun ref_escapedPointerRef_tildeValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_escapedPointerRef_tildeValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"tilde":123}
            """,
            """
                {"definitions":{"tilde~field":{"type":"integer"},"slash/field":{"type":"integer"},"percent%field":{"type":"integer"}},"properties":{"tilde":{"${'$'}ref":"#/definitions/tilde~0field"},"slash":{"${'$'}ref":"#/definitions/slash~1field"},"percent":{"${'$'}ref":"#/definitions/percent%25field"}}}
            """,
            true,
            """escaped pointer ref -> tilde valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "escaped pointer ref -> percent valid"
     */
    @Test
    fun ref_escapedPointerRef_percentValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_escapedPointerRef_percentValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"percent":123}
            """,
            """
                {"definitions":{"tilde~field":{"type":"integer"},"slash/field":{"type":"integer"},"percent%field":{"type":"integer"}},"properties":{"tilde":{"${'$'}ref":"#/definitions/tilde~0field"},"slash":{"${'$'}ref":"#/definitions/slash~1field"},"percent":{"${'$'}ref":"#/definitions/percent%25field"}}}
            """,
            true,
            """escaped pointer ref -> percent valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "nested refs -> nested ref valid"
     */
    @Test
    fun ref_nestedRefs_nestedRefValid() {
        
        assertKsonEnforcesSchema(
            """
                5
            """,
            """
                {"definitions":{"a":{"type":"integer"},"b":{"${'$'}ref":"#/definitions/a"},"c":{"${'$'}ref":"#/definitions/b"}},"allOf":[{"${'$'}ref":"#/definitions/c"}]}
            """,
            true,
            """nested refs -> nested ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "nested refs -> nested ref invalid"
     */
    @Test
    fun ref_nestedRefs_nestedRefInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"definitions":{"a":{"type":"integer"},"b":{"${'$'}ref":"#/definitions/a"},"c":{"${'$'}ref":"#/definitions/b"}},"allOf":[{"${'$'}ref":"#/definitions/c"}]}
            """,
            false,
            """nested refs -> nested ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref overrides any sibling keywords -> ref valid"
     */
    @Test
    fun ref_refOverridesAnySiblingKeywords_refValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refOverridesAnySiblingKeywords_refValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":[]}
            """,
            """
                {"definitions":{"reffed":{"type":"array"}},"properties":{"foo":{"${'$'}ref":"#/definitions/reffed","maxItems":2}}}
            """,
            true,
            """ref overrides any sibling keywords -> ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref overrides any sibling keywords -> ref valid, maxItems ignored"
     */
    @Test
    fun ref_refOverridesAnySiblingKeywords_refValid_MaxItemsIgnored() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refOverridesAnySiblingKeywords_refValid_MaxItemsIgnored" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":[1,2,3]}
            """,
            """
                {"definitions":{"reffed":{"type":"array"}},"properties":{"foo":{"${'$'}ref":"#/definitions/reffed","maxItems":2}}}
            """,
            true,
            """ref overrides any sibling keywords -> ref valid, maxItems ignored""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref overrides any sibling keywords -> ref invalid"
     */
    @Test
    fun ref_refOverridesAnySiblingKeywords_refInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refOverridesAnySiblingKeywords_refInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":"string"}
            """,
            """
                {"definitions":{"reffed":{"type":"array"}},"properties":{"foo":{"${'$'}ref":"#/definitions/reffed","maxItems":2}}}
            """,
            false,
            """ref overrides any sibling keywords -> ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$ref prevents a sibling $id from changing the base uri -> $ref resolves to /definitions/base_foo, data does not validate"
     */
    @Test
    fun ref_______refPreventsASibling______idFromChangingTheBaseUri_______refResolvesTo_definitions_base_foo_DataDoesNotValidate() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_______refPreventsASibling______idFromChangingTheBaseUri_______refResolvesTo_definitions_base_foo_DataDoesNotValidate" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}id":"http://localhost:1234/sibling_id/base/","definitions":{"foo":{"${'$'}id":"http://localhost:1234/sibling_id/foo.json","type":"string"},"base_foo":{"${'$'}comment":"this canonical uri is http://localhost:1234/sibling_id/base/foo.json","${'$'}id":"foo.json","type":"number"}},"allOf":[{"${'$'}comment":"${'$'}ref resolves to http://localhost:1234/sibling_id/base/foo.json, not http://localhost:1234/sibling_id/foo.json","${'$'}id":"http://localhost:1234/sibling_id/","${'$'}ref":"foo.json"}]}
            """,
            false,
            """${'$'}ref prevents a sibling ${'$'}id from changing the base uri -> ${'$'}ref resolves to /definitions/base_foo, data does not validate""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$ref prevents a sibling $id from changing the base uri -> $ref resolves to /definitions/base_foo, data validates"
     */
    @Test
    fun ref_______refPreventsASibling______idFromChangingTheBaseUri_______refResolvesTo_definitions_base_foo_DataValidates() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_______refPreventsASibling______idFromChangingTheBaseUri_______refResolvesTo_definitions_base_foo_DataValidates" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}id":"http://localhost:1234/sibling_id/base/","definitions":{"foo":{"${'$'}id":"http://localhost:1234/sibling_id/foo.json","type":"string"},"base_foo":{"${'$'}comment":"this canonical uri is http://localhost:1234/sibling_id/base/foo.json","${'$'}id":"foo.json","type":"number"}},"allOf":[{"${'$'}comment":"${'$'}ref resolves to http://localhost:1234/sibling_id/base/foo.json, not http://localhost:1234/sibling_id/foo.json","${'$'}id":"http://localhost:1234/sibling_id/","${'$'}ref":"foo.json"}]}
            """,
            true,
            """${'$'}ref prevents a sibling ${'$'}id from changing the base uri -> ${'$'}ref resolves to /definitions/base_foo, data validates""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "remote ref, containing refs itself -> remote ref valid"
     */
    @Test
    fun ref_remoteRef_ContainingRefsItself_remoteRefValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_remoteRef_ContainingRefsItself_remoteRefValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"minLength":1}
            """,
            """
                {"${'$'}ref":"http://json-schema.org/draft-07/schema#"}
            """,
            true,
            """remote ref, containing refs itself -> remote ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "remote ref, containing refs itself -> remote ref invalid"
     */
    @Test
    fun ref_remoteRef_ContainingRefsItself_remoteRefInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_remoteRef_ContainingRefsItself_remoteRefInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"minLength":-1}
            """,
            """
                {"${'$'}ref":"http://json-schema.org/draft-07/schema#"}
            """,
            false,
            """remote ref, containing refs itself -> remote ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "property named $ref that is not a reference -> property named $ref valid"
     */
    @Test
    fun ref_propertyNamed______refThatIsNotAReference_propertyNamed______refValid() {
        
        assertKsonEnforcesSchema(
            """
                {"${'$'}ref":"a"}
            """,
            """
                {"properties":{"${'$'}ref":{"type":"string"}}}
            """,
            true,
            """property named ${'$'}ref that is not a reference -> property named ${'$'}ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "property named $ref that is not a reference -> property named $ref invalid"
     */
    @Test
    fun ref_propertyNamed______refThatIsNotAReference_propertyNamed______refInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"${'$'}ref":2}
            """,
            """
                {"properties":{"${'$'}ref":{"type":"string"}}}
            """,
            false,
            """property named ${'$'}ref that is not a reference -> property named ${'$'}ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "property named $ref, containing an actual $ref -> property named $ref valid"
     */
    @Test
    fun ref_propertyNamed______ref_ContainingAnActual______ref_propertyNamed______refValid() {
        
        assertKsonEnforcesSchema(
            """
                {"${'$'}ref":"a"}
            """,
            """
                {"properties":{"${'$'}ref":{"${'$'}ref":"#/definitions/is-string"}},"definitions":{"is-string":{"type":"string"}}}
            """,
            true,
            """property named ${'$'}ref, containing an actual ${'$'}ref -> property named ${'$'}ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "property named $ref, containing an actual $ref -> property named $ref invalid"
     */
    @Test
    fun ref_propertyNamed______ref_ContainingAnActual______ref_propertyNamed______refInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"${'$'}ref":2}
            """,
            """
                {"properties":{"${'$'}ref":{"${'$'}ref":"#/definitions/is-string"}},"definitions":{"is-string":{"type":"string"}}}
            """,
            false,
            """property named ${'$'}ref, containing an actual ${'$'}ref -> property named ${'$'}ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$ref to boolean schema true -> any value is valid"
     */
    @Test
    fun ref_______refToBooleanSchemaTrue_anyValueIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[{"${'$'}ref":"#/definitions/bool"}],"definitions":{"bool":true}}
            """,
            true,
            """${'$'}ref to boolean schema true -> any value is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$ref to boolean schema false -> any value is invalid"
     */
    @Test
    fun ref_______refToBooleanSchemaFalse_anyValueIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[{"${'$'}ref":"#/definitions/bool"}],"definitions":{"bool":false}}
            """,
            false,
            """${'$'}ref to boolean schema false -> any value is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Recursive references between schemas -> valid tree"
     */
    @Test
    fun ref_recursiveReferencesBetweenSchemas_validTree() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_recursiveReferencesBetweenSchemas_validTree" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"meta":"root","nodes":[{"value":1,"subtree":{"meta":"child","nodes":[{"value":1.1},{"value":1.2}]}},{"value":2,"subtree":{"meta":"child","nodes":[{"value":2.1},{"value":2.2}]}}]}
            """,
            """
                {"${'$'}id":"http://localhost:1234/tree","description":"tree of nodes","type":"object","properties":{"meta":{"type":"string"},"nodes":{"type":"array","items":{"${'$'}ref":"node"}}},"required":["meta","nodes"],"definitions":{"node":{"${'$'}id":"http://localhost:1234/node","description":"node","type":"object","properties":{"value":{"type":"number"},"subtree":{"${'$'}ref":"tree"}},"required":["value"]}}}
            """,
            true,
            """Recursive references between schemas -> valid tree""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Recursive references between schemas -> invalid tree"
     */
    @Test
    fun ref_recursiveReferencesBetweenSchemas_invalidTree() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_recursiveReferencesBetweenSchemas_invalidTree" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"meta":"root","nodes":[{"value":1,"subtree":{"meta":"child","nodes":[{"value":"string is invalid"},{"value":1.2}]}},{"value":2,"subtree":{"meta":"child","nodes":[{"value":2.1},{"value":2.2}]}}]}
            """,
            """
                {"${'$'}id":"http://localhost:1234/tree","description":"tree of nodes","type":"object","properties":{"meta":{"type":"string"},"nodes":{"type":"array","items":{"${'$'}ref":"node"}}},"required":["meta","nodes"],"definitions":{"node":{"${'$'}id":"http://localhost:1234/node","description":"node","type":"object","properties":{"value":{"type":"number"},"subtree":{"${'$'}ref":"tree"}},"required":["value"]}}}
            """,
            false,
            """Recursive references between schemas -> invalid tree""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "refs with quote -> object with numbers is valid"
     */
    @Test
    fun ref_refsWithQuote_objectWithNumbersIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refsWithQuote_objectWithNumbersIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo\"bar":1}
            """,
            """
                {"properties":{"foo\"bar":{"${'$'}ref":"#/definitions/foo%22bar"}},"definitions":{"foo\"bar":{"type":"number"}}}
            """,
            true,
            """refs with quote -> object with numbers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "refs with quote -> object with strings is invalid"
     */
    @Test
    fun ref_refsWithQuote_objectWithStringsIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refsWithQuote_objectWithStringsIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo\"bar":"1"}
            """,
            """
                {"properties":{"foo\"bar":{"${'$'}ref":"#/definitions/foo%22bar"}},"definitions":{"foo\"bar":{"type":"number"}}}
            """,
            false,
            """refs with quote -> object with strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Location-independent identifier -> match"
     */
    @Test
    fun ref_location_independentIdentifier_match() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_location_independentIdentifier_match" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"allOf":[{"${'$'}ref":"#foo"}],"definitions":{"A":{"${'$'}id":"#foo","type":"integer"}}}
            """,
            true,
            """Location-independent identifier -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Location-independent identifier -> mismatch"
     */
    @Test
    fun ref_location_independentIdentifier_mismatch() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_location_independentIdentifier_mismatch" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"allOf":[{"${'$'}ref":"#foo"}],"definitions":{"A":{"${'$'}id":"#foo","type":"integer"}}}
            """,
            false,
            """Location-independent identifier -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Reference an anchor with a non-relative URI -> match"
     */
    @Test
    fun ref_referenceAnAnchorWithANon_relativeURI_match() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_referenceAnAnchorWithANon_relativeURI_match" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}id":"https://example.com/schema-with-anchor","allOf":[{"${'$'}ref":"https://example.com/schema-with-anchor#foo"}],"definitions":{"A":{"${'$'}id":"#foo","type":"integer"}}}
            """,
            true,
            """Reference an anchor with a non-relative URI -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Reference an anchor with a non-relative URI -> mismatch"
     */
    @Test
    fun ref_referenceAnAnchorWithANon_relativeURI_mismatch() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_referenceAnAnchorWithANon_relativeURI_mismatch" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}id":"https://example.com/schema-with-anchor","allOf":[{"${'$'}ref":"https://example.com/schema-with-anchor#foo"}],"definitions":{"A":{"${'$'}id":"#foo","type":"integer"}}}
            """,
            false,
            """Reference an anchor with a non-relative URI -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Location-independent identifier with base URI change in subschema -> match"
     */
    @Test
    fun ref_location_independentIdentifierWithBaseURIChangeInSubschema_match() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_location_independentIdentifierWithBaseURIChangeInSubschema_match" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}id":"http://localhost:1234/root","allOf":[{"${'$'}ref":"http://localhost:1234/nested.json#foo"}],"definitions":{"A":{"${'$'}id":"nested.json","definitions":{"B":{"${'$'}id":"#foo","type":"integer"}}}}}
            """,
            true,
            """Location-independent identifier with base URI change in subschema -> match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "Location-independent identifier with base URI change in subschema -> mismatch"
     */
    @Test
    fun ref_location_independentIdentifierWithBaseURIChangeInSubschema_mismatch() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_location_independentIdentifierWithBaseURIChangeInSubschema_mismatch" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}id":"http://localhost:1234/root","allOf":[{"${'$'}ref":"http://localhost:1234/nested.json#foo"}],"definitions":{"A":{"${'$'}id":"nested.json","definitions":{"B":{"${'$'}id":"#foo","type":"integer"}}}}}
            """,
            false,
            """Location-independent identifier with base URI change in subschema -> mismatch""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> do not evaluate the $ref inside the enum, matching any string"
     */
    @Test
    fun ref_naiveReplacementOf______refWithItsDestinationIsNotCorrect_doNotEvaluateThe______refInsideTheEnum_MatchingAnyString() {
        
        assertKsonEnforcesSchema(
            """
                "this is a string"
            """,
            """
                {"definitions":{"a_string":{"type":"string"}},"enum":[{"${'$'}ref":"#/definitions/a_string"}]}
            """,
            false,
            """naive replacement of ${'$'}ref with its destination is not correct -> do not evaluate the ${'$'}ref inside the enum, matching any string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> do not evaluate the $ref inside the enum, definition exact match"
     */
    @Test
    fun ref_naiveReplacementOf______refWithItsDestinationIsNotCorrect_doNotEvaluateThe______refInsideTheEnum_DefinitionExactMatch() {
        
        assertKsonEnforcesSchema(
            """
                {"type":"string"}
            """,
            """
                {"definitions":{"a_string":{"type":"string"}},"enum":[{"${'$'}ref":"#/definitions/a_string"}]}
            """,
            false,
            """naive replacement of ${'$'}ref with its destination is not correct -> do not evaluate the ${'$'}ref inside the enum, definition exact match""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "naive replacement of $ref with its destination is not correct -> match the enum exactly"
     */
    @Test
    fun ref_naiveReplacementOf______refWithItsDestinationIsNotCorrect_matchTheEnumExactly() {
        
        assertKsonEnforcesSchema(
            """
                {"${'$'}ref":"#/definitions/a_string"}
            """,
            """
                {"definitions":{"a_string":{"type":"string"}},"enum":[{"${'$'}ref":"#/definitions/a_string"}]}
            """,
            true,
            """naive replacement of ${'$'}ref with its destination is not correct -> match the enum exactly""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "refs with relative uris and defs -> invalid on inner field"
     */
    @Test
    fun ref_refsWithRelativeUrisAndDefs_invalidOnInnerField() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refsWithRelativeUrisAndDefs_invalidOnInnerField" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"bar":1},"bar":"a"}
            """,
            """
                {"${'$'}id":"http://example.com/schema-relative-uri-defs1.json","properties":{"foo":{"${'$'}id":"schema-relative-uri-defs2.json","definitions":{"inner":{"properties":{"bar":{"type":"string"}}}},"allOf":[{"${'$'}ref":"#/definitions/inner"}]}},"allOf":[{"${'$'}ref":"schema-relative-uri-defs2.json"}]}
            """,
            false,
            """refs with relative uris and defs -> invalid on inner field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "refs with relative uris and defs -> invalid on outer field"
     */
    @Test
    fun ref_refsWithRelativeUrisAndDefs_invalidOnOuterField() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refsWithRelativeUrisAndDefs_invalidOnOuterField" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"bar":"a"},"bar":1}
            """,
            """
                {"${'$'}id":"http://example.com/schema-relative-uri-defs1.json","properties":{"foo":{"${'$'}id":"schema-relative-uri-defs2.json","definitions":{"inner":{"properties":{"bar":{"type":"string"}}}},"allOf":[{"${'$'}ref":"#/definitions/inner"}]}},"allOf":[{"${'$'}ref":"schema-relative-uri-defs2.json"}]}
            """,
            false,
            """refs with relative uris and defs -> invalid on outer field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "refs with relative uris and defs -> valid on both fields"
     */
    @Test
    fun ref_refsWithRelativeUrisAndDefs_validOnBothFields() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refsWithRelativeUrisAndDefs_validOnBothFields" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"bar":"a"},"bar":"a"}
            """,
            """
                {"${'$'}id":"http://example.com/schema-relative-uri-defs1.json","properties":{"foo":{"${'$'}id":"schema-relative-uri-defs2.json","definitions":{"inner":{"properties":{"bar":{"type":"string"}}}},"allOf":[{"${'$'}ref":"#/definitions/inner"}]}},"allOf":[{"${'$'}ref":"schema-relative-uri-defs2.json"}]}
            """,
            true,
            """refs with relative uris and defs -> valid on both fields""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "relative refs with absolute uris and defs -> invalid on inner field"
     */
    @Test
    fun ref_relativeRefsWithAbsoluteUrisAndDefs_invalidOnInnerField() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_relativeRefsWithAbsoluteUrisAndDefs_invalidOnInnerField" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"bar":1},"bar":"a"}
            """,
            """
                {"${'$'}id":"http://example.com/schema-refs-absolute-uris-defs1.json","properties":{"foo":{"${'$'}id":"http://example.com/schema-refs-absolute-uris-defs2.json","definitions":{"inner":{"properties":{"bar":{"type":"string"}}}},"allOf":[{"${'$'}ref":"#/definitions/inner"}]}},"allOf":[{"${'$'}ref":"schema-refs-absolute-uris-defs2.json"}]}
            """,
            false,
            """relative refs with absolute uris and defs -> invalid on inner field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "relative refs with absolute uris and defs -> invalid on outer field"
     */
    @Test
    fun ref_relativeRefsWithAbsoluteUrisAndDefs_invalidOnOuterField() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_relativeRefsWithAbsoluteUrisAndDefs_invalidOnOuterField" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"bar":"a"},"bar":1}
            """,
            """
                {"${'$'}id":"http://example.com/schema-refs-absolute-uris-defs1.json","properties":{"foo":{"${'$'}id":"http://example.com/schema-refs-absolute-uris-defs2.json","definitions":{"inner":{"properties":{"bar":{"type":"string"}}}},"allOf":[{"${'$'}ref":"#/definitions/inner"}]}},"allOf":[{"${'$'}ref":"schema-refs-absolute-uris-defs2.json"}]}
            """,
            false,
            """relative refs with absolute uris and defs -> invalid on outer field""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "relative refs with absolute uris and defs -> valid on both fields"
     */
    @Test
    fun ref_relativeRefsWithAbsoluteUrisAndDefs_validOnBothFields() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_relativeRefsWithAbsoluteUrisAndDefs_validOnBothFields" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":{"bar":"a"},"bar":"a"}
            """,
            """
                {"${'$'}id":"http://example.com/schema-refs-absolute-uris-defs1.json","properties":{"foo":{"${'$'}id":"http://example.com/schema-refs-absolute-uris-defs2.json","definitions":{"inner":{"properties":{"bar":{"type":"string"}}}},"allOf":[{"${'$'}ref":"#/definitions/inner"}]}},"allOf":[{"${'$'}ref":"schema-refs-absolute-uris-defs2.json"}]}
            """,
            true,
            """relative refs with absolute uris and defs -> valid on both fields""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$id must be resolved against nearest parent, not just immediate parent -> number is valid"
     */
    @Test
    fun ref_______idMustBeResolvedAgainstNearestParent_NotJustImmediateParent_numberIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_______idMustBeResolvedAgainstNearestParent_NotJustImmediateParent_numberIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}id":"http://example.com/a.json","definitions":{"x":{"${'$'}id":"http://example.com/b/c.json","not":{"definitions":{"y":{"${'$'}id":"d.json","type":"number"}}}}},"allOf":[{"${'$'}ref":"http://example.com/b/d.json"}]}
            """,
            true,
            """${'$'}id must be resolved against nearest parent, not just immediate parent -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$id must be resolved against nearest parent, not just immediate parent -> non-number is invalid"
     */
    @Test
    fun ref_______idMustBeResolvedAgainstNearestParent_NotJustImmediateParent_non_numberIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_______idMustBeResolvedAgainstNearestParent_NotJustImmediateParent_non_numberIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}id":"http://example.com/a.json","definitions":{"x":{"${'$'}id":"http://example.com/b/c.json","not":{"definitions":{"y":{"${'$'}id":"d.json","type":"number"}}}}},"allOf":[{"${'$'}ref":"http://example.com/b/d.json"}]}
            """,
            false,
            """${'$'}id must be resolved against nearest parent, not just immediate parent -> non-number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "simple URN base URI with $ref via the URN -> valid under the URN IDed schema"
     */
    @Test
    fun ref_simpleURNBaseURIWith______refViaTheURN_validUnderTheURNIDedSchema() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_simpleURNBaseURIWith______refViaTheURN_validUnderTheURNIDedSchema" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":37}
            """,
            """
                {"${'$'}comment":"URIs do not have to have HTTP(s) schemes","${'$'}id":"urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed","minimum":30,"properties":{"foo":{"${'$'}ref":"urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"}}}
            """,
            true,
            """simple URN base URI with ${'$'}ref via the URN -> valid under the URN IDed schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "simple URN base URI with $ref via the URN -> invalid under the URN IDed schema"
     */
    @Test
    fun ref_simpleURNBaseURIWith______refViaTheURN_invalidUnderTheURNIDedSchema() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_simpleURNBaseURIWith______refViaTheURN_invalidUnderTheURNIDedSchema" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"${'$'}comment":"URIs do not have to have HTTP(s) schemes","${'$'}id":"urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed","minimum":30,"properties":{"foo":{"${'$'}ref":"urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed"}}}
            """,
            false,
            """simple URN base URI with ${'$'}ref via the URN -> invalid under the URN IDed schema""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "simple URN base URI with JSON pointer -> a string is valid"
     */
    @Test
    fun ref_simpleURNBaseURIWithJSONPointer_aStringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"${'$'}comment":"URIs do not have to have HTTP(s) schemes","${'$'}id":"urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            true,
            """simple URN base URI with JSON pointer -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "simple URN base URI with JSON pointer -> a non-string is invalid"
     */
    @Test
    fun ref_simpleURNBaseURIWithJSONPointer_aNon_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"${'$'}comment":"URIs do not have to have HTTP(s) schemes","${'$'}id":"urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            false,
            """simple URN base URI with JSON pointer -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with NSS -> a string is valid"
     */
    @Test
    fun ref_uRNBaseURIWithNSS_aStringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"${'$'}comment":"RFC 8141 §2.2","${'$'}id":"urn:example:1/406/47452/2","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            true,
            """URN base URI with NSS -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with NSS -> a non-string is invalid"
     */
    @Test
    fun ref_uRNBaseURIWithNSS_aNon_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"${'$'}comment":"RFC 8141 §2.2","${'$'}id":"urn:example:1/406/47452/2","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            false,
            """URN base URI with NSS -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with r-component -> a string is valid"
     */
    @Test
    fun ref_uRNBaseURIWithR_component_aStringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"${'$'}comment":"RFC 8141 §2.3.1","${'$'}id":"urn:example:foo-bar-baz-qux?+CCResolve:cc=uk","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            true,
            """URN base URI with r-component -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with r-component -> a non-string is invalid"
     */
    @Test
    fun ref_uRNBaseURIWithR_component_aNon_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"${'$'}comment":"RFC 8141 §2.3.1","${'$'}id":"urn:example:foo-bar-baz-qux?+CCResolve:cc=uk","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            false,
            """URN base URI with r-component -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with q-component -> a string is valid"
     */
    @Test
    fun ref_uRNBaseURIWithQ_component_aStringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"${'$'}comment":"RFC 8141 §2.3.2","${'$'}id":"urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            true,
            """URN base URI with q-component -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with q-component -> a non-string is invalid"
     */
    @Test
    fun ref_uRNBaseURIWithQ_component_aNon_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"${'$'}comment":"RFC 8141 §2.3.2","${'$'}id":"urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z","properties":{"foo":{"${'$'}ref":"#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            false,
            """URN base URI with q-component -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with URN and JSON pointer ref -> a string is valid"
     */
    @Test
    fun ref_uRNBaseURIWithURNAndJSONPointerRef_aStringIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_uRNBaseURIWithURNAndJSONPointerRef_aStringIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"${'$'}id":"urn:uuid:deadbeef-1234-0000-0000-4321feebdaed","properties":{"foo":{"${'$'}ref":"urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            true,
            """URN base URI with URN and JSON pointer ref -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with URN and JSON pointer ref -> a non-string is invalid"
     */
    @Test
    fun ref_uRNBaseURIWithURNAndJSONPointerRef_aNon_stringIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_uRNBaseURIWithURNAndJSONPointerRef_aNon_stringIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"${'$'}id":"urn:uuid:deadbeef-1234-0000-0000-4321feebdaed","properties":{"foo":{"${'$'}ref":"urn:uuid:deadbeef-1234-0000-0000-4321feebdaed#/definitions/bar"}},"definitions":{"bar":{"type":"string"}}}
            """,
            false,
            """URN base URI with URN and JSON pointer ref -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with URN and anchor ref -> a string is valid"
     */
    @Test
    fun ref_uRNBaseURIWithURNAndAnchorRef_aStringIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_uRNBaseURIWithURNAndAnchorRef_aStringIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":"bar"}
            """,
            """
                {"${'$'}id":"urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed","properties":{"foo":{"${'$'}ref":"urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"}},"definitions":{"bar":{"${'$'}id":"#something","type":"string"}}}
            """,
            true,
            """URN base URI with URN and anchor ref -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "URN base URI with URN and anchor ref -> a non-string is invalid"
     */
    @Test
    fun ref_uRNBaseURIWithURNAndAnchorRef_aNon_stringIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_uRNBaseURIWithURNAndAnchorRef_aNon_stringIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"foo":12}
            """,
            """
                {"${'$'}id":"urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed","properties":{"foo":{"${'$'}ref":"urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"}},"definitions":{"bar":{"${'$'}id":"#something","type":"string"}}}
            """,
            false,
            """URN base URI with URN and anchor ref -> a non-string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref to if -> a non-integer is invalid due to the $ref"
     */
    @Test
    fun ref_refToIf_aNon_integerIsInvalidDueToThe______ref() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refToIf_aNon_integerIsInvalidDueToThe______ref" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[{"${'$'}ref":"http://example.com/ref/if"},{"if":{"${'$'}id":"http://example.com/ref/if","type":"integer"}}]}
            """,
            false,
            """ref to if -> a non-integer is invalid due to the ${'$'}ref""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref to if -> an integer is valid"
     */
    @Test
    fun ref_refToIf_anIntegerIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refToIf_anIntegerIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"allOf":[{"${'$'}ref":"http://example.com/ref/if"},{"if":{"${'$'}id":"http://example.com/ref/if","type":"integer"}}]}
            """,
            true,
            """ref to if -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref to then -> a non-integer is invalid due to the $ref"
     */
    @Test
    fun ref_refToThen_aNon_integerIsInvalidDueToThe______ref() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refToThen_aNon_integerIsInvalidDueToThe______ref" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[{"${'$'}ref":"http://example.com/ref/then"},{"then":{"${'$'}id":"http://example.com/ref/then","type":"integer"}}]}
            """,
            false,
            """ref to then -> a non-integer is invalid due to the ${'$'}ref""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref to then -> an integer is valid"
     */
    @Test
    fun ref_refToThen_anIntegerIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refToThen_anIntegerIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"allOf":[{"${'$'}ref":"http://example.com/ref/then"},{"then":{"${'$'}id":"http://example.com/ref/then","type":"integer"}}]}
            """,
            true,
            """ref to then -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref to else -> a non-integer is invalid due to the $ref"
     */
    @Test
    fun ref_refToElse_aNon_integerIsInvalidDueToThe______ref() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refToElse_aNon_integerIsInvalidDueToThe______ref" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"allOf":[{"${'$'}ref":"http://example.com/ref/else"},{"else":{"${'$'}id":"http://example.com/ref/else","type":"integer"}}]}
            """,
            false,
            """ref to else -> a non-integer is invalid due to the ${'$'}ref""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref to else -> an integer is valid"
     */
    @Test
    fun ref_refToElse_anIntegerIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refToElse_anIntegerIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"allOf":[{"${'$'}ref":"http://example.com/ref/else"},{"else":{"${'$'}id":"http://example.com/ref/else","type":"integer"}}]}
            """,
            true,
            """ref to else -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref with absolute-path-reference -> a string is valid"
     */
    @Test
    fun ref_refWithAbsolute_path_reference_aStringIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refWithAbsolute_path_reference_aStringIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"${'$'}id":"http://example.com/ref/absref.json","definitions":{"a":{"${'$'}id":"http://example.com/ref/absref/foobar.json","type":"number"},"b":{"${'$'}id":"http://example.com/absref/foobar.json","type":"string"}},"allOf":[{"${'$'}ref":"/absref/foobar.json"}]}
            """,
            true,
            """ref with absolute-path-reference -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "ref with absolute-path-reference -> an integer is invalid"
     */
    @Test
    fun ref_refWithAbsolute_path_reference_anIntegerIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "ref_refWithAbsolute_path_reference_anIntegerIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"${'$'}id":"http://example.com/ref/absref.json","definitions":{"a":{"${'$'}id":"http://example.com/ref/absref/foobar.json","type":"number"},"b":{"${'$'}id":"http://example.com/absref/foobar.json","type":"string"}},"allOf":[{"${'$'}ref":"/absref/foobar.json"}]}
            """,
            false,
            """ref with absolute-path-reference -> an integer is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$id with file URI still resolves pointers - *nix -> number is valid"
     */
    @Test
    fun ref_______idWithFileURIStillResolvesPointers__nix_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}id":"file:///folder/file.json","definitions":{"foo":{"type":"number"}},"allOf":[{"${'$'}ref":"#/definitions/foo"}]}
            """,
            true,
            """${'$'}id with file URI still resolves pointers - *nix -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$id with file URI still resolves pointers - *nix -> non-number is invalid"
     */
    @Test
    fun ref_______idWithFileURIStillResolvesPointers__nix_non_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}id":"file:///folder/file.json","definitions":{"foo":{"type":"number"}},"allOf":[{"${'$'}ref":"#/definitions/foo"}]}
            """,
            false,
            """${'$'}id with file URI still resolves pointers - *nix -> non-number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$id with file URI still resolves pointers - windows -> number is valid"
     */
    @Test
    fun ref_______idWithFileURIStillResolvesPointers_Windows_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}id":"file:///c:/folder/file.json","definitions":{"foo":{"type":"number"}},"allOf":[{"${'$'}ref":"#/definitions/foo"}]}
            """,
            true,
            """${'$'}id with file URI still resolves pointers - windows -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "$id with file URI still resolves pointers - windows -> non-number is invalid"
     */
    @Test
    fun ref_______idWithFileURIStillResolvesPointers_Windows_non_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}id":"file:///c:/folder/file.json","definitions":{"foo":{"type":"number"}},"allOf":[{"${'$'}ref":"#/definitions/foo"}]}
            """,
            false,
            """${'$'}id with file URI still resolves pointers - windows -> non-number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "empty tokens in $ref json-pointer -> number is valid"
     */
    @Test
    fun ref_emptyTokensIn______refJson_pointer_numberIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"definitions":{"":{"definitions":{"":{"type":"number"}}}},"allOf":[{"${'$'}ref":"#/definitions//definitions/"}]}
            """,
            true,
            """empty tokens in ${'$'}ref json-pointer -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/ref.json`:
     *     "empty tokens in $ref json-pointer -> non-number is invalid"
     */
    @Test
    fun ref_emptyTokensIn______refJson_pointer_non_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"definitions":{"":{"definitions":{"":{"type":"number"}}}},"allOf":[{"${'$'}ref":"#/definitions//definitions/"}]}
            """,
            false,
            """empty tokens in ${'$'}ref json-pointer -> non-number is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref -> remote ref valid"
     */
    @Test
    fun refRemote_remoteRef_remoteRefValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_remoteRef_remoteRefValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}ref":"http://localhost:1234/integer.json"}
            """,
            true,
            """remote ref -> remote ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref -> remote ref invalid"
     */
    @Test
    fun refRemote_remoteRef_remoteRefInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_remoteRef_remoteRefInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}ref":"http://localhost:1234/integer.json"}
            """,
            false,
            """remote ref -> remote ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "fragment within remote ref -> remote fragment valid"
     */
    @Test
    fun refRemote_fragmentWithinRemoteRef_remoteFragmentValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_fragmentWithinRemoteRef_remoteFragmentValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}ref":"http://localhost:1234/subSchemas.json#/definitions/integer"}
            """,
            true,
            """fragment within remote ref -> remote fragment valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "fragment within remote ref -> remote fragment invalid"
     */
    @Test
    fun refRemote_fragmentWithinRemoteRef_remoteFragmentInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_fragmentWithinRemoteRef_remoteFragmentInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}ref":"http://localhost:1234/subSchemas.json#/definitions/integer"}
            """,
            false,
            """fragment within remote ref -> remote fragment invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "ref within remote ref -> ref within ref valid"
     */
    @Test
    fun refRemote_refWithinRemoteRef_refWithinRefValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_refWithinRemoteRef_refWithinRefValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}ref":"http://localhost:1234/subSchemas.json#/definitions/refToInteger"}
            """,
            true,
            """ref within remote ref -> ref within ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "ref within remote ref -> ref within ref invalid"
     */
    @Test
    fun refRemote_refWithinRemoteRef_refWithinRefInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_refWithinRemoteRef_refWithinRefInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}ref":"http://localhost:1234/subSchemas.json#/definitions/refToInteger"}
            """,
            false,
            """ref within remote ref -> ref within ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change -> base URI change ref valid"
     */
    @Test
    fun refRemote_baseURIChange_baseURIChangeRefValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_baseURIChange_baseURIChangeRefValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [[1]]
            """,
            """
                {"${'$'}id":"http://localhost:1234/","items":{"${'$'}id":"baseUriChange/","items":{"${'$'}ref":"folderInteger.json"}}}
            """,
            true,
            """base URI change -> base URI change ref valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change -> base URI change ref invalid"
     */
    @Test
    fun refRemote_baseURIChange_baseURIChangeRefInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_baseURIChange_baseURIChangeRefInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                [["a"]]
            """,
            """
                {"${'$'}id":"http://localhost:1234/","items":{"${'$'}id":"baseUriChange/","items":{"${'$'}ref":"folderInteger.json"}}}
            """,
            false,
            """base URI change -> base URI change ref invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder -> number is valid"
     */
    @Test
    fun refRemote_baseURIChange_ChangeFolder_numberIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_baseURIChange_ChangeFolder_numberIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"list":[1]}
            """,
            """
                {"${'$'}id":"http://localhost:1234/scope_change_defs1.json","type":"object","properties":{"list":{"${'$'}ref":"#/definitions/baz"}},"definitions":{"baz":{"${'$'}id":"baseUriChangeFolder/","type":"array","items":{"${'$'}ref":"folderInteger.json"}}}}
            """,
            true,
            """base URI change - change folder -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder -> string is invalid"
     */
    @Test
    fun refRemote_baseURIChange_ChangeFolder_stringIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_baseURIChange_ChangeFolder_stringIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"list":["a"]}
            """,
            """
                {"${'$'}id":"http://localhost:1234/scope_change_defs1.json","type":"object","properties":{"list":{"${'$'}ref":"#/definitions/baz"}},"definitions":{"baz":{"${'$'}id":"baseUriChangeFolder/","type":"array","items":{"${'$'}ref":"folderInteger.json"}}}}
            """,
            false,
            """base URI change - change folder -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder in subschema -> number is valid"
     */
    @Test
    fun refRemote_baseURIChange_ChangeFolderInSubschema_numberIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_baseURIChange_ChangeFolderInSubschema_numberIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"list":[1]}
            """,
            """
                {"${'$'}id":"http://localhost:1234/scope_change_defs2.json","type":"object","properties":{"list":{"${'$'}ref":"#/definitions/baz/definitions/bar"}},"definitions":{"baz":{"${'$'}id":"baseUriChangeFolderInSubschema/","definitions":{"bar":{"type":"array","items":{"${'$'}ref":"folderInteger.json"}}}}}}
            """,
            true,
            """base URI change - change folder in subschema -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "base URI change - change folder in subschema -> string is invalid"
     */
    @Test
    fun refRemote_baseURIChange_ChangeFolderInSubschema_stringIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_baseURIChange_ChangeFolderInSubschema_stringIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"list":["a"]}
            """,
            """
                {"${'$'}id":"http://localhost:1234/scope_change_defs2.json","type":"object","properties":{"list":{"${'$'}ref":"#/definitions/baz/definitions/bar"}},"definitions":{"baz":{"${'$'}id":"baseUriChangeFolderInSubschema/","definitions":{"bar":{"type":"array","items":{"${'$'}ref":"folderInteger.json"}}}}}}
            """,
            false,
            """base URI change - change folder in subschema -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "root ref in remote ref -> string is valid"
     */
    @Test
    fun refRemote_rootRefInRemoteRef_stringIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_rootRefInRemoteRef_stringIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"name":"foo"}
            """,
            """
                {"${'$'}id":"http://localhost:1234/object","type":"object","properties":{"name":{"${'$'}ref":"name.json#/definitions/orNull"}}}
            """,
            true,
            """root ref in remote ref -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "root ref in remote ref -> null is valid"
     */
    @Test
    fun refRemote_rootRefInRemoteRef_nullIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_rootRefInRemoteRef_nullIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"name":null}
            """,
            """
                {"${'$'}id":"http://localhost:1234/object","type":"object","properties":{"name":{"${'$'}ref":"name.json#/definitions/orNull"}}}
            """,
            true,
            """root ref in remote ref -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "root ref in remote ref -> object is invalid"
     */
    @Test
    fun refRemote_rootRefInRemoteRef_objectIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_rootRefInRemoteRef_objectIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"name":{"name":null}}
            """,
            """
                {"${'$'}id":"http://localhost:1234/object","type":"object","properties":{"name":{"${'$'}ref":"name.json#/definitions/orNull"}}}
            """,
            false,
            """root ref in remote ref -> object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref with ref to definitions -> invalid"
     */
    @Test
    fun refRemote_remoteRefWithRefToDefinitions_invalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_remoteRefWithRefToDefinitions_invalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"bar":1}
            """,
            """
                {"${'$'}id":"http://localhost:1234/schema-remote-ref-ref-defs1.json","allOf":[{"${'$'}ref":"ref-and-definitions.json"}]}
            """,
            false,
            """remote ref with ref to definitions -> invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "remote ref with ref to definitions -> valid"
     */
    @Test
    fun refRemote_remoteRefWithRefToDefinitions_valid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_remoteRefWithRefToDefinitions_valid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"bar":"a"}
            """,
            """
                {"${'$'}id":"http://localhost:1234/schema-remote-ref-ref-defs1.json","allOf":[{"${'$'}ref":"ref-and-definitions.json"}]}
            """,
            true,
            """remote ref with ref to definitions -> valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "Location-independent identifier in remote ref -> integer is valid"
     */
    @Test
    fun refRemote_location_independentIdentifierInRemoteRef_integerIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_location_independentIdentifierInRemoteRef_integerIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}ref":"http://localhost:1234/locationIndependentIdentifierPre2019.json#/definitions/refToInteger"}
            """,
            true,
            """Location-independent identifier in remote ref -> integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "Location-independent identifier in remote ref -> string is invalid"
     */
    @Test
    fun refRemote_location_independentIdentifierInRemoteRef_stringIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_location_independentIdentifierInRemoteRef_stringIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"${'$'}ref":"http://localhost:1234/locationIndependentIdentifierPre2019.json#/definitions/refToInteger"}
            """,
            false,
            """Location-independent identifier in remote ref -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "retrieved nested refs resolve relative to their URI not $id -> number is invalid"
     */
    @Test
    fun refRemote_retrievedNestedRefsResolveRelativeToTheirURINot______id_numberIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_retrievedNestedRefsResolveRelativeToTheirURINot______id_numberIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"name":{"foo":1}}
            """,
            """
                {"${'$'}id":"http://localhost:1234/some-id","properties":{"name":{"${'$'}ref":"nested/foo-ref-string.json"}}}
            """,
            false,
            """retrieved nested refs resolve relative to their URI not ${'$'}id -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "retrieved nested refs resolve relative to their URI not $id -> string is valid"
     */
    @Test
    fun refRemote_retrievedNestedRefsResolveRelativeToTheirURINot______id_stringIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_retrievedNestedRefsResolveRelativeToTheirURINot______id_stringIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                {"name":{"foo":"a"}}
            """,
            """
                {"${'$'}id":"http://localhost:1234/some-id","properties":{"name":{"${'$'}ref":"nested/foo-ref-string.json"}}}
            """,
            true,
            """retrieved nested refs resolve relative to their URI not ${'$'}id -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "$ref to $ref finds location-independent $id -> number is valid"
     */
    @Test
    fun refRemote_______refTo______refFindsLocation_independent______id_numberIsValid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_______refTo______refFindsLocation_independent______id_numberIsValid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"${'$'}ref":"http://localhost:1234/draft7/detached-ref.json#/definitions/foo"}
            """,
            true,
            """${'$'}ref to ${'$'}ref finds location-independent ${'$'}id -> number is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/refRemote.json`:
     *     "$ref to $ref finds location-independent $id -> non-number is invalid"
     */
    @Test
    fun refRemote_______refTo______refFindsLocation_independent______id_non_numberIsInvalid() {
       /**
        * TODO implement the schema functionality under test here and remove this exclusion from
        * "refRemote_______refTo______refFindsLocation_independent______id_non_numberIsInvalid" from 
        * [org.kson.jsonsuite.schemaTestSuiteExclusions]
        */
        return
        
        assertKsonEnforcesSchema(
            """
                "a"
            """,
            """
                {"${'$'}ref":"http://localhost:1234/draft7/detached-ref.json#/definitions/foo"}
            """,
            false,
            """${'$'}ref to ${'$'}ref finds location-independent ${'$'}id -> non-number is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required validation -> present required property is valid"
     */
    @Test
    fun required_requiredValidation_presentRequiredPropertyIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":1}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"required":["foo"]}
            """,
            true,
            """required validation -> present required property is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required validation -> non-present required property is invalid"
     */
    @Test
    fun required_requiredValidation_non_presentRequiredPropertyIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"bar":1}
            """,
            """
                {"properties":{"foo":{},"bar":{}},"required":["foo"]}
            """,
            false,
            """required validation -> non-present required property is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required validation -> ignores arrays"
     */
    @Test
    fun required_requiredValidation_ignoresArrays() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"properties":{"foo":{},"bar":{}},"required":["foo"]}
            """,
            true,
            """required validation -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required validation -> ignores strings"
     */
    @Test
    fun required_requiredValidation_ignoresStrings() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {"properties":{"foo":{},"bar":{}},"required":["foo"]}
            """,
            true,
            """required validation -> ignores strings""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required validation -> ignores other non-objects"
     */
    @Test
    fun required_requiredValidation_ignoresOtherNon_objects() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"properties":{"foo":{},"bar":{}},"required":["foo"]}
            """,
            true,
            """required validation -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required default validation -> not required by default"
     */
    @Test
    fun required_requiredDefaultValidation_notRequiredByDefault() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"properties":{"foo":{}}}
            """,
            true,
            """required default validation -> not required by default""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required with empty array -> property not required"
     */
    @Test
    fun required_requiredWithEmptyArray_propertyNotRequired() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"properties":{"foo":{}},"required":[]}
            """,
            true,
            """required with empty array -> property not required""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required with escaped characters -> object with all properties present is valid"
     */
    @Test
    fun required_requiredWithEscapedCharacters_objectWithAllPropertiesPresentIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\nbar":1,"foo\"bar":1,"foo\\bar":1,"foo\rbar":1,"foo\tbar":1,"foo\fbar":1}
            """,
            """
                {"required":["foo\nbar","foo\"bar","foo\\bar","foo\rbar","foo\tbar","foo\fbar"]}
            """,
            true,
            """required with escaped characters -> object with all properties present is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required with escaped characters -> object with some properties missing is invalid"
     */
    @Test
    fun required_requiredWithEscapedCharacters_objectWithSomePropertiesMissingIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo\nbar":"1","foo\"bar":"1"}
            """,
            """
                {"required":["foo\nbar","foo\"bar","foo\\bar","foo\rbar","foo\tbar","foo\fbar"]}
            """,
            false,
            """required with escaped characters -> object with some properties missing is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required properties whose names are Javascript object property names -> ignores arrays"
     */
    @Test
    fun required_requiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames_ignoresArrays() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"required":["__proto__","toString","constructor"]}
            """,
            true,
            """required properties whose names are Javascript object property names -> ignores arrays""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required properties whose names are Javascript object property names -> ignores other non-objects"
     */
    @Test
    fun required_requiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames_ignoresOtherNon_objects() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {"required":["__proto__","toString","constructor"]}
            """,
            true,
            """required properties whose names are Javascript object property names -> ignores other non-objects""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required properties whose names are Javascript object property names -> none of the properties mentioned"
     */
    @Test
    fun required_requiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames_noneOfThePropertiesMentioned() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"required":["__proto__","toString","constructor"]}
            """,
            false,
            """required properties whose names are Javascript object property names -> none of the properties mentioned""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required properties whose names are Javascript object property names -> __proto__ present"
     */
    @Test
    fun required_requiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames___proto__Present() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"__proto__":"foo"}
            """,
            """
                {"required":["__proto__","toString","constructor"]}
            """,
            false,
            """required properties whose names are Javascript object property names -> __proto__ present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required properties whose names are Javascript object property names -> toString present"
     */
    @Test
    fun required_requiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames_toStringPresent() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"toString":{"length":37}}
            """,
            """
                {"required":["__proto__","toString","constructor"]}
            """,
            false,
            """required properties whose names are Javascript object property names -> toString present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required properties whose names are Javascript object property names -> constructor present"
     */
    @Test
    fun required_requiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames_constructorPresent() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"constructor":{"length":37}}
            """,
            """
                {"required":["__proto__","toString","constructor"]}
            """,
            false,
            """required properties whose names are Javascript object property names -> constructor present""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/required.json`:
     *     "required properties whose names are Javascript object property names -> all present"
     */
    @Test
    fun required_requiredPropertiesWhoseNamesAreJavascriptObjectPropertyNames_allPresent() {
        // Ensure JS implementations don't universally consider e.g. __proto__ to always be present in an object.
        assertKsonEnforcesSchema(
            """
                {"__proto__":12,"toString":{"length":"foo"},"constructor":37}
            """,
            """
                {"required":["__proto__","toString","constructor"]}
            """,
            true,
            """required properties whose names are Javascript object property names -> all present""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> an integer is an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_anIntegerIsAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":"integer"}
            """,
            true,
            """integer type matches integers -> an integer is an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> a float with zero fractional part is an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_aFloatWithZeroFractionalPartIsAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {"type":"integer"}
            """,
            true,
            """integer type matches integers -> a float with zero fractional part is an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> a float is not an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_aFloatIsNotAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":"integer"}
            """,
            false,
            """integer type matches integers -> a float is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> a string is not an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_aStringIsNotAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"integer"}
            """,
            false,
            """integer type matches integers -> a string is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> a string is still not an integer, even if it looks like one"
     */
    @Test
    fun type_integerTypeMatchesIntegers_aStringIsStillNotAnInteger_EvenIfItLooksLikeOne() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {"type":"integer"}
            """,
            false,
            """integer type matches integers -> a string is still not an integer, even if it looks like one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> an object is not an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_anObjectIsNotAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"integer"}
            """,
            false,
            """integer type matches integers -> an object is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> an array is not an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_anArrayIsNotAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":"integer"}
            """,
            false,
            """integer type matches integers -> an array is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> a boolean is not an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_aBooleanIsNotAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":"integer"}
            """,
            false,
            """integer type matches integers -> a boolean is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "integer type matches integers -> null is not an integer"
     */
    @Test
    fun type_integerTypeMatchesIntegers_nullIsNotAnInteger() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":"integer"}
            """,
            false,
            """integer type matches integers -> null is not an integer""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> an integer is a number"
     */
    @Test
    fun type_numberTypeMatchesNumbers_anIntegerIsANumber() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":"number"}
            """,
            true,
            """number type matches numbers -> an integer is a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> a float with zero fractional part is a number (and an integer)"
     */
    @Test
    fun type_numberTypeMatchesNumbers_aFloatWithZeroFractionalPartIsANumber_andAnInteger_() {
        
        assertKsonEnforcesSchema(
            """
                1.0
            """,
            """
                {"type":"number"}
            """,
            true,
            """number type matches numbers -> a float with zero fractional part is a number (and an integer)""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> a float is a number"
     */
    @Test
    fun type_numberTypeMatchesNumbers_aFloatIsANumber() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":"number"}
            """,
            true,
            """number type matches numbers -> a float is a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> a string is not a number"
     */
    @Test
    fun type_numberTypeMatchesNumbers_aStringIsNotANumber() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"number"}
            """,
            false,
            """number type matches numbers -> a string is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> a string is still not a number, even if it looks like one"
     */
    @Test
    fun type_numberTypeMatchesNumbers_aStringIsStillNotANumber_EvenIfItLooksLikeOne() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {"type":"number"}
            """,
            false,
            """number type matches numbers -> a string is still not a number, even if it looks like one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> an object is not a number"
     */
    @Test
    fun type_numberTypeMatchesNumbers_anObjectIsNotANumber() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"number"}
            """,
            false,
            """number type matches numbers -> an object is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> an array is not a number"
     */
    @Test
    fun type_numberTypeMatchesNumbers_anArrayIsNotANumber() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":"number"}
            """,
            false,
            """number type matches numbers -> an array is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> a boolean is not a number"
     */
    @Test
    fun type_numberTypeMatchesNumbers_aBooleanIsNotANumber() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":"number"}
            """,
            false,
            """number type matches numbers -> a boolean is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "number type matches numbers -> null is not a number"
     */
    @Test
    fun type_numberTypeMatchesNumbers_nullIsNotANumber() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":"number"}
            """,
            false,
            """number type matches numbers -> null is not a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> 1 is not a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_1IsNotAString() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":"string"}
            """,
            false,
            """string type matches strings -> 1 is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> a float is not a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_aFloatIsNotAString() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":"string"}
            """,
            false,
            """string type matches strings -> a float is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> a string is a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_aStringIsAString() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"string"}
            """,
            true,
            """string type matches strings -> a string is a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> a string is still a string, even if it looks like a number"
     */
    @Test
    fun type_stringTypeMatchesStrings_aStringIsStillAString_EvenIfItLooksLikeANumber() {
        
        assertKsonEnforcesSchema(
            """
                "1"
            """,
            """
                {"type":"string"}
            """,
            true,
            """string type matches strings -> a string is still a string, even if it looks like a number""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> an empty string is still a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_anEmptyStringIsStillAString() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {"type":"string"}
            """,
            true,
            """string type matches strings -> an empty string is still a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> an object is not a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_anObjectIsNotAString() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"string"}
            """,
            false,
            """string type matches strings -> an object is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> an array is not a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_anArrayIsNotAString() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":"string"}
            """,
            false,
            """string type matches strings -> an array is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> a boolean is not a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_aBooleanIsNotAString() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":"string"}
            """,
            false,
            """string type matches strings -> a boolean is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "string type matches strings -> null is not a string"
     */
    @Test
    fun type_stringTypeMatchesStrings_nullIsNotAString() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":"string"}
            """,
            false,
            """string type matches strings -> null is not a string""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "object type matches objects -> an integer is not an object"
     */
    @Test
    fun type_objectTypeMatchesObjects_anIntegerIsNotAnObject() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":"object"}
            """,
            false,
            """object type matches objects -> an integer is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "object type matches objects -> a float is not an object"
     */
    @Test
    fun type_objectTypeMatchesObjects_aFloatIsNotAnObject() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":"object"}
            """,
            false,
            """object type matches objects -> a float is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "object type matches objects -> a string is not an object"
     */
    @Test
    fun type_objectTypeMatchesObjects_aStringIsNotAnObject() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"object"}
            """,
            false,
            """object type matches objects -> a string is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "object type matches objects -> an object is an object"
     */
    @Test
    fun type_objectTypeMatchesObjects_anObjectIsAnObject() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"object"}
            """,
            true,
            """object type matches objects -> an object is an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "object type matches objects -> an array is not an object"
     */
    @Test
    fun type_objectTypeMatchesObjects_anArrayIsNotAnObject() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":"object"}
            """,
            false,
            """object type matches objects -> an array is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "object type matches objects -> a boolean is not an object"
     */
    @Test
    fun type_objectTypeMatchesObjects_aBooleanIsNotAnObject() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":"object"}
            """,
            false,
            """object type matches objects -> a boolean is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "object type matches objects -> null is not an object"
     */
    @Test
    fun type_objectTypeMatchesObjects_nullIsNotAnObject() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":"object"}
            """,
            false,
            """object type matches objects -> null is not an object""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "array type matches arrays -> an integer is not an array"
     */
    @Test
    fun type_arrayTypeMatchesArrays_anIntegerIsNotAnArray() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":"array"}
            """,
            false,
            """array type matches arrays -> an integer is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "array type matches arrays -> a float is not an array"
     */
    @Test
    fun type_arrayTypeMatchesArrays_aFloatIsNotAnArray() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":"array"}
            """,
            false,
            """array type matches arrays -> a float is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "array type matches arrays -> a string is not an array"
     */
    @Test
    fun type_arrayTypeMatchesArrays_aStringIsNotAnArray() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"array"}
            """,
            false,
            """array type matches arrays -> a string is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "array type matches arrays -> an object is not an array"
     */
    @Test
    fun type_arrayTypeMatchesArrays_anObjectIsNotAnArray() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"array"}
            """,
            false,
            """array type matches arrays -> an object is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "array type matches arrays -> an array is an array"
     */
    @Test
    fun type_arrayTypeMatchesArrays_anArrayIsAnArray() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":"array"}
            """,
            true,
            """array type matches arrays -> an array is an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "array type matches arrays -> a boolean is not an array"
     */
    @Test
    fun type_arrayTypeMatchesArrays_aBooleanIsNotAnArray() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":"array"}
            """,
            false,
            """array type matches arrays -> a boolean is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "array type matches arrays -> null is not an array"
     */
    @Test
    fun type_arrayTypeMatchesArrays_nullIsNotAnArray() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":"array"}
            """,
            false,
            """array type matches arrays -> null is not an array""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> an integer is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_anIntegerIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> an integer is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> zero is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_zeroIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> zero is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> a float is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_aFloatIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> a float is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> a string is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_aStringIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> a string is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> an empty string is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_anEmptyStringIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> an empty string is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> an object is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_anObjectIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> an object is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> an array is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_anArrayIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> an array is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> true is a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_trueIsABoolean() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":"boolean"}
            """,
            true,
            """boolean type matches booleans -> true is a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> false is a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_falseIsABoolean() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"type":"boolean"}
            """,
            true,
            """boolean type matches booleans -> false is a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "boolean type matches booleans -> null is not a boolean"
     */
    @Test
    fun type_booleanTypeMatchesBooleans_nullIsNotABoolean() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":"boolean"}
            """,
            false,
            """boolean type matches booleans -> null is not a boolean""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> an integer is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_anIntegerIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> an integer is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> a float is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_aFloatIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> a float is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> zero is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_zeroIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> zero is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> a string is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_aStringIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> a string is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> an empty string is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_anEmptyStringIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                ""
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> an empty string is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> an object is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_anObjectIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> an object is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> an array is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_anArrayIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> an array is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> true is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_trueIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> true is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> false is not null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_falseIsNotNull() {
        
        assertKsonEnforcesSchema(
            """
                false
            """,
            """
                {"type":"null"}
            """,
            false,
            """null type matches only the null object -> false is not null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "null type matches only the null object -> null is null"
     */
    @Test
    fun type_nullTypeMatchesOnlyTheNullObject_nullIsNull() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":"null"}
            """,
            true,
            """null type matches only the null object -> null is null""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "multiple types can be specified in an array -> an integer is valid"
     */
    @Test
    fun type_multipleTypesCanBeSpecifiedInAnArray_anIntegerIsValid() {
        
        assertKsonEnforcesSchema(
            """
                1
            """,
            """
                {"type":["integer","string"]}
            """,
            true,
            """multiple types can be specified in an array -> an integer is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "multiple types can be specified in an array -> a string is valid"
     */
    @Test
    fun type_multipleTypesCanBeSpecifiedInAnArray_aStringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":["integer","string"]}
            """,
            true,
            """multiple types can be specified in an array -> a string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "multiple types can be specified in an array -> a float is invalid"
     */
    @Test
    fun type_multipleTypesCanBeSpecifiedInAnArray_aFloatIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                1.1
            """,
            """
                {"type":["integer","string"]}
            """,
            false,
            """multiple types can be specified in an array -> a float is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "multiple types can be specified in an array -> an object is invalid"
     */
    @Test
    fun type_multipleTypesCanBeSpecifiedInAnArray_anObjectIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                {}
            """,
            """
                {"type":["integer","string"]}
            """,
            false,
            """multiple types can be specified in an array -> an object is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "multiple types can be specified in an array -> an array is invalid"
     */
    @Test
    fun type_multipleTypesCanBeSpecifiedInAnArray_anArrayIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                []
            """,
            """
                {"type":["integer","string"]}
            """,
            false,
            """multiple types can be specified in an array -> an array is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "multiple types can be specified in an array -> a boolean is invalid"
     */
    @Test
    fun type_multipleTypesCanBeSpecifiedInAnArray_aBooleanIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                true
            """,
            """
                {"type":["integer","string"]}
            """,
            false,
            """multiple types can be specified in an array -> a boolean is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "multiple types can be specified in an array -> null is invalid"
     */
    @Test
    fun type_multipleTypesCanBeSpecifiedInAnArray_nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":["integer","string"]}
            """,
            false,
            """multiple types can be specified in an array -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type as array with one item -> string is valid"
     */
    @Test
    fun type_typeAsArrayWithOneItem_stringIsValid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":["string"]}
            """,
            true,
            """type as array with one item -> string is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type as array with one item -> number is invalid"
     */
    @Test
    fun type_typeAsArrayWithOneItem_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"type":["string"]}
            """,
            false,
            """type as array with one item -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array or object -> array is valid"
     */
    @Test
    fun type_type_ArrayOrObject_arrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"type":["array","object"]}
            """,
            true,
            """type: array or object -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array or object -> object is valid"
     */
    @Test
    fun type_type_ArrayOrObject_objectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":123}
            """,
            """
                {"type":["array","object"]}
            """,
            true,
            """type: array or object -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array or object -> number is invalid"
     */
    @Test
    fun type_type_ArrayOrObject_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"type":["array","object"]}
            """,
            false,
            """type: array or object -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array or object -> string is invalid"
     */
    @Test
    fun type_type_ArrayOrObject_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":["array","object"]}
            """,
            false,
            """type: array or object -> string is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array or object -> null is invalid"
     */
    @Test
    fun type_type_ArrayOrObject_nullIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":["array","object"]}
            """,
            false,
            """type: array or object -> null is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array, object or null -> array is valid"
     */
    @Test
    fun type_type_Array_ObjectOrNull_arrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,3]
            """,
            """
                {"type":["array","object","null"]}
            """,
            true,
            """type: array, object or null -> array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array, object or null -> object is valid"
     */
    @Test
    fun type_type_Array_ObjectOrNull_objectIsValid() {
        
        assertKsonEnforcesSchema(
            """
                {"foo":123}
            """,
            """
                {"type":["array","object","null"]}
            """,
            true,
            """type: array, object or null -> object is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array, object or null -> null is valid"
     */
    @Test
    fun type_type_Array_ObjectOrNull_nullIsValid() {
        
        assertKsonEnforcesSchema(
            """
                null
            """,
            """
                {"type":["array","object","null"]}
            """,
            true,
            """type: array, object or null -> null is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array, object or null -> number is invalid"
     */
    @Test
    fun type_type_Array_ObjectOrNull_numberIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                123
            """,
            """
                {"type":["array","object","null"]}
            """,
            false,
            """type: array, object or null -> number is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/type.json`:
     *     "type: array, object or null -> string is invalid"
     */
    @Test
    fun type_type_Array_ObjectOrNull_stringIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {"type":["array","object","null"]}
            """,
            false,
            """type: array, object or null -> string is invalid""")
    }
    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of integers is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_uniqueArrayOfIntegersIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> unique array of integers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of integers is invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueArrayOfIntegersIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,1]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique array of integers is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of more than two integers is invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueArrayOfMoreThanTwoIntegersIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2,1]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique array of more than two integers is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> numbers are unique if mathematically unequal"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_numbersAreUniqueIfMathematicallyUnequal() {
        
        assertKsonEnforcesSchema(
            """
                [1.0,1.00,1]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> numbers are unique if mathematically unequal""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> false is not equal to zero"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_falseIsNotEqualToZero() {
        
        assertKsonEnforcesSchema(
            """
                [0,false]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> false is not equal to zero""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> true is not equal to one"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_trueIsNotEqualToOne() {
        
        assertKsonEnforcesSchema(
            """
                [1,true]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> true is not equal to one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of strings is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_uniqueArrayOfStringsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo","bar","baz"]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> unique array of strings is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of strings is invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueArrayOfStringsIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                ["foo","bar","foo"]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique array of strings is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of objects is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_uniqueArrayOfObjectsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":"bar"},{"foo":"baz"}]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> unique array of objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of objects is invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueArrayOfObjectsIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":"bar"},{"foo":"bar"}]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique array of objects is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> property order of array of objects is ignored"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_propertyOrderOfArrayOfObjectsIsIgnored() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":"bar","bar":"foo"},{"bar":"foo","foo":"bar"}]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> property order of array of objects is ignored""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of nested objects is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_uniqueArrayOfNestedObjectsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":{"bar":{"baz":true}}},{"foo":{"bar":{"baz":false}}}]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> unique array of nested objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of nested objects is invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueArrayOfNestedObjectsIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":{"bar":{"baz":true}}},{"foo":{"bar":{"baz":true}}}]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique array of nested objects is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> unique array of arrays is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_uniqueArrayOfArraysIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [["foo"],["bar"]]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> unique array of arrays is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of arrays is invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueArrayOfArraysIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [["foo"],["foo"]]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique array of arrays is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique array of more than two arrays is invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueArrayOfMoreThanTwoArraysIsInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [["foo"],["bar"],["foo"]]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique array of more than two arrays is invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> 1 and true are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_1AndTrueAreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [1,true]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> 1 and true are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> 0 and false are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_0AndFalseAreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [0,false]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> 0 and false are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> [1] and [true] are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation__1_And_true_AreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [[1],[true]]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> [1] and [true] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> [0] and [false] are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation__0_And_false_AreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [[0],[false]]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> [0] and [false] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> nested [1] and [true] are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_nested_1_And_true_AreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [[[1],"foo"],[[true],"foo"]]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> nested [1] and [true] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> nested [0] and [false] are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_nested_0_And_false_AreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [[[0],"foo"],[[false],"foo"]]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> nested [0] and [false] are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> unique heterogeneous types are valid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_uniqueHeterogeneousTypesAreValid() {
        
        assertKsonEnforcesSchema(
            """
                [{},[1],true,null,1,"{}"]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> unique heterogeneous types are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> non-unique heterogeneous types are invalid"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_non_uniqueHeterogeneousTypesAreInvalid() {
        
        assertKsonEnforcesSchema(
            """
                [{},[1],true,null,{},1]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> non-unique heterogeneous types are invalid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> different objects are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_differentObjectsAreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [{"a":1,"b":2},{"a":2,"b":1}]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> different objects are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> objects are non-unique despite key order"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation_objectsAreNon_uniqueDespiteKeyOrder() {
        
        assertKsonEnforcesSchema(
            """
                [{"a":1,"b":2},{"b":2,"a":1}]
            """,
            """
                {"uniqueItems":true}
            """,
            false,
            """uniqueItems validation -> objects are non-unique despite key order""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> {"a": false} and {"a": 0} are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation___a__False_And__a__0_AreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [{"a":false},{"a":0}]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> {"a": false} and {"a": 0} are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems validation -> {"a": true} and {"a": 1} are unique"
     */
    @Test
    fun uniqueItems_uniqueItemsValidation___a__True_And__a__1_AreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [{"a":true},{"a":1}]
            """,
            """
                {"uniqueItems":true}
            """,
            true,
            """uniqueItems validation -> {"a": true} and {"a": 1} are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [false, true] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems__false_True_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            true,
            """uniqueItems with an array of items -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [true, false] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems__true_False_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            true,
            """uniqueItems with an array of items -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [false, false] from items array is not valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems__false_False_FromItemsArrayIsNotValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            false,
            """uniqueItems with an array of items -> [false, false] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> [true, true] from items array is not valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems__true_True_FromItemsArrayIsNotValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            false,
            """uniqueItems with an array of items -> [true, true] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> unique array extended from [false, true] is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems_uniqueArrayExtendedFrom_false_True_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true,"foo","bar"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            true,
            """uniqueItems with an array of items -> unique array extended from [false, true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> unique array extended from [true, false] is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems_uniqueArrayExtendedFrom_true_False_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false,"foo","bar"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            true,
            """uniqueItems with an array of items -> unique array extended from [true, false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> non-unique array extended from [false, true] is not valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems_non_uniqueArrayExtendedFrom_false_True_IsNotValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true,"foo","foo"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            false,
            """uniqueItems with an array of items -> non-unique array extended from [false, true] is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items -> non-unique array extended from [true, false] is not valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItems_non_uniqueArrayExtendedFrom_true_False_IsNotValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false,"foo","foo"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true}
            """,
            false,
            """uniqueItems with an array of items -> non-unique array extended from [true, false] is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [false, true] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItemsAndAdditionalItems_false__false_True_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true,"additionalItems":false}
            """,
            true,
            """uniqueItems with an array of items and additionalItems=false -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [true, false] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItemsAndAdditionalItems_false__true_False_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true,"additionalItems":false}
            """,
            true,
            """uniqueItems with an array of items and additionalItems=false -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [false, false] from items array is not valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItemsAndAdditionalItems_false__false_False_FromItemsArrayIsNotValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true,"additionalItems":false}
            """,
            false,
            """uniqueItems with an array of items and additionalItems=false -> [false, false] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> [true, true] from items array is not valid"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItemsAndAdditionalItems_false__true_True_FromItemsArrayIsNotValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true,"additionalItems":false}
            """,
            false,
            """uniqueItems with an array of items and additionalItems=false -> [true, true] from items array is not valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems with an array of items and additionalItems=false -> extra items are invalid even if unique"
     */
    @Test
    fun uniqueItems_uniqueItemsWithAnArrayOfItemsAndAdditionalItems_false_extraItemsAreInvalidEvenIfUnique() {
        
        assertKsonEnforcesSchema(
            """
                [false,true,null]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":true,"additionalItems":false}
            """,
            false,
            """uniqueItems with an array of items and additionalItems=false -> extra items are invalid even if unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of integers is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_uniqueArrayOfIntegersIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,2]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> unique array of integers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of integers is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_non_uniqueArrayOfIntegersIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [1,1]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> non-unique array of integers is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> numbers are unique if mathematically unequal"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_numbersAreUniqueIfMathematicallyUnequal() {
        
        assertKsonEnforcesSchema(
            """
                [1.0,1.00,1]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> numbers are unique if mathematically unequal""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> false is not equal to zero"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_falseIsNotEqualToZero() {
        
        assertKsonEnforcesSchema(
            """
                [0,false]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> false is not equal to zero""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> true is not equal to one"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_trueIsNotEqualToOne() {
        
        assertKsonEnforcesSchema(
            """
                [1,true]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> true is not equal to one""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of objects is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_uniqueArrayOfObjectsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":"bar"},{"foo":"baz"}]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> unique array of objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of objects is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_non_uniqueArrayOfObjectsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":"bar"},{"foo":"bar"}]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> non-unique array of objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of nested objects is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_uniqueArrayOfNestedObjectsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":{"bar":{"baz":true}}},{"foo":{"bar":{"baz":false}}}]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> unique array of nested objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of nested objects is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_non_uniqueArrayOfNestedObjectsIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [{"foo":{"bar":{"baz":true}}},{"foo":{"bar":{"baz":true}}}]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> non-unique array of nested objects is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique array of arrays is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_uniqueArrayOfArraysIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [["foo"],["bar"]]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> unique array of arrays is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique array of arrays is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_non_uniqueArrayOfArraysIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [["foo"],["foo"]]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> non-unique array of arrays is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> 1 and true are unique"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_1AndTrueAreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [1,true]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> 1 and true are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> 0 and false are unique"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_0AndFalseAreUnique() {
        
        assertKsonEnforcesSchema(
            """
                [0,false]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> 0 and false are unique""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> unique heterogeneous types are valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_uniqueHeterogeneousTypesAreValid() {
        
        assertKsonEnforcesSchema(
            """
                [{},[1],true,null,1]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> unique heterogeneous types are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false validation -> non-unique heterogeneous types are valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseValidation_non_uniqueHeterogeneousTypesAreValid() {
        
        assertKsonEnforcesSchema(
            """
                [{},[1],true,null,{},1]
            """,
            """
                {"uniqueItems":false}
            """,
            true,
            """uniqueItems=false validation -> non-unique heterogeneous types are valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [false, true] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems__false_True_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [true, false] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems__true_False_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [false, false] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems__false_False_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> [false, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> [true, true] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems__true_True_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> [true, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> unique array extended from [false, true] is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems_uniqueArrayExtendedFrom_false_True_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true,"foo","bar"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> unique array extended from [false, true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> unique array extended from [true, false] is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems_uniqueArrayExtendedFrom_true_False_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false,"foo","bar"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> unique array extended from [true, false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> non-unique array extended from [false, true] is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems_non_uniqueArrayExtendedFrom_false_True_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true,"foo","foo"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> non-unique array extended from [false, true] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items -> non-unique array extended from [true, false] is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItems_non_uniqueArrayExtendedFrom_true_False_IsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false,"foo","foo"]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false}
            """,
            true,
            """uniqueItems=false with an array of items -> non-unique array extended from [true, false] is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [false, true] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItemsAndAdditionalItems_false__false_True_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false,"additionalItems":false}
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [false, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [true, false] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItemsAndAdditionalItems_false__true_False_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false,"additionalItems":false}
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [true, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [false, false] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItemsAndAdditionalItems_false__false_False_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [false,false]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false,"additionalItems":false}
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [false, false] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> [true, true] from items array is valid"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItemsAndAdditionalItems_false__true_True_FromItemsArrayIsValid() {
        
        assertKsonEnforcesSchema(
            """
                [true,true]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false,"additionalItems":false}
            """,
            true,
            """uniqueItems=false with an array of items and additionalItems=false -> [true, true] from items array is valid""")
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/uniqueItems.json`:
     *     "uniqueItems=false with an array of items and additionalItems=false -> extra items are invalid even if unique"
     */
    @Test
    fun uniqueItems_uniqueItems_falseWithAnArrayOfItemsAndAdditionalItems_false_extraItemsAreInvalidEvenIfUnique() {
        
        assertKsonEnforcesSchema(
            """
                [false,true,null]
            """,
            """
                {"items":[{"type":"boolean"},{"type":"boolean"}],"uniqueItems":false,"additionalItems":false}
            """,
            false,
            """uniqueItems=false with an array of items and additionalItems=false -> extra items are invalid even if unique""")
    }
}
