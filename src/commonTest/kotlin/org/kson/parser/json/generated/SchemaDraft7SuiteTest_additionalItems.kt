package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_additionalItems : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as schema -> additional items match schema"
     *
     * Test ID: "additionalItems::additionalItems as schema::additional items match schema"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "items": [
                        {
                        }
                    ],
                    "additionalItems": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "additionalItems::additionalItems as schema::additional items match schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as schema -> additional items do not match schema"
     *
     * Test ID: "additionalItems::additionalItems as schema::additional items do not match schema"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null,
                    2,
                    3,
                    "foo"
                ]
            """,
            """
                {
                    "items": [
                        {
                        }
                    ],
                    "additionalItems": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "additionalItems::additionalItems as schema::additional items do not match schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "when items is schema, additionalItems does nothing -> valid with a array of type integers"
     *
     * Test ID: "additionalItems::when items is schema, additionalItems does nothing::valid with a array of type integers"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "items": {
                        "type": "integer"
                    },
                    "additionalItems": {
                        "type": "string"
                    }
                }
            """,
            true,
            """    schemaTestId: "additionalItems::when items is schema, additionalItems does nothing::valid with a array of type integers"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "when items is schema, additionalItems does nothing -> invalid with a array of mixed types"
     *
     * Test ID: "additionalItems::when items is schema, additionalItems does nothing::invalid with a array of mixed types"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "2",
                    "3"
                ]
            """,
            """
                {
                    "items": {
                        "type": "integer"
                    },
                    "additionalItems": {
                        "type": "string"
                    }
                }
            """,
            false,
            """    schemaTestId: "additionalItems::when items is schema, additionalItems does nothing::invalid with a array of mixed types"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "when items is schema, boolean additionalItems does nothing -> all items match schema"
     *
     * Test ID: "additionalItems::when items is schema, boolean additionalItems does nothing::all items match schema"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            """,
            """
                {
                    "items": {
                    },
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::when items is schema, boolean additionalItems does nothing::all items match schema"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> empty array"
     *
     * Test ID: "additionalItems::array of items with no additionalItems permitted::empty array"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                [
                ]
            """,
            """
                {
                    "items": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::array of items with no additionalItems permitted::empty array"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> fewer number of items present (1)"
     *
     * Test ID: "additionalItems::array of items with no additionalItems permitted::fewer number of items present (1)"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1
                ]
            """,
            """
                {
                    "items": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::array of items with no additionalItems permitted::fewer number of items present (1)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> fewer number of items present (2)"
     *
     * Test ID: "additionalItems::array of items with no additionalItems permitted::fewer number of items present (2)"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2
                ]
            """,
            """
                {
                    "items": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::array of items with no additionalItems permitted::fewer number of items present (2)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> equal number of items present"
     *
     * Test ID: "additionalItems::array of items with no additionalItems permitted::equal number of items present"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3
                ]
            """,
            """
                {
                    "items": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::array of items with no additionalItems permitted::equal number of items present"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "array of items with no additionalItems permitted -> additional items are not permitted"
     *
     * Test ID: "additionalItems::array of items with no additionalItems permitted::additional items are not permitted"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "items": [
                        {
                        },
                        {
                        },
                        {
                        }
                    ],
                    "additionalItems": false
                }
            """,
            false,
            """    schemaTestId: "additionalItems::array of items with no additionalItems permitted::additional items are not permitted"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as false without items -> items defaults to empty schema so everything is valid"
     *
     * Test ID: "additionalItems::additionalItems as false without items::items defaults to empty schema so everything is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ]
            """,
            """
                {
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::additionalItems as false without items::items defaults to empty schema so everything is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems as false without items -> ignores non-arrays"
     *
     * Test ID: "additionalItems::additionalItems as false without items::ignores non-arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar"
                }
            """,
            """
                {
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::additionalItems as false without items::ignores non-arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems are allowed by default -> only the first item is validated"
     *
     * Test ID: "additionalItems::additionalItems are allowed by default::only the first item is validated"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "foo",
                    false
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "integer"
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "additionalItems::additionalItems are allowed by default::only the first item is validated"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems does not look in applicators, valid case -> items defined in allOf are not examined"
     *
     * Test ID: "additionalItems::additionalItems does not look in applicators, valid case::items defined in allOf are not examined"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    null
                ]
            """,
            """
                {
                    "allOf": [
                        {
                            "items": [
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    ],
                    "additionalItems": {
                        "type": "boolean"
                    }
                }
            """,
            true,
            """    schemaTestId: "additionalItems::additionalItems does not look in applicators, valid case::items defined in allOf are not examined"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems does not look in applicators, invalid case -> items defined in allOf are not examined"
     *
     * Test ID: "additionalItems::additionalItems does not look in applicators, invalid case::items defined in allOf are not examined"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    "hello"
                ]
            """,
            """
                {
                    "allOf": [
                        {
                            "items": [
                                {
                                    "type": "integer"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "items": [
                        {
                            "type": "integer"
                        }
                    ],
                    "additionalItems": {
                        "type": "boolean"
                    }
                }
            """,
            false,
            """    schemaTestId: "additionalItems::additionalItems does not look in applicators, invalid case::items defined in allOf are not examined"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "items validation adjusts the starting index for additionalItems -> valid items"
     *
     * Test ID: "additionalItems::items validation adjusts the starting index for additionalItems::valid items"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "x",
                    2,
                    3
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "additionalItems": {
                        "type": "integer"
                    }
                }
            """,
            true,
            """    schemaTestId: "additionalItems::items validation adjusts the starting index for additionalItems::valid items"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "items validation adjusts the starting index for additionalItems -> wrong type of second item"
     *
     * Test ID: "additionalItems::items validation adjusts the starting index for additionalItems::wrong type of second item"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "x",
                    "y"
                ]
            """,
            """
                {
                    "items": [
                        {
                            "type": "string"
                        }
                    ],
                    "additionalItems": {
                        "type": "integer"
                    }
                }
            """,
            false,
            """    schemaTestId: "additionalItems::items validation adjusts the starting index for additionalItems::wrong type of second item"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems with heterogeneous array -> heterogeneous invalid instance"
     *
     * Test ID: "additionalItems::additionalItems with heterogeneous array::heterogeneous invalid instance"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo",
                    "bar",
                    37
                ]
            """,
            """
                {
                    "items": [
                        {
                        }
                    ],
                    "additionalItems": false
                }
            """,
            false,
            """    schemaTestId: "additionalItems::additionalItems with heterogeneous array::heterogeneous invalid instance"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems with heterogeneous array -> valid instance"
     *
     * Test ID: "additionalItems::additionalItems with heterogeneous array::valid instance"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "items": [
                        {
                        }
                    ],
                    "additionalItems": false
                }
            """,
            true,
            """    schemaTestId: "additionalItems::additionalItems with heterogeneous array::valid instance"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/additionalItems.json`:
     *     "additionalItems with null instance elements -> allows null elements"
     *
     * Test ID: "additionalItems::additionalItems with null instance elements::allows null elements"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                [
                    null
                ]
            """,
            """
                {
                    "additionalItems": {
                        "type": "null"
                    }
                }
            """,
            true,
            """    schemaTestId: "additionalItems::additionalItems with null instance elements::allows null elements"    """)
    }
}
