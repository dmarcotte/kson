package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_patternProperties : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> a single valid match is valid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::a single valid match is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties validates properties matching a regex::a single valid match is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> multiple valid matches is valid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::multiple valid matches is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "foooooo": 2
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties validates properties matching a regex::multiple valid matches is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> a single invalid match is invalid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::a single invalid match is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar",
                    "fooooo": 2
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::patternProperties validates properties matching a regex::a single invalid match is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> multiple invalid matches is invalid"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::multiple invalid matches is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": "bar",
                    "foooooo": "baz"
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::patternProperties validates properties matching a regex::multiple invalid matches is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores arrays"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                [
                    "foo"
                ]
            """,
            """
                {
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties validates properties matching a regex::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores strings"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                "foo"
            """,
            """
                {
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties validates properties matching a regex::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties validates properties matching a regex -> ignores other non-objects"
     *
     * Test ID: "patternProperties::patternProperties validates properties matching a regex::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "patternProperties": {
                        "f.*o": {
                            "type": "integer"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties validates properties matching a regex::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> a single valid match is valid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::a single valid match is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 21
                }
            """,
            """
                {
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::multiple simultaneous patternProperties are validated::a single valid match is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> a simultaneous match is valid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::a simultaneous match is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "aaaa": 18
                }
            """,
            """
                {
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::multiple simultaneous patternProperties are validated::a simultaneous match is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> multiple matches is valid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::multiple matches is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": 21,
                    "aaaa": 18
                }
            """,
            """
                {
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::multiple simultaneous patternProperties are validated::multiple matches is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to one is invalid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to one is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a": "bar"
                }
            """,
            """
                {
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to one is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to the other is invalid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to the other is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "aaaa": 31
                }
            """,
            """
                {
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to the other is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "multiple simultaneous patternProperties are validated -> an invalid due to both is invalid"
     *
     * Test ID: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to both is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "aaa": "foo",
                    "aaaa": 31
                }
            """,
            """
                {
                    "patternProperties": {
                        "a*": {
                            "type": "integer"
                        },
                        "aaa*": {
                            "maximum": 20
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::multiple simultaneous patternProperties are validated::an invalid due to both is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> non recognized members are ignored"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::non recognized members are ignored"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "answer 1": "42"
                }
            """,
            """
                {
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::regexes are not anchored by default and are case sensitive::non recognized members are ignored"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> recognized members are accounted for"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::recognized members are accounted for"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a31b": null
                }
            """,
            """
                {
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::regexes are not anchored by default and are case sensitive::recognized members are accounted for"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> regexes are case sensitive"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::regexes are case sensitive"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a_x_3": 3
                }
            """,
            """
                {
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::regexes are not anchored by default and are case sensitive::regexes are case sensitive"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "regexes are not anchored by default and are case sensitive -> regexes are case sensitive, 2"
     *
     * Test ID: "patternProperties::regexes are not anchored by default and are case sensitive::regexes are case sensitive, 2"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "a_X_3": 3
                }
            """,
            """
                {
                    "patternProperties": {
                        "[0-9]{2,}": {
                            "type": "boolean"
                        },
                        "X_": {
                            "type": "string"
                        }
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::regexes are not anchored by default and are case sensitive::regexes are case sensitive, 2"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with property matching schema true is valid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with property matching schema true is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties with boolean schemas::object with property matching schema true is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with property matching schema false is invalid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with property matching schema false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "bar": 2
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::patternProperties with boolean schemas::object with property matching schema false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with both properties is invalid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with both properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1,
                    "bar": 2
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::patternProperties with boolean schemas::object with both properties is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> object with a property matching both true and false is invalid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::object with a property matching both true and false is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foobar": 1
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            false,
            """    schemaTestId: "patternProperties::patternProperties with boolean schemas::object with a property matching both true and false is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with boolean schemas -> empty object is valid"
     *
     * Test ID: "patternProperties::patternProperties with boolean schemas::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "patternProperties": {
                        "f.*": true,
                        "b.*": false
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties with boolean schemas::empty object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/patternProperties.json`:
     *     "patternProperties with null valued instance properties -> allows null values"
     *
     * Test ID: "patternProperties::patternProperties with null valued instance properties::allows null values"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foobar": null
                }
            """,
            """
                {
                    "patternProperties": {
                        "^.*bar${'$'}": {
                            "type": "null"
                        }
                    }
                }
            """,
            true,
            """    schemaTestId: "patternProperties::patternProperties with null valued instance properties::allows null values"    """)
    }
}
