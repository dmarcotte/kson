package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft7SuiteTest_if_then_else : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore if without then or else -> valid when valid against lone if"
     *
     * Test ID: "if-then-else::ignore if without then or else::valid when valid against lone if"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "if": {
                        "const": 0
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::ignore if without then or else::valid when valid against lone if"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore if without then or else -> valid when invalid against lone if"
     *
     * Test ID: "if-then-else::ignore if without then or else::valid when invalid against lone if"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {
                    "if": {
                        "const": 0
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::ignore if without then or else::valid when invalid against lone if"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore then without if -> valid when valid against lone then"
     *
     * Test ID: "if-then-else::ignore then without if::valid when valid against lone then"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "then": {
                        "const": 0
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::ignore then without if::valid when valid against lone then"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore then without if -> valid when invalid against lone then"
     *
     * Test ID: "if-then-else::ignore then without if::valid when invalid against lone then"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {
                    "then": {
                        "const": 0
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::ignore then without if::valid when invalid against lone then"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore else without if -> valid when valid against lone else"
     *
     * Test ID: "if-then-else::ignore else without if::valid when valid against lone else"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                0
            """,
            """
                {
                    "else": {
                        "const": 0
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::ignore else without if::valid when valid against lone else"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "ignore else without if -> valid when invalid against lone else"
     *
     * Test ID: "if-then-else::ignore else without if::valid when invalid against lone else"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                "hello"
            """,
            """
                {
                    "else": {
                        "const": 0
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::ignore else without if::valid when invalid against lone else"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and then without else -> valid through then"
     *
     * Test ID: "if-then-else::if and then without else::valid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if and then without else::valid through then"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and then without else -> invalid through then"
     *
     * Test ID: "if-then-else::if and then without else::invalid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::if and then without else::invalid through then"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and then without else -> valid when if test fails"
     *
     * Test ID: "if-then-else::if and then without else::valid when if test fails"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if and then without else::valid when if test fails"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and else without then -> valid when if test passes"
     *
     * Test ID: "if-then-else::if and else without then::valid when if test passes"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if and else without then::valid when if test passes"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and else without then -> valid through else"
     *
     * Test ID: "if-then-else::if and else without then::valid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_11() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if and else without then::valid through else"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if and else without then -> invalid through else"
     *
     * Test ID: "if-then-else::if and else without then::invalid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_12() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::if and else without then::invalid through else"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> valid through then"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::valid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_13() {
        
        assertKsonEnforcesSchema(
            """
                -1
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::validate against correct branch, then vs else::valid through then"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> invalid through then"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::invalid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_14() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::validate against correct branch, then vs else::invalid through then"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> valid through else"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::valid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_15() {
        
        assertKsonEnforcesSchema(
            """
                4
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::validate against correct branch, then vs else::valid through else"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "validate against correct branch, then vs else -> invalid through else"
     *
     * Test ID: "if-then-else::validate against correct branch, then vs else::invalid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_16() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "if": {
                        "exclusiveMaximum": 0
                    },
                    "then": {
                        "minimum": -10
                    },
                    "else": {
                        "multipleOf": 2
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::validate against correct branch, then vs else::invalid through else"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "non-interference across combined schemas -> valid, but would have been invalid through then"
     *
     * Test ID: "if-then-else::non-interference across combined schemas::valid, but would have been invalid through then"
     */
    @Test
    fun jsonSchemaSuiteTest_17() {
        
        assertKsonEnforcesSchema(
            """
                -100
            """,
            """
                {
                    "allOf": [
                        {
                            "if": {
                                "exclusiveMaximum": 0
                            }
                        },
                        {
                            "then": {
                                "minimum": -10
                            }
                        },
                        {
                            "else": {
                                "multipleOf": 2
                            }
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "if-then-else::non-interference across combined schemas::valid, but would have been invalid through then"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "non-interference across combined schemas -> valid, but would have been invalid through else"
     *
     * Test ID: "if-then-else::non-interference across combined schemas::valid, but would have been invalid through else"
     */
    @Test
    fun jsonSchemaSuiteTest_18() {
        
        assertKsonEnforcesSchema(
            """
                3
            """,
            """
                {
                    "allOf": [
                        {
                            "if": {
                                "exclusiveMaximum": 0
                            }
                        },
                        {
                            "then": {
                                "minimum": -10
                            }
                        },
                        {
                            "else": {
                                "multipleOf": 2
                            }
                        }
                    ]
                }
            """,
            true,
            """    schemaTestId: "if-then-else::non-interference across combined schemas::valid, but would have been invalid through else"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema true -> boolean schema true in if always chooses the then path (valid)"
     *
     * Test ID: "if-then-else::if with boolean schema true::boolean schema true in if always chooses the then path (valid)"
     */
    @Test
    fun jsonSchemaSuiteTest_19() {
        
        assertKsonEnforcesSchema(
            """
                "then"
            """,
            """
                {
                    "if": true,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if with boolean schema true::boolean schema true in if always chooses the then path (valid)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema true -> boolean schema true in if always chooses the then path (invalid)"
     *
     * Test ID: "if-then-else::if with boolean schema true::boolean schema true in if always chooses the then path (invalid)"
     */
    @Test
    fun jsonSchemaSuiteTest_20() {
        
        assertKsonEnforcesSchema(
            """
                "else"
            """,
            """
                {
                    "if": true,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::if with boolean schema true::boolean schema true in if always chooses the then path (invalid)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema false -> boolean schema false in if always chooses the else path (invalid)"
     *
     * Test ID: "if-then-else::if with boolean schema false::boolean schema false in if always chooses the else path (invalid)"
     */
    @Test
    fun jsonSchemaSuiteTest_21() {
        
        assertKsonEnforcesSchema(
            """
                "then"
            """,
            """
                {
                    "if": false,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::if with boolean schema false::boolean schema false in if always chooses the else path (invalid)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if with boolean schema false -> boolean schema false in if always chooses the else path (valid)"
     *
     * Test ID: "if-then-else::if with boolean schema false::boolean schema false in if always chooses the else path (valid)"
     */
    @Test
    fun jsonSchemaSuiteTest_22() {
        
        assertKsonEnforcesSchema(
            """
                "else"
            """,
            """
                {
                    "if": false,
                    "then": {
                        "const": "then"
                    },
                    "else": {
                        "const": "else"
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if with boolean schema false::boolean schema false in if always chooses the else path (valid)"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> yes redirects to then and passes"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::yes redirects to then and passes"
     */
    @Test
    fun jsonSchemaSuiteTest_23() {
        
        assertKsonEnforcesSchema(
            """
                "yes"
            """,
            """
                {
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if appears at the end when serialized (keyword processing sequence)::yes redirects to then and passes"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> other redirects to else and passes"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::other redirects to else and passes"
     */
    @Test
    fun jsonSchemaSuiteTest_24() {
        
        assertKsonEnforcesSchema(
            """
                "other"
            """,
            """
                {
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            true,
            """    schemaTestId: "if-then-else::if appears at the end when serialized (keyword processing sequence)::other redirects to else and passes"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> no redirects to then and fails"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::no redirects to then and fails"
     */
    @Test
    fun jsonSchemaSuiteTest_25() {
        
        assertKsonEnforcesSchema(
            """
                "no"
            """,
            """
                {
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::if appears at the end when serialized (keyword processing sequence)::no redirects to then and fails"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft7/if-then-else.json`:
     *     "if appears at the end when serialized (keyword processing sequence) -> invalid redirects to else and fails"
     *
     * Test ID: "if-then-else::if appears at the end when serialized (keyword processing sequence)::invalid redirects to else and fails"
     */
    @Test
    fun jsonSchemaSuiteTest_26() {
        
        assertKsonEnforcesSchema(
            """
                "invalid"
            """,
            """
                {
                    "then": {
                        "const": "yes"
                    },
                    "else": {
                        "const": "other"
                    },
                    "if": {
                        "maxLength": 4
                    }
                }
            """,
            false,
            """    schemaTestId: "if-then-else::if appears at the end when serialized (keyword processing sequence)::invalid redirects to else and fails"    """)
    }
}
