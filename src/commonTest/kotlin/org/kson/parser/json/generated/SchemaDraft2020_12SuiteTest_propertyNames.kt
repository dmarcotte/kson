package org.kson.parser.json.generated

import org.kson.schema.JsonSchemaTest
import kotlin.test.Test

/**
 * DO NOT MANUALLY EDIT.  This class is GENERATED by `./gradlew generateJsonTestSuite` task 
 * which calls [org.kson.jsonsuite.JsonTestSuiteGenerator]---see that class for more info.
 *
 * TODO expand the testing here as we implement Json Schema support by 
 *   removing exclusions from [org.kson.jsonsuite.schemaTestSuiteExclusions]
 */
@Suppress("UNREACHABLE_CODE", "ClassName") // unreachable code is okay here until we complete the above TODO
class SchemaDraft2020_12SuiteTest_propertyNames : JsonSchemaTest {

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> all property names valid"
     *
     * Test ID: "propertyNames::propertyNames validation::all property names valid"
     */
    @Test
    fun jsonSchemaSuiteTest_1() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "f": {
                    },
                    "foo": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames validation::all property names valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> some property names invalid"
     *
     * Test ID: "propertyNames::propertyNames validation::some property names invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_2() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": {
                    },
                    "foobar": {
                    }
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            false,
            """    schemaTestId: "propertyNames::propertyNames validation::some property names invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> object without properties is valid"
     *
     * Test ID: "propertyNames::propertyNames validation::object without properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_3() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames validation::object without properties is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> ignores arrays"
     *
     * Test ID: "propertyNames::propertyNames validation::ignores arrays"
     */
    @Test
    fun jsonSchemaSuiteTest_4() {
        
        assertKsonEnforcesSchema(
            """
                [
                    1,
                    2,
                    3,
                    4
                ]
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames validation::ignores arrays"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> ignores strings"
     *
     * Test ID: "propertyNames::propertyNames validation::ignores strings"
     */
    @Test
    fun jsonSchemaSuiteTest_5() {
        
        assertKsonEnforcesSchema(
            """
                "foobar"
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames validation::ignores strings"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames validation -> ignores other non-objects"
     *
     * Test ID: "propertyNames::propertyNames validation::ignores other non-objects"
     */
    @Test
    fun jsonSchemaSuiteTest_6() {
        
        assertKsonEnforcesSchema(
            """
                12
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": {
                        "maxLength": 3
                    }
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames validation::ignores other non-objects"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema true -> object with any properties is valid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema true::object with any properties is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_7() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": true
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames with boolean schema true::object with any properties is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema true -> empty object is valid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema true::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_8() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": true
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames with boolean schema true::empty object is valid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema false -> object with any properties is invalid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema false::object with any properties is invalid"
     */
    @Test
    fun jsonSchemaSuiteTest_9() {
        
        assertKsonEnforcesSchema(
            """
                {
                    "foo": 1
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": false
                }
            """,
            false,
            """    schemaTestId: "propertyNames::propertyNames with boolean schema false::object with any properties is invalid"    """)
    }

    /**
     * Test generated by [org.kson.jsonsuite.JsonTestSuiteGenerator] based on `buildSrc/support/jsonsuite/JSON-Schema-Test-Suite/tests/draft2020-12/propertyNames.json`:
     *     "propertyNames with boolean schema false -> empty object is valid"
     *
     * Test ID: "propertyNames::propertyNames with boolean schema false::empty object is valid"
     */
    @Test
    fun jsonSchemaSuiteTest_10() {
        
        assertKsonEnforcesSchema(
            """
                {
                }
            """,
            """
                {
                    "${'$'}schema": "https://json-schema.org/draft/2020-12/schema",
                    "propertyNames": false
                }
            """,
            true,
            """    schemaTestId: "propertyNames::propertyNames with boolean schema false::empty object is valid"    """)
    }
}
